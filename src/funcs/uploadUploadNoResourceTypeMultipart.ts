/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { CloudinaryAssetsCore } from "../core.js";
import { appendForm, encodeJSON, encodeSimple } from "../lib/encodings.js";
import { readableStreamToArrayBuffer } from "../lib/files.js";
import * as M from "../lib/matchers.js";
import { compactMap } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import * as components from "../models/components/index.js";
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from "../models/errors/httpclienterrors.js";
import * as errors from "../models/errors/index.js";
import { SDKError } from "../models/errors/sdkerror.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import * as operations from "../models/operations/index.js";
import { APICall, APIPromise } from "../types/async.js";
import { isBlobLike } from "../types/blobs.js";
import { Result } from "../types/fp.js";
import { isReadableStream } from "../types/streams.js";

export enum UploadNoResourceTypeMultipartAcceptEnum {
  applicationJson = "application/json",
  textHtml = "text/html",
}

/**
 * Upload with automatic file type detection
 *
 * @remarks
 * Uploads a file to Cloudinary. The file type is automatically detected based on its content, so you don't need to specify the type manually.
 */
export function uploadUploadNoResourceTypeMultipart(
  client: CloudinaryAssetsCore,
  request: components.BinaryUploadRequest,
  options?: RequestOptions & {
    acceptHeaderOverride?: UploadNoResourceTypeMultipartAcceptEnum;
  },
): APIPromise<
  Result<
    operations.UploadNoResourceTypeMultipartResponse,
    | errors.ApiError
    | SDKError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >
> {
  return new APIPromise($do(
    client,
    request,
    options,
  ));
}

async function $do(
  client: CloudinaryAssetsCore,
  request: components.BinaryUploadRequest,
  options?: RequestOptions & {
    acceptHeaderOverride?: UploadNoResourceTypeMultipartAcceptEnum;
  },
): Promise<
  [
    Result<
      operations.UploadNoResourceTypeMultipartResponse,
      | errors.ApiError
      | SDKError
      | SDKValidationError
      | UnexpectedClientError
      | InvalidRequestError
      | RequestAbortedError
      | RequestTimeoutError
      | ConnectionError
    >,
    APICall,
  ]
> {
  const parsed = safeParse(
    request,
    (value) => components.BinaryUploadRequest$outboundSchema.parse(value),
    "Input validation failed",
  );
  if (!parsed.ok) {
    return [parsed, { status: "invalid" }];
  }
  const payload = parsed.value;
  const body = new FormData();

  if (isBlobLike(payload.file)) {
    appendForm(body, "file", payload.file);
  } else if (isReadableStream(payload.file.content)) {
    const buffer = await readableStreamToArrayBuffer(payload.file.content);
    const blob = new Blob([buffer], { type: "application/octet-stream" });
    appendForm(body, "file", blob);
  } else {
    appendForm(
      body,
      "file",
      new Blob([payload.file.content], { type: "application/octet-stream" }),
      payload.file.fileName,
    );
  }
  if (payload.access_control !== undefined) {
    appendForm(body, "access_control", payload.access_control);
  }
  if (payload.access_mode !== undefined) {
    appendForm(body, "access_mode", payload.access_mode);
  }
  if (payload.accessibility_analysis !== undefined) {
    appendForm(body, "accessibility_analysis", payload.accessibility_analysis);
  }
  if (payload.allowed_formats !== undefined) {
    appendForm(body, "allowed_formats", payload.allowed_formats);
  }
  if (payload.api_key !== undefined) {
    appendForm(body, "api_key", payload.api_key);
  }
  if (payload.asset_folder !== undefined) {
    appendForm(body, "asset_folder", payload.asset_folder);
  }
  if (payload.async !== undefined) {
    appendForm(body, "async", payload.async);
  }
  if (payload.auto_chaptering !== undefined) {
    appendForm(body, "auto_chaptering", payload.auto_chaptering);
  }
  if (payload.auto_tagging !== undefined) {
    appendForm(body, "auto_tagging", payload.auto_tagging);
  }
  if (payload.auto_transcription !== undefined) {
    appendForm(body, "auto_transcription", payload.auto_transcription);
  }
  if (payload.background_removal !== undefined) {
    appendForm(body, "background_removal", payload.background_removal);
  }
  if (payload.backup !== undefined) {
    appendForm(body, "backup", payload.backup);
  }
  if (payload.callback !== undefined) {
    appendForm(body, "callback", payload.callback);
  }
  if (payload.categorization !== undefined) {
    appendForm(body, "categorization", payload.categorization);
  }
  if (payload.cinemagraph_analysis !== undefined) {
    appendForm(body, "cinemagraph_analysis", payload.cinemagraph_analysis);
  }
  if (payload.colors !== undefined) {
    appendForm(body, "colors", payload.colors);
  }
  if (payload.context !== undefined) {
    appendForm(body, "context", payload.context);
  }
  if (payload.custom_coordinates !== undefined) {
    appendForm(body, "custom_coordinates", payload.custom_coordinates);
  }
  if (payload.detection !== undefined) {
    appendForm(body, "detection", payload.detection);
  }
  if (payload.discard_original_filename !== undefined) {
    appendForm(
      body,
      "discard_original_filename",
      payload.discard_original_filename,
    );
  }
  if (payload.display_name !== undefined) {
    appendForm(body, "display_name", payload.display_name);
  }
  if (payload.eager !== undefined) {
    appendForm(body, "eager", payload.eager);
  }
  if (payload.eager_async !== undefined) {
    appendForm(body, "eager_async", payload.eager_async);
  }
  if (payload.eager_notification_url !== undefined) {
    appendForm(body, "eager_notification_url", payload.eager_notification_url);
  }
  if (payload.eval !== undefined) {
    appendForm(body, "eval", payload.eval);
  }
  if (payload.face_coordinates !== undefined) {
    appendForm(body, "face_coordinates", payload.face_coordinates);
  }
  if (payload.faces !== undefined) {
    appendForm(body, "faces", payload.faces);
  }
  if (payload.filename_override !== undefined) {
    appendForm(body, "filename_override", payload.filename_override);
  }
  if (payload.folder !== undefined) {
    appendForm(body, "folder", payload.folder);
  }
  if (payload.format !== undefined) {
    appendForm(body, "format", payload.format);
  }
  if (payload.headers !== undefined) {
    appendForm(body, "headers", payload.headers);
  }
  if (payload.invalidate !== undefined) {
    appendForm(body, "invalidate", payload.invalidate);
  }
  if (payload.media_metadata !== undefined) {
    appendForm(body, "media_metadata", payload.media_metadata);
  }
  if (payload.metadata !== undefined) {
    appendForm(body, "metadata", payload.metadata);
  }
  if (payload.moderation !== undefined) {
    appendForm(body, "moderation", payload.moderation);
  }
  if (payload.notification_url !== undefined) {
    appendForm(body, "notification_url", payload.notification_url);
  }
  if (payload.ocr !== undefined) {
    appendForm(body, "ocr", payload.ocr);
  }
  if (payload.on_success !== undefined) {
    appendForm(body, "on_success", payload.on_success);
  }
  if (payload.overwrite !== undefined) {
    appendForm(body, "overwrite", payload.overwrite);
  }
  if (payload.phash !== undefined) {
    appendForm(body, "phash", payload.phash);
  }
  if (payload.proxy !== undefined) {
    appendForm(body, "proxy", payload.proxy);
  }
  if (payload.public_id !== undefined) {
    appendForm(body, "public_id", payload.public_id);
  }
  if (payload.public_id_prefix !== undefined) {
    appendForm(body, "public_id_prefix", payload.public_id_prefix);
  }
  if (payload.quality_analysis !== undefined) {
    appendForm(body, "quality_analysis", payload.quality_analysis);
  }
  if (payload.raw_convert !== undefined) {
    appendForm(body, "raw_convert", payload.raw_convert);
  }
  if (payload.regions !== undefined) {
    appendForm(body, "regions", payload.regions);
  }
  if (payload.responsive_breakpoints !== undefined) {
    appendForm(
      body,
      "responsive_breakpoints",
      encodeJSON("responsive_breakpoints", payload.responsive_breakpoints, {
        explode: true,
      }),
    );
  }
  if (payload.return_delete_token !== undefined) {
    appendForm(body, "return_delete_token", payload.return_delete_token);
  }
  if (payload.signature !== undefined) {
    appendForm(body, "signature", payload.signature);
  }
  if (payload.tags !== undefined) {
    appendForm(body, "tags", payload.tags);
  }
  if (payload.timestamp !== undefined) {
    appendForm(body, "timestamp", payload.timestamp);
  }
  if (payload.transformation !== undefined) {
    appendForm(body, "transformation", payload.transformation);
  }
  if (payload.type !== undefined) {
    appendForm(body, "type", payload.type);
  }
  if (payload.unique_display_name !== undefined) {
    appendForm(body, "unique_display_name", payload.unique_display_name);
  }
  if (payload.unique_filename !== undefined) {
    appendForm(body, "unique_filename", payload.unique_filename);
  }
  if (payload.upload_preset !== undefined) {
    appendForm(body, "upload_preset", payload.upload_preset);
  }
  if (payload.use_asset_folder_as_public_id_prefix !== undefined) {
    appendForm(
      body,
      "use_asset_folder_as_public_id_prefix",
      payload.use_asset_folder_as_public_id_prefix,
    );
  }
  if (payload.use_filename !== undefined) {
    appendForm(body, "use_filename", payload.use_filename);
  }
  if (payload.use_filename_as_display_name !== undefined) {
    appendForm(
      body,
      "use_filename_as_display_name",
      payload.use_filename_as_display_name,
    );
  }
  if (payload.visual_search !== undefined) {
    appendForm(body, "visual_search", payload.visual_search);
  }

  const pathParams = {
    cloud_name: encodeSimple("cloud_name", client._options.cloudName, {
      explode: false,
      charEncoding: "percent",
    }),
  };

  const path = pathToFunc("/v1_1/{cloud_name}/upload")(pathParams);

  const headers = new Headers(compactMap({
    Accept: options?.acceptHeaderOverride
      || "application/json;q=1, text/html;q=0",
  }));

  const securityInput = await extractSecurity(client._options.security);
  const requestSecurity = resolveGlobalSecurity(securityInput);

  const context = {
    baseURL: options?.serverURL ?? client._baseURL ?? "",
    operationID: "uploadNoResourceType_multipart",
    oAuth2Scopes: [],

    resolvedSecurity: requestSecurity,

    securitySource: client._options.security,
    retryConfig: options?.retries
      || client._options.retryConfig
      || { strategy: "none" },
    retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
  };

  const requestRes = client._createRequest(context, {
    security: requestSecurity,
    method: "POST",
    baseURL: options?.serverURL,
    path: path,
    headers: headers,
    body: body,
    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
  }, options);
  if (!requestRes.ok) {
    return [requestRes, { status: "invalid" }];
  }
  const req = requestRes.value;

  const doResult = await client._do(req, {
    context,
    errorCodes: ["400", "401", "403", "404", "4XX", "5XX"],
    retryConfig: context.retryConfig,
    retryCodes: context.retryCodes,
  });
  if (!doResult.ok) {
    return [doResult, { status: "request-error", request: req }];
  }
  const response = doResult.value;

  const responseFields = {
    HttpMeta: { Response: response, Request: req },
  };

  const [result] = await M.match<
    operations.UploadNoResourceTypeMultipartResponse,
    | errors.ApiError
    | SDKError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >(
    M.json(200, operations.UploadNoResourceTypeMultipartResponse$inboundSchema),
    M.text(
      302,
      operations.UploadNoResourceTypeMultipartResponse$inboundSchema,
      { ctype: "text/html" },
    ),
    M.jsonErr([400, 401, 403, 404], errors.ApiError$inboundSchema),
    M.fail("4XX"),
    M.fail("5XX"),
  )(response, { extraFields: responseFields });
  if (!result.ok) {
    return [result, { status: "complete", request: req, response }];
  }

  return [result, { status: "complete", request: req, response }];
}
