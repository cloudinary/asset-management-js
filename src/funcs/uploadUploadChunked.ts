/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { CloudinaryAssetsCore } from "../core.js";
import { encodeJSON, encodeSimple } from "../lib/encodings.js";
import * as M from "../lib/matchers.js";
import { compactMap } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from "../models/errors/httpclienterrors.js";
import * as errors from "../models/errors/index.js";
import { SDKError } from "../models/errors/sdkerror.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import * as operations from "../models/operations/index.js";
import { APICall, APIPromise } from "../types/async.js";
import { Result } from "../types/fp.js";

export enum UploadChunkedAcceptEnum {
  applicationJson = "application/json",
  textHtml = "text/html",
}

/**
 * Upload a large file in chunks
 *
 * @remarks
 * Uploads a large file in chunks, enabling efficient upload of large files with the ability to resume interrupted uploads.
 * It is required for any files that are larger than 100 MB. This is often relevant for video files, as they tend to have larger files sizes.
 * Minimum chunk size is 5 MB.
 */
export function uploadUploadChunked(
  client: CloudinaryAssetsCore,
  request: operations.UploadChunkedRequest,
  options?: RequestOptions & { acceptHeaderOverride?: UploadChunkedAcceptEnum },
): APIPromise<
  Result<
    operations.UploadChunkedResponse,
    | errors.ApiError
    | SDKError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >
> {
  return new APIPromise($do(
    client,
    request,
    options,
  ));
}

async function $do(
  client: CloudinaryAssetsCore,
  request: operations.UploadChunkedRequest,
  options?: RequestOptions & { acceptHeaderOverride?: UploadChunkedAcceptEnum },
): Promise<
  [
    Result<
      operations.UploadChunkedResponse,
      | errors.ApiError
      | SDKError
      | SDKValidationError
      | UnexpectedClientError
      | InvalidRequestError
      | RequestAbortedError
      | RequestTimeoutError
      | ConnectionError
    >,
    APICall,
  ]
> {
  const parsed = safeParse(
    request,
    (value) => operations.UploadChunkedRequest$outboundSchema.parse(value),
    "Input validation failed",
  );
  if (!parsed.ok) {
    return [parsed, { status: "invalid" }];
  }
  const payload = parsed.value;
  const body = encodeJSON("body", payload.upload_request, { explode: true });

  const pathParams = {
    cloud_name: encodeSimple("cloud_name", client._options.cloudName, {
      explode: false,
      charEncoding: "percent",
    }),
    resource_type: encodeSimple("resource_type", payload.resource_type, {
      explode: false,
      charEncoding: "percent",
    }),
  };

  const path = pathToFunc("/v1_1/{cloud_name}/{resource_type}/upload_chunked")(
    pathParams,
  );

  const headers = new Headers(compactMap({
    "Content-Type": "application/json",
    Accept: options?.acceptHeaderOverride
      || "application/json;q=1, text/html;q=0",
    "Content-Range": encodeSimple("Content-Range", payload["Content-Range"], {
      explode: false,
      charEncoding: "none",
    }),
    "X-Unique-Upload-Id": encodeSimple(
      "X-Unique-Upload-Id",
      payload["X-Unique-Upload-Id"],
      { explode: false, charEncoding: "none" },
    ),
  }));

  const securityInput = await extractSecurity(client._options.security);
  const requestSecurity = resolveGlobalSecurity(securityInput);

  const context = {
    baseURL: options?.serverURL ?? client._baseURL ?? "",
    operationID: "uploadChunked",
    oAuth2Scopes: [],

    resolvedSecurity: requestSecurity,

    securitySource: client._options.security,
    retryConfig: options?.retries
      || client._options.retryConfig
      || { strategy: "none" },
    retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
  };

  const requestRes = client._createRequest(context, {
    security: requestSecurity,
    method: "POST",
    baseURL: options?.serverURL,
    path: path,
    headers: headers,
    body: body,
    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
  }, options);
  if (!requestRes.ok) {
    return [requestRes, { status: "invalid" }];
  }
  const req = requestRes.value;

  const doResult = await client._do(req, {
    context,
    errorCodes: ["400", "401", "403", "4XX", "5XX"],
    retryConfig: context.retryConfig,
    retryCodes: context.retryCodes,
  });
  if (!doResult.ok) {
    return [doResult, { status: "request-error", request: req }];
  }
  const response = doResult.value;

  const responseFields = {
    HttpMeta: { Response: response, Request: req },
  };

  const [result] = await M.match<
    operations.UploadChunkedResponse,
    | errors.ApiError
    | SDKError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >(
    M.json(200, operations.UploadChunkedResponse$inboundSchema),
    M.text(302, operations.UploadChunkedResponse$inboundSchema, {
      ctype: "text/html",
    }),
    M.jsonErr([400, 401, 403], errors.ApiError$inboundSchema),
    M.fail("4XX"),
    M.fail("5XX"),
  )(response, { extraFields: responseFields });
  if (!result.ok) {
    return [result, { status: "complete", request: req, response }];
  }

  return [result, { status: "complete", request: req, response }];
}
