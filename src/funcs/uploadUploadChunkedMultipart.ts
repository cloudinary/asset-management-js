/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { CloudinaryAssetsCore } from "../core.js";
import { appendForm, encodeJSON, encodeSimple } from "../lib/encodings.js";
import { readableStreamToArrayBuffer } from "../lib/files.js";
import * as M from "../lib/matchers.js";
import { compactMap } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from "../models/errors/httpclienterrors.js";
import * as errors from "../models/errors/index.js";
import { SDKError } from "../models/errors/sdkerror.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import * as operations from "../models/operations/index.js";
import { APICall, APIPromise } from "../types/async.js";
import { isBlobLike } from "../types/blobs.js";
import { Result } from "../types/fp.js";
import { isReadableStream } from "../types/streams.js";

export enum UploadChunkedMultipartAcceptEnum {
  applicationJson = "application/json",
  textHtml = "text/html",
}

/**
 * Upload a large file in chunks
 *
 * @remarks
 * Uploads a large file in chunks, enabling efficient upload of large files with the ability to resume interrupted uploads.
 * It is required for any files that are larger than 100 MB. This is often relevant for video files, as they tend to have larger files sizes.
 * Minimum chunk size is 5 MB.
 */
export function uploadUploadChunkedMultipart(
  client: CloudinaryAssetsCore,
  request: operations.UploadChunkedMultipartRequest,
  options?: RequestOptions & {
    acceptHeaderOverride?: UploadChunkedMultipartAcceptEnum;
  },
): APIPromise<
  Result<
    operations.UploadChunkedMultipartResponse,
    | errors.ApiError
    | SDKError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >
> {
  return new APIPromise($do(
    client,
    request,
    options,
  ));
}

async function $do(
  client: CloudinaryAssetsCore,
  request: operations.UploadChunkedMultipartRequest,
  options?: RequestOptions & {
    acceptHeaderOverride?: UploadChunkedMultipartAcceptEnum;
  },
): Promise<
  [
    Result<
      operations.UploadChunkedMultipartResponse,
      | errors.ApiError
      | SDKError
      | SDKValidationError
      | UnexpectedClientError
      | InvalidRequestError
      | RequestAbortedError
      | RequestTimeoutError
      | ConnectionError
    >,
    APICall,
  ]
> {
  const parsed = safeParse(
    request,
    (value) =>
      operations.UploadChunkedMultipartRequest$outboundSchema.parse(value),
    "Input validation failed",
  );
  if (!parsed.ok) {
    return [parsed, { status: "invalid" }];
  }
  const payload = parsed.value;
  const body = new FormData();

  if (isBlobLike(payload.binary_upload_request.file)) {
    appendForm(body, "file", payload.binary_upload_request.file);
  } else if (isReadableStream(payload.binary_upload_request.file.content)) {
    const buffer = await readableStreamToArrayBuffer(
      payload.binary_upload_request.file.content,
    );
    const blob = new Blob([buffer], { type: "application/octet-stream" });
    appendForm(body, "file", blob);
  } else {
    appendForm(
      body,
      "file",
      new Blob([payload.binary_upload_request.file.content], {
        type: "application/octet-stream",
      }),
      payload.binary_upload_request.file.fileName,
    );
  }
  if (payload.binary_upload_request.access_control !== undefined) {
    appendForm(
      body,
      "access_control",
      payload.binary_upload_request.access_control,
    );
  }
  if (payload.binary_upload_request.access_mode !== undefined) {
    appendForm(body, "access_mode", payload.binary_upload_request.access_mode);
  }
  if (payload.binary_upload_request.accessibility_analysis !== undefined) {
    appendForm(
      body,
      "accessibility_analysis",
      payload.binary_upload_request.accessibility_analysis,
    );
  }
  if (payload.binary_upload_request.allowed_formats !== undefined) {
    appendForm(
      body,
      "allowed_formats",
      payload.binary_upload_request.allowed_formats,
    );
  }
  if (payload.binary_upload_request.api_key !== undefined) {
    appendForm(body, "api_key", payload.binary_upload_request.api_key);
  }
  if (payload.binary_upload_request.asset_folder !== undefined) {
    appendForm(
      body,
      "asset_folder",
      payload.binary_upload_request.asset_folder,
    );
  }
  if (payload.binary_upload_request.async !== undefined) {
    appendForm(body, "async", payload.binary_upload_request.async);
  }
  if (payload.binary_upload_request.auto_chaptering !== undefined) {
    appendForm(
      body,
      "auto_chaptering",
      payload.binary_upload_request.auto_chaptering,
    );
  }
  if (payload.binary_upload_request.auto_tagging !== undefined) {
    appendForm(
      body,
      "auto_tagging",
      payload.binary_upload_request.auto_tagging,
    );
  }
  if (payload.binary_upload_request.auto_transcription !== undefined) {
    appendForm(
      body,
      "auto_transcription",
      payload.binary_upload_request.auto_transcription,
    );
  }
  if (payload.binary_upload_request.background_removal !== undefined) {
    appendForm(
      body,
      "background_removal",
      payload.binary_upload_request.background_removal,
    );
  }
  if (payload.binary_upload_request.backup !== undefined) {
    appendForm(body, "backup", payload.binary_upload_request.backup);
  }
  if (payload.binary_upload_request.callback !== undefined) {
    appendForm(body, "callback", payload.binary_upload_request.callback);
  }
  if (payload.binary_upload_request.categorization !== undefined) {
    appendForm(
      body,
      "categorization",
      payload.binary_upload_request.categorization,
    );
  }
  if (payload.binary_upload_request.cinemagraph_analysis !== undefined) {
    appendForm(
      body,
      "cinemagraph_analysis",
      payload.binary_upload_request.cinemagraph_analysis,
    );
  }
  if (payload.binary_upload_request.colors !== undefined) {
    appendForm(body, "colors", payload.binary_upload_request.colors);
  }
  if (payload.binary_upload_request.context !== undefined) {
    appendForm(body, "context", payload.binary_upload_request.context);
  }
  if (payload.binary_upload_request.custom_coordinates !== undefined) {
    appendForm(
      body,
      "custom_coordinates",
      payload.binary_upload_request.custom_coordinates,
    );
  }
  if (payload.binary_upload_request.detection !== undefined) {
    appendForm(body, "detection", payload.binary_upload_request.detection);
  }
  if (payload.binary_upload_request.discard_original_filename !== undefined) {
    appendForm(
      body,
      "discard_original_filename",
      payload.binary_upload_request.discard_original_filename,
    );
  }
  if (payload.binary_upload_request.display_name !== undefined) {
    appendForm(
      body,
      "display_name",
      payload.binary_upload_request.display_name,
    );
  }
  if (payload.binary_upload_request.eager !== undefined) {
    appendForm(body, "eager", payload.binary_upload_request.eager);
  }
  if (payload.binary_upload_request.eager_async !== undefined) {
    appendForm(body, "eager_async", payload.binary_upload_request.eager_async);
  }
  if (payload.binary_upload_request.eager_notification_url !== undefined) {
    appendForm(
      body,
      "eager_notification_url",
      payload.binary_upload_request.eager_notification_url,
    );
  }
  if (payload.binary_upload_request.eval !== undefined) {
    appendForm(body, "eval", payload.binary_upload_request.eval);
  }
  if (payload.binary_upload_request.face_coordinates !== undefined) {
    appendForm(
      body,
      "face_coordinates",
      payload.binary_upload_request.face_coordinates,
    );
  }
  if (payload.binary_upload_request.faces !== undefined) {
    appendForm(body, "faces", payload.binary_upload_request.faces);
  }
  if (payload.binary_upload_request.filename_override !== undefined) {
    appendForm(
      body,
      "filename_override",
      payload.binary_upload_request.filename_override,
    );
  }
  if (payload.binary_upload_request.folder !== undefined) {
    appendForm(body, "folder", payload.binary_upload_request.folder);
  }
  if (payload.binary_upload_request.format !== undefined) {
    appendForm(body, "format", payload.binary_upload_request.format);
  }
  if (payload.binary_upload_request.headers !== undefined) {
    appendForm(body, "headers", payload.binary_upload_request.headers);
  }
  if (payload.binary_upload_request.invalidate !== undefined) {
    appendForm(body, "invalidate", payload.binary_upload_request.invalidate);
  }
  if (payload.binary_upload_request.media_metadata !== undefined) {
    appendForm(
      body,
      "media_metadata",
      payload.binary_upload_request.media_metadata,
    );
  }
  if (payload.binary_upload_request.metadata !== undefined) {
    appendForm(body, "metadata", payload.binary_upload_request.metadata);
  }
  if (payload.binary_upload_request.moderation !== undefined) {
    appendForm(body, "moderation", payload.binary_upload_request.moderation);
  }
  if (payload.binary_upload_request.notification_url !== undefined) {
    appendForm(
      body,
      "notification_url",
      payload.binary_upload_request.notification_url,
    );
  }
  if (payload.binary_upload_request.ocr !== undefined) {
    appendForm(body, "ocr", payload.binary_upload_request.ocr);
  }
  if (payload.binary_upload_request.on_success !== undefined) {
    appendForm(body, "on_success", payload.binary_upload_request.on_success);
  }
  if (payload.binary_upload_request.overwrite !== undefined) {
    appendForm(body, "overwrite", payload.binary_upload_request.overwrite);
  }
  if (payload.binary_upload_request.phash !== undefined) {
    appendForm(body, "phash", payload.binary_upload_request.phash);
  }
  if (payload.binary_upload_request.proxy !== undefined) {
    appendForm(body, "proxy", payload.binary_upload_request.proxy);
  }
  if (payload.binary_upload_request.public_id !== undefined) {
    appendForm(body, "public_id", payload.binary_upload_request.public_id);
  }
  if (payload.binary_upload_request.public_id_prefix !== undefined) {
    appendForm(
      body,
      "public_id_prefix",
      payload.binary_upload_request.public_id_prefix,
    );
  }
  if (payload.binary_upload_request.quality_analysis !== undefined) {
    appendForm(
      body,
      "quality_analysis",
      payload.binary_upload_request.quality_analysis,
    );
  }
  if (payload.binary_upload_request.raw_convert !== undefined) {
    appendForm(body, "raw_convert", payload.binary_upload_request.raw_convert);
  }
  if (payload.binary_upload_request.regions !== undefined) {
    appendForm(body, "regions", payload.binary_upload_request.regions);
  }
  if (payload.binary_upload_request.responsive_breakpoints !== undefined) {
    appendForm(
      body,
      "responsive_breakpoints",
      encodeJSON(
        "responsive_breakpoints",
        payload.binary_upload_request.responsive_breakpoints,
        { explode: true },
      ),
    );
  }
  if (payload.binary_upload_request.return_delete_token !== undefined) {
    appendForm(
      body,
      "return_delete_token",
      payload.binary_upload_request.return_delete_token,
    );
  }
  if (payload.binary_upload_request.signature !== undefined) {
    appendForm(body, "signature", payload.binary_upload_request.signature);
  }
  if (payload.binary_upload_request.tags !== undefined) {
    appendForm(body, "tags", payload.binary_upload_request.tags);
  }
  if (payload.binary_upload_request.timestamp !== undefined) {
    appendForm(body, "timestamp", payload.binary_upload_request.timestamp);
  }
  if (payload.binary_upload_request.transformation !== undefined) {
    appendForm(
      body,
      "transformation",
      payload.binary_upload_request.transformation,
    );
  }
  if (payload.binary_upload_request.type !== undefined) {
    appendForm(body, "type", payload.binary_upload_request.type);
  }
  if (payload.binary_upload_request.unique_display_name !== undefined) {
    appendForm(
      body,
      "unique_display_name",
      payload.binary_upload_request.unique_display_name,
    );
  }
  if (payload.binary_upload_request.unique_filename !== undefined) {
    appendForm(
      body,
      "unique_filename",
      payload.binary_upload_request.unique_filename,
    );
  }
  if (payload.binary_upload_request.upload_preset !== undefined) {
    appendForm(
      body,
      "upload_preset",
      payload.binary_upload_request.upload_preset,
    );
  }
  if (
    payload.binary_upload_request.use_asset_folder_as_public_id_prefix
      !== undefined
  ) {
    appendForm(
      body,
      "use_asset_folder_as_public_id_prefix",
      payload.binary_upload_request.use_asset_folder_as_public_id_prefix,
    );
  }
  if (payload.binary_upload_request.use_filename !== undefined) {
    appendForm(
      body,
      "use_filename",
      payload.binary_upload_request.use_filename,
    );
  }
  if (
    payload.binary_upload_request.use_filename_as_display_name !== undefined
  ) {
    appendForm(
      body,
      "use_filename_as_display_name",
      payload.binary_upload_request.use_filename_as_display_name,
    );
  }
  if (payload.binary_upload_request.visual_search !== undefined) {
    appendForm(
      body,
      "visual_search",
      payload.binary_upload_request.visual_search,
    );
  }

  const pathParams = {
    cloud_name: encodeSimple("cloud_name", client._options.cloudName, {
      explode: false,
      charEncoding: "percent",
    }),
    resource_type: encodeSimple("resource_type", payload.resource_type, {
      explode: false,
      charEncoding: "percent",
    }),
  };

  const path = pathToFunc("/v1_1/{cloud_name}/{resource_type}/upload_chunked")(
    pathParams,
  );

  const headers = new Headers(compactMap({
    Accept: options?.acceptHeaderOverride
      || "application/json;q=1, text/html;q=0",
    "Content-Range": encodeSimple("Content-Range", payload["Content-Range"], {
      explode: false,
      charEncoding: "none",
    }),
    "X-Unique-Upload-Id": encodeSimple(
      "X-Unique-Upload-Id",
      payload["X-Unique-Upload-Id"],
      { explode: false, charEncoding: "none" },
    ),
  }));

  const securityInput = await extractSecurity(client._options.security);
  const requestSecurity = resolveGlobalSecurity(securityInput);

  const context = {
    baseURL: options?.serverURL ?? client._baseURL ?? "",
    operationID: "uploadChunked_multipart",
    oAuth2Scopes: [],

    resolvedSecurity: requestSecurity,

    securitySource: client._options.security,
    retryConfig: options?.retries
      || client._options.retryConfig
      || { strategy: "none" },
    retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
  };

  const requestRes = client._createRequest(context, {
    security: requestSecurity,
    method: "POST",
    baseURL: options?.serverURL,
    path: path,
    headers: headers,
    body: body,
    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
  }, options);
  if (!requestRes.ok) {
    return [requestRes, { status: "invalid" }];
  }
  const req = requestRes.value;

  const doResult = await client._do(req, {
    context,
    errorCodes: ["400", "401", "403", "4XX", "5XX"],
    retryConfig: context.retryConfig,
    retryCodes: context.retryCodes,
  });
  if (!doResult.ok) {
    return [doResult, { status: "request-error", request: req }];
  }
  const response = doResult.value;

  const responseFields = {
    HttpMeta: { Response: response, Request: req },
  };

  const [result] = await M.match<
    operations.UploadChunkedMultipartResponse,
    | errors.ApiError
    | SDKError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >(
    M.json(200, operations.UploadChunkedMultipartResponse$inboundSchema),
    M.text(302, operations.UploadChunkedMultipartResponse$inboundSchema, {
      ctype: "text/html",
    }),
    M.jsonErr([400, 401, 403], errors.ApiError$inboundSchema),
    M.fail("4XX"),
    M.fail("5XX"),
  )(response, { extraFields: responseFields });
  if (!result.ok) {
    return [result, { status: "complete", request: req, response }];
  }

  return [result, { status: "complete", request: req, response }];
}
