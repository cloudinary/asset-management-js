/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { assetsDeleteBackupVersions } from "../funcs/assetsDeleteBackupVersions.js";
import { assetsDeleteResourcesByPublicId } from "../funcs/assetsDeleteResourcesByPublicId.js";
import { assetsDerivedDestroy } from "../funcs/assetsDerivedDestroy.js";
import { assetsDestroyByAssetId } from "../funcs/assetsDestroyByAssetId.js";
import {
  assetsDownloadAsset,
  DownloadAssetAcceptEnum,
} from "../funcs/assetsDownloadAsset.js";
import {
  assetsDownloadBackupAsset,
  DownloadBackupAssetAcceptEnum,
} from "../funcs/assetsDownloadBackupAsset.js";
import { assetsExplicitAsset } from "../funcs/assetsExplicitAsset.js";
import {
  assetsGenerateArchive,
  GenerateArchiveAcceptEnum,
} from "../funcs/assetsGenerateArchive.js";
import { assetsGetResourceByAssetId } from "../funcs/assetsGetResourceByAssetId.js";
import { assetsGetResourceByPublicId } from "../funcs/assetsGetResourceByPublicId.js";
import { assetsListImages } from "../funcs/assetsListImages.js";
import { assetsListRawFiles } from "../funcs/assetsListRawFiles.js";
import { assetsListResourcesByAssetFolder } from "../funcs/assetsListResourcesByAssetFolder.js";
import { assetsListResourcesByAssetIDs } from "../funcs/assetsListResourcesByAssetIDs.js";
import { assetsListResourcesByContext } from "../funcs/assetsListResourcesByContext.js";
import { assetsListResourcesByExternalIDs } from "../funcs/assetsListResourcesByExternalIDs.js";
import { assetsListResourcesByModerationKindAndStatus } from "../funcs/assetsListResourcesByModerationKindAndStatus.js";
import { assetsListResourceTags } from "../funcs/assetsListResourceTags.js";
import { assetsListResourceTypes } from "../funcs/assetsListResourceTypes.js";
import { assetsListVideos } from "../funcs/assetsListVideos.js";
import { assetsRenameAsset } from "../funcs/assetsRenameAsset.js";
import { assetsRestoreResourcesByAssetIDs } from "../funcs/assetsRestoreResourcesByAssetIDs.js";
import { assetsUpdateResourceByAssetId } from "../funcs/assetsUpdateResourceByAssetId.js";
import { assetsUpdateResourceByPublicId } from "../funcs/assetsUpdateResourceByPublicId.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export { DownloadAssetAcceptEnum } from "../funcs/assetsDownloadAsset.js";

export { GenerateArchiveAcceptEnum } from "../funcs/assetsGenerateArchive.js";

export { DownloadBackupAssetAcceptEnum } from "../funcs/assetsDownloadBackupAsset.js";

export class Assets extends ClientSDK {
  /**
   * Renames an asset
   */
  async renameAsset(
    request: operations.RenameAssetRequest,
    options?: RequestOptions,
  ): Promise<components.UploadResponse> {
    return unwrapAsync(assetsRenameAsset(
      this,
      request,
      options,
    ));
  }

  /**
   * Downloads an asset
   */
  async downloadAsset(
    request: operations.DownloadAssetRequest,
    options?: RequestOptions & {
      acceptHeaderOverride?: DownloadAssetAcceptEnum;
    },
  ): Promise<operations.DownloadAssetResponse> {
    return unwrapAsync(assetsDownloadAsset(
      this,
      request,
      options,
    ));
  }

  /**
   * Apply operations on an existing asset
   *
   * @remarks
   * Applies actions such as transformations, tags, or metadata updates to an existing asset without re-uploading it.
   * This is useful for applying new transformations, adding tags, or updating metadata on assets that are already in your cloud.
   */
  async explicitAsset(
    request: operations.ExplicitAssetRequest,
    options?: RequestOptions,
  ): Promise<components.UploadResponse> {
    return unwrapAsync(assetsExplicitAsset(
      this,
      request,
      options,
    ));
  }

  /**
   * Generate downloadable archive
   *
   * @remarks
   * Creates a downloadable ZIP or other archive format containing the specified resources.
   */
  async generateArchive(
    request: operations.GenerateArchiveRequest,
    options?: RequestOptions & {
      acceptHeaderOverride?: GenerateArchiveAcceptEnum;
    },
  ): Promise<operations.GenerateArchiveResponse> {
    return unwrapAsync(assetsGenerateArchive(
      this,
      request,
      options,
    ));
  }

  /**
   * Download a backup copy of an asset
   */
  async downloadBackupAsset(
    request: operations.DownloadBackupAssetRequest,
    options?: RequestOptions & {
      acceptHeaderOverride?: DownloadBackupAssetAcceptEnum;
    },
  ): Promise<operations.DownloadBackupAssetResponse> {
    return unwrapAsync(assetsDownloadBackupAsset(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete asset by ID
   *
   * @remarks
   * Deletes an asset using its asset ID. This endpoint replaces the legacy /resources/by_asset_id endpoint.
   * Returns the deletion status and asset folder information when folder decoupling is enabled.
   */
  async destroyByAssetId(
    request: components.DestroyRequest,
    options?: RequestOptions,
  ): Promise<components.DestroyResponse> {
    return unwrapAsync(assetsDestroyByAssetId(
      this,
      request,
      options,
    ));
  }

  /**
   * Get resource types
   *
   * @remarks
   * Returns a list of all resource types that correspond to assets currently in your product environment.
   */
  async listResourceTypes(
    request: operations.ListResourceTypesRequest,
    options?: RequestOptions,
  ): Promise<operations.ListResourceTypesResponse> {
    return unwrapAsync(assetsListResourceTypes(
      this,
      request,
      options,
    ));
  }

  /**
   * Get image assets
   *
   * @remarks
   * Retrieves a list of image assets. Results can be filtered by various criteria like tags, moderation status, prefix, or specific public IDs.
   */
  async listImages(
    request: operations.ListImagesRequest,
    options?: RequestOptions,
  ): Promise<components.ListResponse> {
    return unwrapAsync(assetsListImages(
      this,
      request,
      options,
    ));
  }

  /**
   * Get video assets
   *
   * @remarks
   * Retrieves a list of video assets. Results can be filtered by various criteria like tags, moderation status, prefix, or specific public IDs.
   */
  async listVideos(
    request: operations.ListVideosRequest,
    options?: RequestOptions,
  ): Promise<components.ListResponse> {
    return unwrapAsync(assetsListVideos(
      this,
      request,
      options,
    ));
  }

  /**
   * Get raw assets
   *
   * @remarks
   * Retrieves a list of raw assets. Results can be filtered by various criteria like tags, moderation status, prefix, or specific public IDs.
   */
  async listRawFiles(
    request: operations.ListRawFilesRequest,
    options?: RequestOptions,
  ): Promise<components.ListResponse> {
    return unwrapAsync(assetsListRawFiles(
      this,
      request,
      options,
    ));
  }

  /**
   * Get resources by asset folder
   *
   * @remarks
   * Retrieves a list of resources within a specific asset folder. Requires folder decoupling to be enabled.
   */
  async listResourcesByAssetFolder(
    request: operations.ListResourcesByAssetFolderRequest,
    options?: RequestOptions,
  ): Promise<components.ListResponse> {
    return unwrapAsync(assetsListResourcesByAssetFolder(
      this,
      request,
      options,
    ));
  }

  /**
   * Get resources by asset IDs
   *
   * @remarks
   * Retrieves details for specific resources using their asset IDs (or external IDs).
   */
  async listResourcesByAssetIDs(
    request: operations.ListResourcesByAssetIDsRequest,
    options?: RequestOptions,
  ): Promise<components.ListResponse> {
    return unwrapAsync(assetsListResourcesByAssetIDs(
      this,
      request,
      options,
    ));
  }

  /**
   * Get resources by context
   *
   * @remarks
   * Retrieves resources matching specific context key/value pairs.
   */
  async listResourcesByContext(
    request: operations.ListResourcesByContextRequest,
    options?: RequestOptions,
  ): Promise<components.ListResponse> {
    return unwrapAsync(assetsListResourcesByContext(
      this,
      request,
      options,
    ));
  }

  /**
   * Get resources by moderation kind and status
   *
   * @remarks
   * Retrieves resources matching specific moderation kind and status.
   */
  async listResourcesByModerationKindAndStatus(
    request: operations.ListResourcesByModerationKindAndStatusRequest,
    options?: RequestOptions,
  ): Promise<components.ListResponse> {
    return unwrapAsync(assetsListResourcesByModerationKindAndStatus(
      this,
      request,
      options,
    ));
  }

  /**
   * Restore assets
   *
   * @remarks
   * Restores one or more resources from backup using their asset IDs. Can optionally specify versions to restore.
   */
  async restoreResourcesByAssetIDs(
    request: operations.RestoreResourcesByAssetIDsRequest,
    options?: RequestOptions,
  ): Promise<{ [k: string]: components.RestoreResponseUnion }> {
    return unwrapAsync(assetsRestoreResourcesByAssetIDs(
      this,
      request,
      options,
    ));
  }

  /**
   * Get resources by external IDs
   *
   * @remarks
   * Retrieves details for specific resources using their external IDs (or asset IDs).
   */
  async listResourcesByExternalIDs(
    request: operations.ListResourcesByExternalIDsRequest,
    options?: RequestOptions,
  ): Promise<components.ListResponse> {
    return unwrapAsync(assetsListResourcesByExternalIDs(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete resources by public ID
   *
   * @remarks
   * Deletes assets uploaded to your product environment, identified by their public IDs.
   */
  async deleteResourcesByPublicId(
    request: operations.DeleteResourcesByPublicIdRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteResourcesByPublicIdResponse> {
    return unwrapAsync(assetsDeleteResourcesByPublicId(
      this,
      request,
      options,
    ));
  }

  /**
   * Get resource by public ID
   *
   * @remarks
   * Returns the details of a single resource specified by its public ID.
   */
  async getResourceByPublicId(
    request: operations.GetResourceByPublicIdRequest,
    options?: RequestOptions,
  ): Promise<components.Info> {
    return unwrapAsync(assetsGetResourceByPublicId(
      this,
      request,
      options,
    ));
  }

  /**
   * Update asset by public ID
   *
   * @remarks
   * Updates one or more attributes of a specified resource (asset) identified by its public ID. Note that you can also update many attributes of an existing asset using the explicit method, which is not rate limited.
   */
  async updateResourceByPublicId(
    request: operations.UpdateResourceByPublicIdRequest,
    options?: RequestOptions,
  ): Promise<components.Info> {
    return unwrapAsync(assetsUpdateResourceByPublicId(
      this,
      request,
      options,
    ));
  }

  /**
   * Get resource by asset ID
   *
   * @remarks
   * Returns the details of a single resource specified by its asset ID.
   */
  async getResourceByAssetId(
    request: operations.GetResourceByAssetIdRequest,
    options?: RequestOptions,
  ): Promise<components.Info> {
    return unwrapAsync(assetsGetResourceByAssetId(
      this,
      request,
      options,
    ));
  }

  /**
   * Update asset by asset ID
   *
   * @remarks
   * Updates one or more attributes of a specified resource (asset) by its asset ID. This enables you to update details of an asset by its unique and immutable identifier, regardless of public ID, display name, asset folder, resource type or deliver type. Note that you can also update many attributes of an existing asset using the explicit method, which is not rate-limited.
   */
  async updateResourceByAssetId(
    request: operations.UpdateResourceByAssetIdRequest,
    options?: RequestOptions,
  ): Promise<components.Info> {
    return unwrapAsync(assetsUpdateResourceByAssetId(
      this,
      request,
      options,
    ));
  }

  /**
   * Get tags
   *
   * @remarks
   * Retrieves a comprehensive list of all tags that exist in your product environment for assets of the specified type.
   *
   * [Cloudinary Admin API documentation](https://cloudinary.com/documentation/admin_api)
   */
  async listResourceTags(
    request: operations.ListResourceTagsRequest,
    options?: RequestOptions,
  ): Promise<operations.ListResourceTagsResponse> {
    return unwrapAsync(assetsListResourceTags(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete backed up versions
   *
   * @remarks
   * Deletes specific backed up versions of an asset identified by asset ID.
   * This operation is irreversible and deleted versions cannot be recovered.
   */
  async deleteBackupVersions(
    request: operations.DeleteBackupVersionsRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteBackupVersionsResponse> {
    return unwrapAsync(assetsDeleteBackupVersions(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete derived resources
   *
   * @remarks
   * Deletes derived resources by derived resource ID
   */
  async derivedDestroy(
    request: components.DerivedDestroyRequest,
    options?: RequestOptions,
  ): Promise<components.DerivedDestroyResponse> {
    return unwrapAsync(assetsDerivedDestroy(
      this,
      request,
      options,
    ));
  }
}
