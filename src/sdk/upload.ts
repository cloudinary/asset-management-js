/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { uploadDestroyAsset } from "../funcs/uploadDestroyAsset.js";
import { uploadText } from "../funcs/uploadText.js";
import { UploadAcceptEnum, uploadUpload } from "../funcs/uploadUpload.js";
import {
  UploadChunkedAcceptEnum,
  uploadUploadChunked,
} from "../funcs/uploadUploadChunked.js";
import {
  UploadChunkedMultipartAcceptEnum,
  uploadUploadChunkedMultipart,
} from "../funcs/uploadUploadChunkedMultipart.js";
import {
  UploadMultipartAcceptEnum,
  uploadUploadMultipart,
} from "../funcs/uploadUploadMultipart.js";
import {
  UploadNoResourceTypeAcceptEnum,
  uploadUploadNoResourceType,
} from "../funcs/uploadUploadNoResourceType.js";
import {
  UploadNoResourceTypeMultipartAcceptEnum,
  uploadUploadNoResourceTypeMultipart,
} from "../funcs/uploadUploadNoResourceTypeMultipart.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export { UploadMultipartAcceptEnum } from "../funcs/uploadUploadMultipart.js";

export { UploadAcceptEnum } from "../funcs/uploadUpload.js";

export { UploadNoResourceTypeMultipartAcceptEnum } from "../funcs/uploadUploadNoResourceTypeMultipart.js";

export { UploadNoResourceTypeAcceptEnum } from "../funcs/uploadUploadNoResourceType.js";

export { UploadChunkedMultipartAcceptEnum } from "../funcs/uploadUploadChunkedMultipart.js";

export { UploadChunkedAcceptEnum } from "../funcs/uploadUploadChunked.js";

export class Upload extends ClientSDK {
  /**
   * Uploads a file to Cloudinary
   */
  async uploadMultipart(
    request: operations.UploadMultipartRequest,
    options?: RequestOptions & {
      acceptHeaderOverride?: UploadMultipartAcceptEnum;
    },
  ): Promise<operations.UploadMultipartResponse> {
    return unwrapAsync(uploadUploadMultipart(
      this,
      request,
      options,
    ));
  }

  /**
   * Uploads a file to Cloudinary
   */
  async upload(
    request: operations.UploadRequest,
    options?: RequestOptions & { acceptHeaderOverride?: UploadAcceptEnum },
  ): Promise<operations.UploadResponse> {
    return unwrapAsync(uploadUpload(
      this,
      request,
      options,
    ));
  }

  /**
   * Upload with automatic file type detection
   *
   * @remarks
   * Uploads a file to Cloudinary. The file type is automatically detected based on its content, so you don't need to specify the type manually.
   */
  async uploadNoResourceTypeMultipart(
    request: components.BinaryUploadRequest,
    options?: RequestOptions & {
      acceptHeaderOverride?: UploadNoResourceTypeMultipartAcceptEnum;
    },
  ): Promise<operations.UploadNoResourceTypeMultipartResponse> {
    return unwrapAsync(uploadUploadNoResourceTypeMultipart(
      this,
      request,
      options,
    ));
  }

  /**
   * Upload with automatic file type detection
   *
   * @remarks
   * Uploads a file to Cloudinary. The file type is automatically detected based on its content, so you don't need to specify the type manually.
   */
  async uploadNoResourceType(
    request: components.UploadRequest,
    options?: RequestOptions & {
      acceptHeaderOverride?: UploadNoResourceTypeAcceptEnum;
    },
  ): Promise<operations.UploadNoResourceTypeResponse> {
    return unwrapAsync(uploadUploadNoResourceType(
      this,
      request,
      options,
    ));
  }

  /**
   * Upload a large file in chunks
   *
   * @remarks
   * Uploads a large file in chunks, enabling efficient upload of large files with the ability to resume interrupted uploads.
   * It is required for any files that are larger than 100 MB. This is often relevant for video files, as they tend to have larger files sizes.
   * Minimum chunk size is 5 MB.
   */
  async uploadChunkedMultipart(
    request: operations.UploadChunkedMultipartRequest,
    options?: RequestOptions & {
      acceptHeaderOverride?: UploadChunkedMultipartAcceptEnum;
    },
  ): Promise<operations.UploadChunkedMultipartResponse> {
    return unwrapAsync(uploadUploadChunkedMultipart(
      this,
      request,
      options,
    ));
  }

  /**
   * Upload a large file in chunks
   *
   * @remarks
   * Uploads a large file in chunks, enabling efficient upload of large files with the ability to resume interrupted uploads.
   * It is required for any files that are larger than 100 MB. This is often relevant for video files, as they tend to have larger files sizes.
   * Minimum chunk size is 5 MB.
   */
  async uploadChunked(
    request: operations.UploadChunkedRequest,
    options?: RequestOptions & {
      acceptHeaderOverride?: UploadChunkedAcceptEnum;
    },
  ): Promise<operations.UploadChunkedResponse> {
    return unwrapAsync(uploadUploadChunked(
      this,
      request,
      options,
    ));
  }

  /**
   * Destroys an asset/resource
   */
  async destroyAsset(
    request: operations.DestroyAssetRequest,
    options?: RequestOptions,
  ): Promise<operations.DestroyAssetResponse> {
    return unwrapAsync(uploadDestroyAsset(
      this,
      request,
      options,
    ));
  }

  /**
   * Create image from text
   *
   * @remarks
   * Dynamically generates an image from a specified text string.
   */
  async text(
    request: operations.TextRequest,
    options?: RequestOptions,
  ): Promise<operations.TextResponse> {
    return unwrapAsync(uploadText(
      this,
      request,
      options,
    ));
  }
}
