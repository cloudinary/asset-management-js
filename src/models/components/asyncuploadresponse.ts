/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The status of the asynchronous upload. Will be 'pending' for async uploads.
 */
export const AsyncUploadResponseStatus = {
  Pending: "pending",
} as const;
/**
 * The status of the asynchronous upload. Will be 'pending' for async uploads.
 */
export type AsyncUploadResponseStatus = ClosedEnum<
  typeof AsyncUploadResponseStatus
>;

/**
 * The type of resource being uploaded. This field may be omitted if resource_type is not known at the time of the call.
 */
export const AsyncUploadResponseResourceType = {
  Image: "image",
  Video: "video",
  Raw: "raw",
} as const;
/**
 * The type of resource being uploaded. This field may be omitted if resource_type is not known at the time of the call.
 */
export type AsyncUploadResponseResourceType = ClosedEnum<
  typeof AsyncUploadResponseResourceType
>;

/**
 * The storage type of the asset. Defaults to 'upload'.
 */
export const AsyncUploadResponseType = {
  Upload: "upload",
  Private: "private",
  Authenticated: "authenticated",
} as const;
/**
 * The storage type of the asset. Defaults to 'upload'.
 */
export type AsyncUploadResponseType = ClosedEnum<
  typeof AsyncUploadResponseType
>;

/**
 * Response returned when an upload is processed asynchronously (async=true)
 */
export type AsyncUploadResponse = {
  /**
   * The status of the asynchronous upload. Will be 'pending' for async uploads.
   */
  status: AsyncUploadResponseStatus;
  /**
   * The type of resource being uploaded. This field may be omitted if resource_type is not known at the time of the call.
   */
  resourceType?: AsyncUploadResponseResourceType | undefined;
  /**
   * The storage type of the asset. Defaults to 'upload'.
   */
  type?: AsyncUploadResponseType | undefined;
  /**
   * The public ID assigned to the upload. May be omitted if it will be auto-generated.
   */
  publicId?: string | undefined;
  /**
   * A unique identifier for the asynchronous upload job.
   */
  batchId: string;
  /**
   * The IP address of the requester. This is only included if a product environment has requester_ip tracking enabled.
   */
  requesterIp?: string | undefined;
};

/** @internal */
export const AsyncUploadResponseStatus$inboundSchema: z.ZodNativeEnum<
  typeof AsyncUploadResponseStatus
> = z.nativeEnum(AsyncUploadResponseStatus);

/** @internal */
export const AsyncUploadResponseStatus$outboundSchema: z.ZodNativeEnum<
  typeof AsyncUploadResponseStatus
> = AsyncUploadResponseStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AsyncUploadResponseStatus$ {
  /** @deprecated use `AsyncUploadResponseStatus$inboundSchema` instead. */
  export const inboundSchema = AsyncUploadResponseStatus$inboundSchema;
  /** @deprecated use `AsyncUploadResponseStatus$outboundSchema` instead. */
  export const outboundSchema = AsyncUploadResponseStatus$outboundSchema;
}

/** @internal */
export const AsyncUploadResponseResourceType$inboundSchema: z.ZodNativeEnum<
  typeof AsyncUploadResponseResourceType
> = z.nativeEnum(AsyncUploadResponseResourceType);

/** @internal */
export const AsyncUploadResponseResourceType$outboundSchema: z.ZodNativeEnum<
  typeof AsyncUploadResponseResourceType
> = AsyncUploadResponseResourceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AsyncUploadResponseResourceType$ {
  /** @deprecated use `AsyncUploadResponseResourceType$inboundSchema` instead. */
  export const inboundSchema = AsyncUploadResponseResourceType$inboundSchema;
  /** @deprecated use `AsyncUploadResponseResourceType$outboundSchema` instead. */
  export const outboundSchema = AsyncUploadResponseResourceType$outboundSchema;
}

/** @internal */
export const AsyncUploadResponseType$inboundSchema: z.ZodNativeEnum<
  typeof AsyncUploadResponseType
> = z.nativeEnum(AsyncUploadResponseType);

/** @internal */
export const AsyncUploadResponseType$outboundSchema: z.ZodNativeEnum<
  typeof AsyncUploadResponseType
> = AsyncUploadResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AsyncUploadResponseType$ {
  /** @deprecated use `AsyncUploadResponseType$inboundSchema` instead. */
  export const inboundSchema = AsyncUploadResponseType$inboundSchema;
  /** @deprecated use `AsyncUploadResponseType$outboundSchema` instead. */
  export const outboundSchema = AsyncUploadResponseType$outboundSchema;
}

/** @internal */
export const AsyncUploadResponse$inboundSchema: z.ZodType<
  AsyncUploadResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: AsyncUploadResponseStatus$inboundSchema,
  resource_type: AsyncUploadResponseResourceType$inboundSchema.optional(),
  type: AsyncUploadResponseType$inboundSchema.default("upload"),
  public_id: z.string().optional(),
  batch_id: z.string(),
  requester_ip: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "resource_type": "resourceType",
    "public_id": "publicId",
    "batch_id": "batchId",
    "requester_ip": "requesterIp",
  });
});

/** @internal */
export type AsyncUploadResponse$Outbound = {
  status: string;
  resource_type?: string | undefined;
  type: string;
  public_id?: string | undefined;
  batch_id: string;
  requester_ip?: string | undefined;
};

/** @internal */
export const AsyncUploadResponse$outboundSchema: z.ZodType<
  AsyncUploadResponse$Outbound,
  z.ZodTypeDef,
  AsyncUploadResponse
> = z.object({
  status: AsyncUploadResponseStatus$outboundSchema,
  resourceType: AsyncUploadResponseResourceType$outboundSchema.optional(),
  type: AsyncUploadResponseType$outboundSchema.default("upload"),
  publicId: z.string().optional(),
  batchId: z.string(),
  requesterIp: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    resourceType: "resource_type",
    publicId: "public_id",
    batchId: "batch_id",
    requesterIp: "requester_ip",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AsyncUploadResponse$ {
  /** @deprecated use `AsyncUploadResponse$inboundSchema` instead. */
  export const inboundSchema = AsyncUploadResponse$inboundSchema;
  /** @deprecated use `AsyncUploadResponse$outboundSchema` instead. */
  export const outboundSchema = AsyncUploadResponse$outboundSchema;
  /** @deprecated use `AsyncUploadResponse$Outbound` instead. */
  export type Outbound = AsyncUploadResponse$Outbound;
}

export function asyncUploadResponseToJSON(
  asyncUploadResponse: AsyncUploadResponse,
): string {
  return JSON.stringify(
    AsyncUploadResponse$outboundSchema.parse(asyncUploadResponse),
  );
}

export function asyncUploadResponseFromJSON(
  jsonString: string,
): SafeParseResult<AsyncUploadResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AsyncUploadResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AsyncUploadResponse' from JSON`,
  );
}
