/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The code indicating the result of the operation.
 */
export const Code = {
  RejectedIds: "rejected_ids",
  InvalidIds: "invalid_ids",
  InternalErrorIds: "internal_error_ids",
  NonExistingIds: "non_existing_ids",
  InvalidRelateToSelfId: "invalid_relate_to_self_id",
  AlreadyExistsIds: "already_exists_ids",
  RelationDoesNotExistIds: "relation_does_not_exist_ids",
  SuccessIds: "success_ids",
} as const;
/**
 * The code indicating the result of the operation.
 */
export type Code = ClosedEnum<typeof Code>;

export type AssetRelationInfo = {
  /**
   * The message indicating the result of the operation.
   */
  message?: string | undefined;
  /**
   * The code indicating the result of the operation.
   */
  code?: Code | undefined;
  /**
   * The identifier of the asset, either asset ID or public ID path.
   */
  asset?: string | undefined;
  /**
   * The HTTP status code indicating the result of the operation.
   */
  status?: number | undefined;
};

/** @internal */
export const Code$inboundSchema: z.ZodNativeEnum<typeof Code> = z.nativeEnum(
  Code,
);

/** @internal */
export const Code$outboundSchema: z.ZodNativeEnum<typeof Code> =
  Code$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Code$ {
  /** @deprecated use `Code$inboundSchema` instead. */
  export const inboundSchema = Code$inboundSchema;
  /** @deprecated use `Code$outboundSchema` instead. */
  export const outboundSchema = Code$outboundSchema;
}

/** @internal */
export const AssetRelationInfo$inboundSchema: z.ZodType<
  AssetRelationInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string().optional(),
  code: Code$inboundSchema.optional(),
  asset: z.string().optional(),
  status: z.number().int().optional(),
});

/** @internal */
export type AssetRelationInfo$Outbound = {
  message?: string | undefined;
  code?: string | undefined;
  asset?: string | undefined;
  status?: number | undefined;
};

/** @internal */
export const AssetRelationInfo$outboundSchema: z.ZodType<
  AssetRelationInfo$Outbound,
  z.ZodTypeDef,
  AssetRelationInfo
> = z.object({
  message: z.string().optional(),
  code: Code$outboundSchema.optional(),
  asset: z.string().optional(),
  status: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssetRelationInfo$ {
  /** @deprecated use `AssetRelationInfo$inboundSchema` instead. */
  export const inboundSchema = AssetRelationInfo$inboundSchema;
  /** @deprecated use `AssetRelationInfo$outboundSchema` instead. */
  export const outboundSchema = AssetRelationInfo$outboundSchema;
  /** @deprecated use `AssetRelationInfo$Outbound` instead. */
  export type Outbound = AssetRelationInfo$Outbound;
}

export function assetRelationInfoToJSON(
  assetRelationInfo: AssetRelationInfo,
): string {
  return JSON.stringify(
    AssetRelationInfo$outboundSchema.parse(assetRelationInfo),
  );
}

export function assetRelationInfoFromJSON(
  jsonString: string,
): SafeParseResult<AssetRelationInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AssetRelationInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AssetRelationInfo' from JSON`,
  );
}
