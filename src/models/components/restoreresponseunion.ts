/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Info,
  Info$inboundSchema,
  Info$Outbound,
  Info$outboundSchema,
} from "./info.js";

/**
 * The error message if restore failed for a specific asset.
 */
export const ErrorEnum = {
  NoBackup: "no_backup",
  Failed: "failed",
  Unauthorized: "unauthorized",
} as const;
/**
 * The error message if restore failed for a specific asset.
 */
export type ErrorEnum = ClosedEnum<typeof ErrorEnum>;

export type RestoreResponse = {
  /**
   * The error message if restore failed for a specific asset.
   */
  error?: ErrorEnum | undefined;
};

export type RestoreResponseUnion = Info | RestoreResponse;

/** @internal */
export const ErrorEnum$inboundSchema: z.ZodNativeEnum<typeof ErrorEnum> = z
  .nativeEnum(ErrorEnum);

/** @internal */
export const ErrorEnum$outboundSchema: z.ZodNativeEnum<typeof ErrorEnum> =
  ErrorEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorEnum$ {
  /** @deprecated use `ErrorEnum$inboundSchema` instead. */
  export const inboundSchema = ErrorEnum$inboundSchema;
  /** @deprecated use `ErrorEnum$outboundSchema` instead. */
  export const outboundSchema = ErrorEnum$outboundSchema;
}

/** @internal */
export const RestoreResponse$inboundSchema: z.ZodType<
  RestoreResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: ErrorEnum$inboundSchema.optional(),
});

/** @internal */
export type RestoreResponse$Outbound = {
  error?: string | undefined;
};

/** @internal */
export const RestoreResponse$outboundSchema: z.ZodType<
  RestoreResponse$Outbound,
  z.ZodTypeDef,
  RestoreResponse
> = z.object({
  error: ErrorEnum$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RestoreResponse$ {
  /** @deprecated use `RestoreResponse$inboundSchema` instead. */
  export const inboundSchema = RestoreResponse$inboundSchema;
  /** @deprecated use `RestoreResponse$outboundSchema` instead. */
  export const outboundSchema = RestoreResponse$outboundSchema;
  /** @deprecated use `RestoreResponse$Outbound` instead. */
  export type Outbound = RestoreResponse$Outbound;
}

export function restoreResponseToJSON(
  restoreResponse: RestoreResponse,
): string {
  return JSON.stringify(RestoreResponse$outboundSchema.parse(restoreResponse));
}

export function restoreResponseFromJSON(
  jsonString: string,
): SafeParseResult<RestoreResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RestoreResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RestoreResponse' from JSON`,
  );
}

/** @internal */
export const RestoreResponseUnion$inboundSchema: z.ZodType<
  RestoreResponseUnion,
  z.ZodTypeDef,
  unknown
> = z.union([Info$inboundSchema, z.lazy(() => RestoreResponse$inboundSchema)]);

/** @internal */
export type RestoreResponseUnion$Outbound =
  | Info$Outbound
  | RestoreResponse$Outbound;

/** @internal */
export const RestoreResponseUnion$outboundSchema: z.ZodType<
  RestoreResponseUnion$Outbound,
  z.ZodTypeDef,
  RestoreResponseUnion
> = z.union([
  Info$outboundSchema,
  z.lazy(() => RestoreResponse$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RestoreResponseUnion$ {
  /** @deprecated use `RestoreResponseUnion$inboundSchema` instead. */
  export const inboundSchema = RestoreResponseUnion$inboundSchema;
  /** @deprecated use `RestoreResponseUnion$outboundSchema` instead. */
  export const outboundSchema = RestoreResponseUnion$outboundSchema;
  /** @deprecated use `RestoreResponseUnion$Outbound` instead. */
  export type Outbound = RestoreResponseUnion$Outbound;
}

export function restoreResponseUnionToJSON(
  restoreResponseUnion: RestoreResponseUnion,
): string {
  return JSON.stringify(
    RestoreResponseUnion$outboundSchema.parse(restoreResponseUnion),
  );
}

export function restoreResponseUnionFromJSON(
  jsonString: string,
): SafeParseResult<RestoreResponseUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RestoreResponseUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RestoreResponseUnion' from JSON`,
  );
}
