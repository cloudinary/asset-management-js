/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const SearchParametersType = {
  Bytes: "bytes",
  ImagePixels: "image_pixels",
  VideoPixels: "video_pixels",
  Duration: "duration",
} as const;
export type SearchParametersType = ClosedEnum<typeof SearchParametersType>;

export type SearchParametersRange = {
  /**
   * Start of the range (inclusive)
   */
  from?: number | undefined;
  /**
   * End of the range (exclusive)
   */
  to?: number | undefined;
};

export type Aggregate = {
  type: SearchParametersType;
  ranges: Array<SearchParametersRange>;
};

export const AggregateEnum = {
  Format: "format",
  ResourceType: "resource_type",
  Type: "type",
} as const;
export type AggregateEnum = ClosedEnum<typeof AggregateEnum>;

export type AggregateUnion = Array<AggregateEnum> | Array<Aggregate>;

export const WithField = {
  Context: "context",
  Tags: "tags",
  ImageMetadata: "image_metadata",
  ImageAnalysis: "image_analysis",
  Metadata: "metadata",
  QualityAnalysis: "quality_analysis",
  AccessibilityAnalysis: "accessibility_analysis",
} as const;
export type WithField = ClosedEnum<typeof WithField>;

/**
 * Common parameters for resource search operations.
 */
export type SearchParameters = {
  /**
   * The search expression. Supports exact match, wildcard match, presence, greater/less than, and range. For details on building expressions, see the Search API documentation.
   */
  expression?: string | undefined;
  /**
   * The fields to sort results by. You can specify multiple fields with optional directions (asc/desc). Default direction is desc.
   */
  sortBy?: Array<string> | undefined;
  /**
   * The maximum number of results to return. Default - 50. Maximum - 500.
   */
  maxResults?: number | undefined;
  /**
   * The cursor value to get the next page of results. Available when a previous search returned more results than max_results.
   */
  nextCursor?: string | undefined;
  aggregate?: Array<AggregateEnum> | Array<Aggregate> | undefined;
  /**
   * The additional fields to include in the response. Note that the fields parameter takes precedence over this parameter.
   */
  withField?: Array<WithField> | undefined;
  /**
   * A comma-separated list of fields to include in the response.
   *
   * @remarks
   * Notes:
   * - This parameter takes precedence over the with_field parameter, so if you want any additional asset attributes returned, make sure to also include them in this list (e.g., tags or context).
   * - The following fields are always included in the response: public_id, asset_id, asset_folder, created_at, status, type, and resource_type.
   */
  fields?: string | undefined;
};

/** @internal */
export const SearchParametersType$inboundSchema: z.ZodNativeEnum<
  typeof SearchParametersType
> = z.nativeEnum(SearchParametersType);

/** @internal */
export const SearchParametersType$outboundSchema: z.ZodNativeEnum<
  typeof SearchParametersType
> = SearchParametersType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchParametersType$ {
  /** @deprecated use `SearchParametersType$inboundSchema` instead. */
  export const inboundSchema = SearchParametersType$inboundSchema;
  /** @deprecated use `SearchParametersType$outboundSchema` instead. */
  export const outboundSchema = SearchParametersType$outboundSchema;
}

/** @internal */
export const SearchParametersRange$inboundSchema: z.ZodType<
  SearchParametersRange,
  z.ZodTypeDef,
  unknown
> = z.object({
  from: z.number().optional(),
  to: z.number().optional(),
});

/** @internal */
export type SearchParametersRange$Outbound = {
  from?: number | undefined;
  to?: number | undefined;
};

/** @internal */
export const SearchParametersRange$outboundSchema: z.ZodType<
  SearchParametersRange$Outbound,
  z.ZodTypeDef,
  SearchParametersRange
> = z.object({
  from: z.number().optional(),
  to: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchParametersRange$ {
  /** @deprecated use `SearchParametersRange$inboundSchema` instead. */
  export const inboundSchema = SearchParametersRange$inboundSchema;
  /** @deprecated use `SearchParametersRange$outboundSchema` instead. */
  export const outboundSchema = SearchParametersRange$outboundSchema;
  /** @deprecated use `SearchParametersRange$Outbound` instead. */
  export type Outbound = SearchParametersRange$Outbound;
}

export function searchParametersRangeToJSON(
  searchParametersRange: SearchParametersRange,
): string {
  return JSON.stringify(
    SearchParametersRange$outboundSchema.parse(searchParametersRange),
  );
}

export function searchParametersRangeFromJSON(
  jsonString: string,
): SafeParseResult<SearchParametersRange, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchParametersRange$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchParametersRange' from JSON`,
  );
}

/** @internal */
export const Aggregate$inboundSchema: z.ZodType<
  Aggregate,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: SearchParametersType$inboundSchema,
  ranges: z.array(z.lazy(() => SearchParametersRange$inboundSchema)),
});

/** @internal */
export type Aggregate$Outbound = {
  type: string;
  ranges: Array<SearchParametersRange$Outbound>;
};

/** @internal */
export const Aggregate$outboundSchema: z.ZodType<
  Aggregate$Outbound,
  z.ZodTypeDef,
  Aggregate
> = z.object({
  type: SearchParametersType$outboundSchema,
  ranges: z.array(z.lazy(() => SearchParametersRange$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Aggregate$ {
  /** @deprecated use `Aggregate$inboundSchema` instead. */
  export const inboundSchema = Aggregate$inboundSchema;
  /** @deprecated use `Aggregate$outboundSchema` instead. */
  export const outboundSchema = Aggregate$outboundSchema;
  /** @deprecated use `Aggregate$Outbound` instead. */
  export type Outbound = Aggregate$Outbound;
}

export function aggregateToJSON(aggregate: Aggregate): string {
  return JSON.stringify(Aggregate$outboundSchema.parse(aggregate));
}

export function aggregateFromJSON(
  jsonString: string,
): SafeParseResult<Aggregate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Aggregate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Aggregate' from JSON`,
  );
}

/** @internal */
export const AggregateEnum$inboundSchema: z.ZodNativeEnum<
  typeof AggregateEnum
> = z.nativeEnum(AggregateEnum);

/** @internal */
export const AggregateEnum$outboundSchema: z.ZodNativeEnum<
  typeof AggregateEnum
> = AggregateEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AggregateEnum$ {
  /** @deprecated use `AggregateEnum$inboundSchema` instead. */
  export const inboundSchema = AggregateEnum$inboundSchema;
  /** @deprecated use `AggregateEnum$outboundSchema` instead. */
  export const outboundSchema = AggregateEnum$outboundSchema;
}

/** @internal */
export const AggregateUnion$inboundSchema: z.ZodType<
  AggregateUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.array(AggregateEnum$inboundSchema),
  z.array(z.lazy(() => Aggregate$inboundSchema)),
]);

/** @internal */
export type AggregateUnion$Outbound = Array<string> | Array<Aggregate$Outbound>;

/** @internal */
export const AggregateUnion$outboundSchema: z.ZodType<
  AggregateUnion$Outbound,
  z.ZodTypeDef,
  AggregateUnion
> = z.union([
  z.array(AggregateEnum$outboundSchema),
  z.array(z.lazy(() => Aggregate$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AggregateUnion$ {
  /** @deprecated use `AggregateUnion$inboundSchema` instead. */
  export const inboundSchema = AggregateUnion$inboundSchema;
  /** @deprecated use `AggregateUnion$outboundSchema` instead. */
  export const outboundSchema = AggregateUnion$outboundSchema;
  /** @deprecated use `AggregateUnion$Outbound` instead. */
  export type Outbound = AggregateUnion$Outbound;
}

export function aggregateUnionToJSON(aggregateUnion: AggregateUnion): string {
  return JSON.stringify(AggregateUnion$outboundSchema.parse(aggregateUnion));
}

export function aggregateUnionFromJSON(
  jsonString: string,
): SafeParseResult<AggregateUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AggregateUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AggregateUnion' from JSON`,
  );
}

/** @internal */
export const WithField$inboundSchema: z.ZodNativeEnum<typeof WithField> = z
  .nativeEnum(WithField);

/** @internal */
export const WithField$outboundSchema: z.ZodNativeEnum<typeof WithField> =
  WithField$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WithField$ {
  /** @deprecated use `WithField$inboundSchema` instead. */
  export const inboundSchema = WithField$inboundSchema;
  /** @deprecated use `WithField$outboundSchema` instead. */
  export const outboundSchema = WithField$outboundSchema;
}

/** @internal */
export const SearchParameters$inboundSchema: z.ZodType<
  SearchParameters,
  z.ZodTypeDef,
  unknown
> = z.object({
  expression: z.string().optional(),
  sort_by: z.array(z.string()).optional(),
  max_results: z.number().int().optional(),
  next_cursor: z.string().optional(),
  aggregate: z.union([
    z.array(AggregateEnum$inboundSchema),
    z.array(z.lazy(() => Aggregate$inboundSchema)),
  ]).optional(),
  with_field: z.array(WithField$inboundSchema).optional(),
  fields: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "sort_by": "sortBy",
    "max_results": "maxResults",
    "next_cursor": "nextCursor",
    "with_field": "withField",
  });
});

/** @internal */
export type SearchParameters$Outbound = {
  expression?: string | undefined;
  sort_by?: Array<string> | undefined;
  max_results?: number | undefined;
  next_cursor?: string | undefined;
  aggregate?: Array<string> | Array<Aggregate$Outbound> | undefined;
  with_field?: Array<string> | undefined;
  fields?: string | undefined;
};

/** @internal */
export const SearchParameters$outboundSchema: z.ZodType<
  SearchParameters$Outbound,
  z.ZodTypeDef,
  SearchParameters
> = z.object({
  expression: z.string().optional(),
  sortBy: z.array(z.string()).optional(),
  maxResults: z.number().int().optional(),
  nextCursor: z.string().optional(),
  aggregate: z.union([
    z.array(AggregateEnum$outboundSchema),
    z.array(z.lazy(() => Aggregate$outboundSchema)),
  ]).optional(),
  withField: z.array(WithField$outboundSchema).optional(),
  fields: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    sortBy: "sort_by",
    maxResults: "max_results",
    nextCursor: "next_cursor",
    withField: "with_field",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchParameters$ {
  /** @deprecated use `SearchParameters$inboundSchema` instead. */
  export const inboundSchema = SearchParameters$inboundSchema;
  /** @deprecated use `SearchParameters$outboundSchema` instead. */
  export const outboundSchema = SearchParameters$outboundSchema;
  /** @deprecated use `SearchParameters$Outbound` instead. */
  export type Outbound = SearchParameters$Outbound;
}

export function searchParametersToJSON(
  searchParameters: SearchParameters,
): string {
  return JSON.stringify(
    SearchParameters$outboundSchema.parse(searchParameters),
  );
}

export function searchParametersFromJSON(
  jsonString: string,
): SafeParseResult<SearchParameters, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchParameters$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchParameters' from JSON`,
  );
}
