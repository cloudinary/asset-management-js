/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The image metadata of the uploaded file.
 */
export type UploadResponseImageMetadata = {};

export type Eager = {
  transformation?: string | undefined;
  width?: number | undefined;
  height?: number | undefined;
  bytes?: number | undefined;
  format?: string | undefined;
  url?: string | undefined;
  secureUrl?: string | undefined;
};

export type UploadResponse = {
  /**
   * The URL of the uploaded file.
   */
  url?: string | undefined;
  /**
   * The secure URL of the uploaded file.
   */
  secureUrl?: string | undefined;
  /**
   * The public ID of the uploaded file.
   */
  publicId?: string | undefined;
  /**
   * The version of the uploaded file.
   */
  version?: number | undefined;
  /**
   * The version ID of the uploaded file.
   */
  versionId?: string | undefined;
  /**
   * The signature of the uploaded file.
   */
  signature?: string | undefined;
  /**
   * The width of the uploaded file.
   */
  width?: number | undefined;
  /**
   * The height of the uploaded file.
   */
  height?: number | undefined;
  /**
   * The asset ID of the uploaded file. This is the ID of the uploaded file in the Cloudinary database.
   */
  assetId?: string | undefined;
  /**
   * The format of the uploaded file.
   */
  format?: string | undefined;
  /**
   * The type of resource that was uploaded.
   */
  resourceType?: string | undefined;
  /**
   * The date and time the file was uploaded.
   */
  createdAt?: string | undefined;
  /**
   * The tags of the uploaded file.
   */
  tags?: Array<string> | undefined;
  /**
   * The number of pages in the uploaded file.
   */
  pages?: number | undefined;
  /**
   * The size of the uploaded file in bytes.
   */
  bytes?: number | undefined;
  /**
   * The type of the uploaded file.
   */
  type?: string | undefined;
  /**
   * The ETag of the uploaded file.
   */
  etag?: string | undefined;
  /**
   * Whether the uploaded file is a placeholder.
   */
  placeholder?: boolean | undefined;
  /**
   * The original filename of the uploaded file.
   */
  originalFilename?: string | undefined;
  /**
   * The image metadata of the uploaded file.
   */
  imageMetadata?: UploadResponseImageMetadata | undefined;
  /**
   * The illustration score of the uploaded file.
   */
  illustrationScore?: number | undefined;
  /**
   * Whether the uploaded file is semi-transparent.
   */
  semiTransparent?: boolean | undefined;
  /**
   * Whether the uploaded file is grayscale.
   */
  grayscale?: boolean | undefined;
  eager?: Array<Eager> | undefined;
  /**
   * The API key used to upload the file.
   */
  apiKey?: string | undefined;
};

/** @internal */
export const UploadResponseImageMetadata$inboundSchema: z.ZodType<
  UploadResponseImageMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type UploadResponseImageMetadata$Outbound = {};

/** @internal */
export const UploadResponseImageMetadata$outboundSchema: z.ZodType<
  UploadResponseImageMetadata$Outbound,
  z.ZodTypeDef,
  UploadResponseImageMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadResponseImageMetadata$ {
  /** @deprecated use `UploadResponseImageMetadata$inboundSchema` instead. */
  export const inboundSchema = UploadResponseImageMetadata$inboundSchema;
  /** @deprecated use `UploadResponseImageMetadata$outboundSchema` instead. */
  export const outboundSchema = UploadResponseImageMetadata$outboundSchema;
  /** @deprecated use `UploadResponseImageMetadata$Outbound` instead. */
  export type Outbound = UploadResponseImageMetadata$Outbound;
}

export function uploadResponseImageMetadataToJSON(
  uploadResponseImageMetadata: UploadResponseImageMetadata,
): string {
  return JSON.stringify(
    UploadResponseImageMetadata$outboundSchema.parse(
      uploadResponseImageMetadata,
    ),
  );
}

export function uploadResponseImageMetadataFromJSON(
  jsonString: string,
): SafeParseResult<UploadResponseImageMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadResponseImageMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadResponseImageMetadata' from JSON`,
  );
}

/** @internal */
export const Eager$inboundSchema: z.ZodType<Eager, z.ZodTypeDef, unknown> = z
  .object({
    transformation: z.string().optional(),
    width: z.number().int().optional(),
    height: z.number().int().optional(),
    bytes: z.number().int().optional(),
    format: z.string().optional(),
    url: z.string().optional(),
    secure_url: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "secure_url": "secureUrl",
    });
  });

/** @internal */
export type Eager$Outbound = {
  transformation?: string | undefined;
  width?: number | undefined;
  height?: number | undefined;
  bytes?: number | undefined;
  format?: string | undefined;
  url?: string | undefined;
  secure_url?: string | undefined;
};

/** @internal */
export const Eager$outboundSchema: z.ZodType<
  Eager$Outbound,
  z.ZodTypeDef,
  Eager
> = z.object({
  transformation: z.string().optional(),
  width: z.number().int().optional(),
  height: z.number().int().optional(),
  bytes: z.number().int().optional(),
  format: z.string().optional(),
  url: z.string().optional(),
  secureUrl: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    secureUrl: "secure_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Eager$ {
  /** @deprecated use `Eager$inboundSchema` instead. */
  export const inboundSchema = Eager$inboundSchema;
  /** @deprecated use `Eager$outboundSchema` instead. */
  export const outboundSchema = Eager$outboundSchema;
  /** @deprecated use `Eager$Outbound` instead. */
  export type Outbound = Eager$Outbound;
}

export function eagerToJSON(eager: Eager): string {
  return JSON.stringify(Eager$outboundSchema.parse(eager));
}

export function eagerFromJSON(
  jsonString: string,
): SafeParseResult<Eager, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Eager$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Eager' from JSON`,
  );
}

/** @internal */
export const UploadResponse$inboundSchema: z.ZodType<
  UploadResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string().optional(),
  secure_url: z.string().optional(),
  public_id: z.string().optional(),
  version: z.number().int().optional(),
  version_id: z.string().optional(),
  signature: z.string().optional(),
  width: z.number().int().optional(),
  height: z.number().int().optional(),
  asset_id: z.string().optional(),
  format: z.string().optional(),
  resource_type: z.string().optional(),
  created_at: z.string().optional(),
  tags: z.array(z.string()).optional(),
  pages: z.number().int().optional(),
  bytes: z.number().int().optional(),
  type: z.string().optional(),
  etag: z.string().optional(),
  placeholder: z.boolean().optional(),
  original_filename: z.string().optional(),
  image_metadata: z.lazy(() => UploadResponseImageMetadata$inboundSchema)
    .optional(),
  illustration_score: z.number().optional(),
  semi_transparent: z.boolean().optional(),
  grayscale: z.boolean().optional(),
  eager: z.array(z.lazy(() => Eager$inboundSchema)).optional(),
  api_key: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "secure_url": "secureUrl",
    "public_id": "publicId",
    "version_id": "versionId",
    "asset_id": "assetId",
    "resource_type": "resourceType",
    "created_at": "createdAt",
    "original_filename": "originalFilename",
    "image_metadata": "imageMetadata",
    "illustration_score": "illustrationScore",
    "semi_transparent": "semiTransparent",
    "api_key": "apiKey",
  });
});

/** @internal */
export type UploadResponse$Outbound = {
  url?: string | undefined;
  secure_url?: string | undefined;
  public_id?: string | undefined;
  version?: number | undefined;
  version_id?: string | undefined;
  signature?: string | undefined;
  width?: number | undefined;
  height?: number | undefined;
  asset_id?: string | undefined;
  format?: string | undefined;
  resource_type?: string | undefined;
  created_at?: string | undefined;
  tags?: Array<string> | undefined;
  pages?: number | undefined;
  bytes?: number | undefined;
  type?: string | undefined;
  etag?: string | undefined;
  placeholder?: boolean | undefined;
  original_filename?: string | undefined;
  image_metadata?: UploadResponseImageMetadata$Outbound | undefined;
  illustration_score?: number | undefined;
  semi_transparent?: boolean | undefined;
  grayscale?: boolean | undefined;
  eager?: Array<Eager$Outbound> | undefined;
  api_key?: string | undefined;
};

/** @internal */
export const UploadResponse$outboundSchema: z.ZodType<
  UploadResponse$Outbound,
  z.ZodTypeDef,
  UploadResponse
> = z.object({
  url: z.string().optional(),
  secureUrl: z.string().optional(),
  publicId: z.string().optional(),
  version: z.number().int().optional(),
  versionId: z.string().optional(),
  signature: z.string().optional(),
  width: z.number().int().optional(),
  height: z.number().int().optional(),
  assetId: z.string().optional(),
  format: z.string().optional(),
  resourceType: z.string().optional(),
  createdAt: z.string().optional(),
  tags: z.array(z.string()).optional(),
  pages: z.number().int().optional(),
  bytes: z.number().int().optional(),
  type: z.string().optional(),
  etag: z.string().optional(),
  placeholder: z.boolean().optional(),
  originalFilename: z.string().optional(),
  imageMetadata: z.lazy(() => UploadResponseImageMetadata$outboundSchema)
    .optional(),
  illustrationScore: z.number().optional(),
  semiTransparent: z.boolean().optional(),
  grayscale: z.boolean().optional(),
  eager: z.array(z.lazy(() => Eager$outboundSchema)).optional(),
  apiKey: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    secureUrl: "secure_url",
    publicId: "public_id",
    versionId: "version_id",
    assetId: "asset_id",
    resourceType: "resource_type",
    createdAt: "created_at",
    originalFilename: "original_filename",
    imageMetadata: "image_metadata",
    illustrationScore: "illustration_score",
    semiTransparent: "semi_transparent",
    apiKey: "api_key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadResponse$ {
  /** @deprecated use `UploadResponse$inboundSchema` instead. */
  export const inboundSchema = UploadResponse$inboundSchema;
  /** @deprecated use `UploadResponse$outboundSchema` instead. */
  export const outboundSchema = UploadResponse$outboundSchema;
  /** @deprecated use `UploadResponse$Outbound` instead. */
  export type Outbound = UploadResponse$Outbound;
}

export function uploadResponseToJSON(uploadResponse: UploadResponse): string {
  return JSON.stringify(UploadResponse$outboundSchema.parse(uploadResponse));
}

export function uploadResponseFromJSON(
  jsonString: string,
): SafeParseResult<UploadResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadResponse' from JSON`,
  );
}
