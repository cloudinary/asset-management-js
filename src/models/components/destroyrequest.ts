/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DestroyRequest = {
  /**
   * The ID of the asset to delete.
   */
  assetId: string;
  /**
   * The current Unix timestamp.
   */
  timestamp: number;
  /**
   * The API key for authentication.
   */
  apiKey: string;
  /**
   * The signed request signature.
   */
  signature: string;
  /**
   * Whether to invalidate CDN cache. Default is false.
   */
  invalidate?: boolean | undefined;
  /**
   * URL to receive completion notification.
   */
  notificationUrl?: string | undefined;
  /**
   * URL for redirect after operation completion.
   */
  callback?: string | undefined;
};

/** @internal */
export const DestroyRequest$inboundSchema: z.ZodType<
  DestroyRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  asset_id: z.string(),
  timestamp: z.number().int(),
  api_key: z.string(),
  signature: z.string(),
  invalidate: z.boolean().optional(),
  notification_url: z.string().optional(),
  callback: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "asset_id": "assetId",
    "api_key": "apiKey",
    "notification_url": "notificationUrl",
  });
});

/** @internal */
export type DestroyRequest$Outbound = {
  asset_id: string;
  timestamp: number;
  api_key: string;
  signature: string;
  invalidate?: boolean | undefined;
  notification_url?: string | undefined;
  callback?: string | undefined;
};

/** @internal */
export const DestroyRequest$outboundSchema: z.ZodType<
  DestroyRequest$Outbound,
  z.ZodTypeDef,
  DestroyRequest
> = z.object({
  assetId: z.string(),
  timestamp: z.number().int(),
  apiKey: z.string(),
  signature: z.string(),
  invalidate: z.boolean().optional(),
  notificationUrl: z.string().optional(),
  callback: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    assetId: "asset_id",
    apiKey: "api_key",
    notificationUrl: "notification_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DestroyRequest$ {
  /** @deprecated use `DestroyRequest$inboundSchema` instead. */
  export const inboundSchema = DestroyRequest$inboundSchema;
  /** @deprecated use `DestroyRequest$outboundSchema` instead. */
  export const outboundSchema = DestroyRequest$outboundSchema;
  /** @deprecated use `DestroyRequest$Outbound` instead. */
  export type Outbound = DestroyRequest$Outbound;
}

export function destroyRequestToJSON(destroyRequest: DestroyRequest): string {
  return JSON.stringify(DestroyRequest$outboundSchema.parse(destroyRequest));
}

export function destroyRequestFromJSON(
  jsonString: string,
): SafeParseResult<DestroyRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DestroyRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DestroyRequest' from JSON`,
  );
}
