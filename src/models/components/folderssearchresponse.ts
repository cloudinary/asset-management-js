/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Folder,
  Folder$inboundSchema,
  Folder$Outbound,
  Folder$outboundSchema,
} from "./folder.js";

export type FoldersSearchResponse = {
  /**
   * The total number of folders matching the search.
   */
  totalCount: number;
  /**
   * The time taken to execute the search (ms).
   */
  time: number;
  /**
   * A cursor for pagination.
   */
  nextCursor?: string | null | undefined;
  /**
   * The folders matching the search.
   */
  folders: Array<Folder>;
};

/** @internal */
export const FoldersSearchResponse$inboundSchema: z.ZodType<
  FoldersSearchResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  total_count: z.number().int(),
  time: z.number().int(),
  next_cursor: z.nullable(z.string()).optional(),
  folders: z.array(Folder$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "total_count": "totalCount",
    "next_cursor": "nextCursor",
  });
});

/** @internal */
export type FoldersSearchResponse$Outbound = {
  total_count: number;
  time: number;
  next_cursor?: string | null | undefined;
  folders: Array<Folder$Outbound>;
};

/** @internal */
export const FoldersSearchResponse$outboundSchema: z.ZodType<
  FoldersSearchResponse$Outbound,
  z.ZodTypeDef,
  FoldersSearchResponse
> = z.object({
  totalCount: z.number().int(),
  time: z.number().int(),
  nextCursor: z.nullable(z.string()).optional(),
  folders: z.array(Folder$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    totalCount: "total_count",
    nextCursor: "next_cursor",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FoldersSearchResponse$ {
  /** @deprecated use `FoldersSearchResponse$inboundSchema` instead. */
  export const inboundSchema = FoldersSearchResponse$inboundSchema;
  /** @deprecated use `FoldersSearchResponse$outboundSchema` instead. */
  export const outboundSchema = FoldersSearchResponse$outboundSchema;
  /** @deprecated use `FoldersSearchResponse$Outbound` instead. */
  export type Outbound = FoldersSearchResponse$Outbound;
}

export function foldersSearchResponseToJSON(
  foldersSearchResponse: FoldersSearchResponse,
): string {
  return JSON.stringify(
    FoldersSearchResponse$outboundSchema.parse(foldersSearchResponse),
  );
}

export function foldersSearchResponseFromJSON(
  jsonString: string,
): SafeParseResult<FoldersSearchResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FoldersSearchResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FoldersSearchResponse' from JSON`,
  );
}
