/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The result of the deletion operation.
 */
export const Result = {
  Ok: "ok",
  NotFound: "not found",
} as const;
/**
 * The result of the deletion operation.
 */
export type Result = ClosedEnum<typeof Result>;

export type DestroyResponse = {
  /**
   * The result of the deletion operation.
   */
  result: Result;
  /**
   * The asset folder path. Only included when folder decoupling is enabled.
   */
  assetFolder?: string | undefined;
};

/** @internal */
export const Result$inboundSchema: z.ZodNativeEnum<typeof Result> = z
  .nativeEnum(Result);

/** @internal */
export const Result$outboundSchema: z.ZodNativeEnum<typeof Result> =
  Result$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Result$ {
  /** @deprecated use `Result$inboundSchema` instead. */
  export const inboundSchema = Result$inboundSchema;
  /** @deprecated use `Result$outboundSchema` instead. */
  export const outboundSchema = Result$outboundSchema;
}

/** @internal */
export const DestroyResponse$inboundSchema: z.ZodType<
  DestroyResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  result: Result$inboundSchema,
  asset_folder: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "asset_folder": "assetFolder",
  });
});

/** @internal */
export type DestroyResponse$Outbound = {
  result: string;
  asset_folder?: string | undefined;
};

/** @internal */
export const DestroyResponse$outboundSchema: z.ZodType<
  DestroyResponse$Outbound,
  z.ZodTypeDef,
  DestroyResponse
> = z.object({
  result: Result$outboundSchema,
  assetFolder: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    assetFolder: "asset_folder",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DestroyResponse$ {
  /** @deprecated use `DestroyResponse$inboundSchema` instead. */
  export const inboundSchema = DestroyResponse$inboundSchema;
  /** @deprecated use `DestroyResponse$outboundSchema` instead. */
  export const outboundSchema = DestroyResponse$outboundSchema;
  /** @deprecated use `DestroyResponse$Outbound` instead. */
  export type Outbound = DestroyResponse$Outbound;
}

export function destroyResponseToJSON(
  destroyResponse: DestroyResponse,
): string {
  return JSON.stringify(DestroyResponse$outboundSchema.parse(destroyResponse));
}

export function destroyResponseFromJSON(
  jsonString: string,
): SafeParseResult<DestroyResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DestroyResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DestroyResponse' from JSON`,
  );
}
