/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Transformations = {
  /**
   * Number of transformations used
   */
  usage?: number | undefined;
};

export type Objects = {
  /**
   * Number of objects used
   */
  usage?: number | undefined;
  /**
   * Object limit for the plan
   */
  limit?: number | undefined;
  /**
   * Percentage of object limit used
   */
  usedPercent?: number | undefined;
};

export type Bandwidth = {
  /**
   * Bandwidth used in bytes
   */
  usage?: number | undefined;
  /**
   * Bandwidth limit for the plan
   */
  limit?: number | undefined;
  /**
   * Percentage of bandwidth limit used
   */
  usedPercent?: number | undefined;
};

export type Storage = {
  /**
   * Storage used in bytes
   */
  usage?: number | undefined;
  /**
   * Storage limit for the plan
   */
  limit?: number | undefined;
  /**
   * Percentage of storage limit used
   */
  usedPercent?: number | undefined;
};

export type Impressions = {
  /**
   * Number of impressions used
   */
  usage?: number | undefined;
};

export type SecondsDelivered = {
  /**
   * Number of seconds delivered
   */
  usage?: number | undefined;
};

/**
 * Upload size and pixel limits
 */
export type MediaLimits = {
  /**
   * Maximum size for images in bytes
   */
  imageMaxSizeBytes?: number | undefined;
  /**
   * Maximum size for videos in bytes
   */
  videoMaxSizeBytes?: number | undefined;
  /**
   * Maximum size for raw files in bytes
   */
  rawMaxSizeBytes?: number | undefined;
  /**
   * Maximum pixels for images
   */
  imageMaxPx?: number | undefined;
  /**
   * Maximum total pixels for assets
   */
  assetMaxTotalPx?: number | undefined;
};

export type UsageResponse = {
  /**
   * The current plan name
   */
  plan?: string | undefined;
  /**
   * When the usage data was last updated
   */
  lastUpdated?: RFCDate | undefined;
  /**
   * The date for which usage was requested
   */
  dateRequested?: Date | undefined;
  transformations?: Transformations | undefined;
  objects?: Objects | undefined;
  bandwidth?: Bandwidth | undefined;
  storage?: Storage | undefined;
  impressions?: Impressions | undefined;
  secondsDelivered?: SecondsDelivered | undefined;
  /**
   * Number of resources stored
   */
  resources?: number | undefined;
  /**
   * Number of derived resources
   */
  derivedResources?: number | undefined;
  /**
   * Number of requests made
   */
  requests?: number | undefined;
  /**
   * Upload size and pixel limits
   */
  mediaLimits?: MediaLimits | undefined;
};

/** @internal */
export const Transformations$inboundSchema: z.ZodType<
  Transformations,
  z.ZodTypeDef,
  unknown
> = z.object({
  usage: z.number().int().optional(),
});

/** @internal */
export type Transformations$Outbound = {
  usage?: number | undefined;
};

/** @internal */
export const Transformations$outboundSchema: z.ZodType<
  Transformations$Outbound,
  z.ZodTypeDef,
  Transformations
> = z.object({
  usage: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Transformations$ {
  /** @deprecated use `Transformations$inboundSchema` instead. */
  export const inboundSchema = Transformations$inboundSchema;
  /** @deprecated use `Transformations$outboundSchema` instead. */
  export const outboundSchema = Transformations$outboundSchema;
  /** @deprecated use `Transformations$Outbound` instead. */
  export type Outbound = Transformations$Outbound;
}

export function transformationsToJSON(
  transformations: Transformations,
): string {
  return JSON.stringify(Transformations$outboundSchema.parse(transformations));
}

export function transformationsFromJSON(
  jsonString: string,
): SafeParseResult<Transformations, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Transformations$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Transformations' from JSON`,
  );
}

/** @internal */
export const Objects$inboundSchema: z.ZodType<Objects, z.ZodTypeDef, unknown> =
  z.object({
    usage: z.number().int().optional(),
    limit: z.number().int().optional(),
    used_percent: z.number().optional(),
  }).transform((v) => {
    return remap$(v, {
      "used_percent": "usedPercent",
    });
  });

/** @internal */
export type Objects$Outbound = {
  usage?: number | undefined;
  limit?: number | undefined;
  used_percent?: number | undefined;
};

/** @internal */
export const Objects$outboundSchema: z.ZodType<
  Objects$Outbound,
  z.ZodTypeDef,
  Objects
> = z.object({
  usage: z.number().int().optional(),
  limit: z.number().int().optional(),
  usedPercent: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    usedPercent: "used_percent",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Objects$ {
  /** @deprecated use `Objects$inboundSchema` instead. */
  export const inboundSchema = Objects$inboundSchema;
  /** @deprecated use `Objects$outboundSchema` instead. */
  export const outboundSchema = Objects$outboundSchema;
  /** @deprecated use `Objects$Outbound` instead. */
  export type Outbound = Objects$Outbound;
}

export function objectsToJSON(objects: Objects): string {
  return JSON.stringify(Objects$outboundSchema.parse(objects));
}

export function objectsFromJSON(
  jsonString: string,
): SafeParseResult<Objects, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Objects$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Objects' from JSON`,
  );
}

/** @internal */
export const Bandwidth$inboundSchema: z.ZodType<
  Bandwidth,
  z.ZodTypeDef,
  unknown
> = z.object({
  usage: z.number().int().optional(),
  limit: z.number().int().optional(),
  used_percent: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "used_percent": "usedPercent",
  });
});

/** @internal */
export type Bandwidth$Outbound = {
  usage?: number | undefined;
  limit?: number | undefined;
  used_percent?: number | undefined;
};

/** @internal */
export const Bandwidth$outboundSchema: z.ZodType<
  Bandwidth$Outbound,
  z.ZodTypeDef,
  Bandwidth
> = z.object({
  usage: z.number().int().optional(),
  limit: z.number().int().optional(),
  usedPercent: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    usedPercent: "used_percent",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Bandwidth$ {
  /** @deprecated use `Bandwidth$inboundSchema` instead. */
  export const inboundSchema = Bandwidth$inboundSchema;
  /** @deprecated use `Bandwidth$outboundSchema` instead. */
  export const outboundSchema = Bandwidth$outboundSchema;
  /** @deprecated use `Bandwidth$Outbound` instead. */
  export type Outbound = Bandwidth$Outbound;
}

export function bandwidthToJSON(bandwidth: Bandwidth): string {
  return JSON.stringify(Bandwidth$outboundSchema.parse(bandwidth));
}

export function bandwidthFromJSON(
  jsonString: string,
): SafeParseResult<Bandwidth, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Bandwidth$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Bandwidth' from JSON`,
  );
}

/** @internal */
export const Storage$inboundSchema: z.ZodType<Storage, z.ZodTypeDef, unknown> =
  z.object({
    usage: z.number().int().optional(),
    limit: z.number().int().optional(),
    used_percent: z.number().optional(),
  }).transform((v) => {
    return remap$(v, {
      "used_percent": "usedPercent",
    });
  });

/** @internal */
export type Storage$Outbound = {
  usage?: number | undefined;
  limit?: number | undefined;
  used_percent?: number | undefined;
};

/** @internal */
export const Storage$outboundSchema: z.ZodType<
  Storage$Outbound,
  z.ZodTypeDef,
  Storage
> = z.object({
  usage: z.number().int().optional(),
  limit: z.number().int().optional(),
  usedPercent: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    usedPercent: "used_percent",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Storage$ {
  /** @deprecated use `Storage$inboundSchema` instead. */
  export const inboundSchema = Storage$inboundSchema;
  /** @deprecated use `Storage$outboundSchema` instead. */
  export const outboundSchema = Storage$outboundSchema;
  /** @deprecated use `Storage$Outbound` instead. */
  export type Outbound = Storage$Outbound;
}

export function storageToJSON(storage: Storage): string {
  return JSON.stringify(Storage$outboundSchema.parse(storage));
}

export function storageFromJSON(
  jsonString: string,
): SafeParseResult<Storage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Storage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Storage' from JSON`,
  );
}

/** @internal */
export const Impressions$inboundSchema: z.ZodType<
  Impressions,
  z.ZodTypeDef,
  unknown
> = z.object({
  usage: z.number().int().optional(),
});

/** @internal */
export type Impressions$Outbound = {
  usage?: number | undefined;
};

/** @internal */
export const Impressions$outboundSchema: z.ZodType<
  Impressions$Outbound,
  z.ZodTypeDef,
  Impressions
> = z.object({
  usage: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Impressions$ {
  /** @deprecated use `Impressions$inboundSchema` instead. */
  export const inboundSchema = Impressions$inboundSchema;
  /** @deprecated use `Impressions$outboundSchema` instead. */
  export const outboundSchema = Impressions$outboundSchema;
  /** @deprecated use `Impressions$Outbound` instead. */
  export type Outbound = Impressions$Outbound;
}

export function impressionsToJSON(impressions: Impressions): string {
  return JSON.stringify(Impressions$outboundSchema.parse(impressions));
}

export function impressionsFromJSON(
  jsonString: string,
): SafeParseResult<Impressions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Impressions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Impressions' from JSON`,
  );
}

/** @internal */
export const SecondsDelivered$inboundSchema: z.ZodType<
  SecondsDelivered,
  z.ZodTypeDef,
  unknown
> = z.object({
  usage: z.number().int().optional(),
});

/** @internal */
export type SecondsDelivered$Outbound = {
  usage?: number | undefined;
};

/** @internal */
export const SecondsDelivered$outboundSchema: z.ZodType<
  SecondsDelivered$Outbound,
  z.ZodTypeDef,
  SecondsDelivered
> = z.object({
  usage: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SecondsDelivered$ {
  /** @deprecated use `SecondsDelivered$inboundSchema` instead. */
  export const inboundSchema = SecondsDelivered$inboundSchema;
  /** @deprecated use `SecondsDelivered$outboundSchema` instead. */
  export const outboundSchema = SecondsDelivered$outboundSchema;
  /** @deprecated use `SecondsDelivered$Outbound` instead. */
  export type Outbound = SecondsDelivered$Outbound;
}

export function secondsDeliveredToJSON(
  secondsDelivered: SecondsDelivered,
): string {
  return JSON.stringify(
    SecondsDelivered$outboundSchema.parse(secondsDelivered),
  );
}

export function secondsDeliveredFromJSON(
  jsonString: string,
): SafeParseResult<SecondsDelivered, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SecondsDelivered$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SecondsDelivered' from JSON`,
  );
}

/** @internal */
export const MediaLimits$inboundSchema: z.ZodType<
  MediaLimits,
  z.ZodTypeDef,
  unknown
> = z.object({
  image_max_size_bytes: z.number().int().optional(),
  video_max_size_bytes: z.number().int().optional(),
  raw_max_size_bytes: z.number().int().optional(),
  image_max_px: z.number().int().optional(),
  asset_max_total_px: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "image_max_size_bytes": "imageMaxSizeBytes",
    "video_max_size_bytes": "videoMaxSizeBytes",
    "raw_max_size_bytes": "rawMaxSizeBytes",
    "image_max_px": "imageMaxPx",
    "asset_max_total_px": "assetMaxTotalPx",
  });
});

/** @internal */
export type MediaLimits$Outbound = {
  image_max_size_bytes?: number | undefined;
  video_max_size_bytes?: number | undefined;
  raw_max_size_bytes?: number | undefined;
  image_max_px?: number | undefined;
  asset_max_total_px?: number | undefined;
};

/** @internal */
export const MediaLimits$outboundSchema: z.ZodType<
  MediaLimits$Outbound,
  z.ZodTypeDef,
  MediaLimits
> = z.object({
  imageMaxSizeBytes: z.number().int().optional(),
  videoMaxSizeBytes: z.number().int().optional(),
  rawMaxSizeBytes: z.number().int().optional(),
  imageMaxPx: z.number().int().optional(),
  assetMaxTotalPx: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    imageMaxSizeBytes: "image_max_size_bytes",
    videoMaxSizeBytes: "video_max_size_bytes",
    rawMaxSizeBytes: "raw_max_size_bytes",
    imageMaxPx: "image_max_px",
    assetMaxTotalPx: "asset_max_total_px",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MediaLimits$ {
  /** @deprecated use `MediaLimits$inboundSchema` instead. */
  export const inboundSchema = MediaLimits$inboundSchema;
  /** @deprecated use `MediaLimits$outboundSchema` instead. */
  export const outboundSchema = MediaLimits$outboundSchema;
  /** @deprecated use `MediaLimits$Outbound` instead. */
  export type Outbound = MediaLimits$Outbound;
}

export function mediaLimitsToJSON(mediaLimits: MediaLimits): string {
  return JSON.stringify(MediaLimits$outboundSchema.parse(mediaLimits));
}

export function mediaLimitsFromJSON(
  jsonString: string,
): SafeParseResult<MediaLimits, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MediaLimits$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MediaLimits' from JSON`,
  );
}

/** @internal */
export const UsageResponse$inboundSchema: z.ZodType<
  UsageResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  plan: z.string().optional(),
  last_updated: z.string().transform(v => new RFCDate(v)).optional(),
  date_requested: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  transformations: z.lazy(() => Transformations$inboundSchema).optional(),
  objects: z.lazy(() => Objects$inboundSchema).optional(),
  bandwidth: z.lazy(() => Bandwidth$inboundSchema).optional(),
  storage: z.lazy(() => Storage$inboundSchema).optional(),
  impressions: z.lazy(() => Impressions$inboundSchema).optional(),
  seconds_delivered: z.lazy(() => SecondsDelivered$inboundSchema).optional(),
  resources: z.number().int().optional(),
  derived_resources: z.number().int().optional(),
  requests: z.number().int().optional(),
  media_limits: z.lazy(() => MediaLimits$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "last_updated": "lastUpdated",
    "date_requested": "dateRequested",
    "seconds_delivered": "secondsDelivered",
    "derived_resources": "derivedResources",
    "media_limits": "mediaLimits",
  });
});

/** @internal */
export type UsageResponse$Outbound = {
  plan?: string | undefined;
  last_updated?: string | undefined;
  date_requested?: string | undefined;
  transformations?: Transformations$Outbound | undefined;
  objects?: Objects$Outbound | undefined;
  bandwidth?: Bandwidth$Outbound | undefined;
  storage?: Storage$Outbound | undefined;
  impressions?: Impressions$Outbound | undefined;
  seconds_delivered?: SecondsDelivered$Outbound | undefined;
  resources?: number | undefined;
  derived_resources?: number | undefined;
  requests?: number | undefined;
  media_limits?: MediaLimits$Outbound | undefined;
};

/** @internal */
export const UsageResponse$outboundSchema: z.ZodType<
  UsageResponse$Outbound,
  z.ZodTypeDef,
  UsageResponse
> = z.object({
  plan: z.string().optional(),
  lastUpdated: z.instanceof(RFCDate).transform(v => v.toString()).optional(),
  dateRequested: z.date().transform(v => v.toISOString()).optional(),
  transformations: z.lazy(() => Transformations$outboundSchema).optional(),
  objects: z.lazy(() => Objects$outboundSchema).optional(),
  bandwidth: z.lazy(() => Bandwidth$outboundSchema).optional(),
  storage: z.lazy(() => Storage$outboundSchema).optional(),
  impressions: z.lazy(() => Impressions$outboundSchema).optional(),
  secondsDelivered: z.lazy(() => SecondsDelivered$outboundSchema).optional(),
  resources: z.number().int().optional(),
  derivedResources: z.number().int().optional(),
  requests: z.number().int().optional(),
  mediaLimits: z.lazy(() => MediaLimits$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    lastUpdated: "last_updated",
    dateRequested: "date_requested",
    secondsDelivered: "seconds_delivered",
    derivedResources: "derived_resources",
    mediaLimits: "media_limits",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsageResponse$ {
  /** @deprecated use `UsageResponse$inboundSchema` instead. */
  export const inboundSchema = UsageResponse$inboundSchema;
  /** @deprecated use `UsageResponse$outboundSchema` instead. */
  export const outboundSchema = UsageResponse$outboundSchema;
  /** @deprecated use `UsageResponse$Outbound` instead. */
  export type Outbound = UsageResponse$Outbound;
}

export function usageResponseToJSON(usageResponse: UsageResponse): string {
  return JSON.stringify(UsageResponse$outboundSchema.parse(usageResponse));
}

export function usageResponseFromJSON(
  jsonString: string,
): SafeParseResult<UsageResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsageResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsageResponse' from JSON`,
  );
}
