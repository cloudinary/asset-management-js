/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The type of access control to apply to the asset.
 */
export const AccessControlAnonymousAccessType = {
  Anonymous: "anonymous",
} as const;
/**
 * The type of access control to apply to the asset.
 */
export type AccessControlAnonymousAccessType = ClosedEnum<
  typeof AccessControlAnonymousAccessType
>;

/**
 * Anonymous access control that allows public access during a specified time range.
 */
export type AccessControlAnonymous = {
  /**
   * The type of access control to apply to the asset.
   */
  accessType: AccessControlAnonymousAccessType;
  /**
   * The start date and time (in ISO 8601 format) when anonymous access becomes available.
   */
  start?: Date | undefined;
  /**
   * The end date and time (in ISO 8601 format) when anonymous access expires.
   */
  end?: Date | undefined;
  /**
   * The specific path pattern for which this access control applies.
   */
  path?: string | undefined;
};

/** @internal */
export const AccessControlAnonymousAccessType$inboundSchema: z.ZodNativeEnum<
  typeof AccessControlAnonymousAccessType
> = z.nativeEnum(AccessControlAnonymousAccessType);

/** @internal */
export const AccessControlAnonymousAccessType$outboundSchema: z.ZodNativeEnum<
  typeof AccessControlAnonymousAccessType
> = AccessControlAnonymousAccessType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccessControlAnonymousAccessType$ {
  /** @deprecated use `AccessControlAnonymousAccessType$inboundSchema` instead. */
  export const inboundSchema = AccessControlAnonymousAccessType$inboundSchema;
  /** @deprecated use `AccessControlAnonymousAccessType$outboundSchema` instead. */
  export const outboundSchema = AccessControlAnonymousAccessType$outboundSchema;
}

/** @internal */
export const AccessControlAnonymous$inboundSchema: z.ZodType<
  AccessControlAnonymous,
  z.ZodTypeDef,
  unknown
> = z.object({
  access_type: AccessControlAnonymousAccessType$inboundSchema,
  start: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  end: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  path: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "access_type": "accessType",
  });
});

/** @internal */
export type AccessControlAnonymous$Outbound = {
  access_type: string;
  start?: string | undefined;
  end?: string | undefined;
  path?: string | undefined;
};

/** @internal */
export const AccessControlAnonymous$outboundSchema: z.ZodType<
  AccessControlAnonymous$Outbound,
  z.ZodTypeDef,
  AccessControlAnonymous
> = z.object({
  accessType: AccessControlAnonymousAccessType$outboundSchema,
  start: z.date().transform(v => v.toISOString()).optional(),
  end: z.date().transform(v => v.toISOString()).optional(),
  path: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    accessType: "access_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccessControlAnonymous$ {
  /** @deprecated use `AccessControlAnonymous$inboundSchema` instead. */
  export const inboundSchema = AccessControlAnonymous$inboundSchema;
  /** @deprecated use `AccessControlAnonymous$outboundSchema` instead. */
  export const outboundSchema = AccessControlAnonymous$outboundSchema;
  /** @deprecated use `AccessControlAnonymous$Outbound` instead. */
  export type Outbound = AccessControlAnonymous$Outbound;
}

export function accessControlAnonymousToJSON(
  accessControlAnonymous: AccessControlAnonymous,
): string {
  return JSON.stringify(
    AccessControlAnonymous$outboundSchema.parse(accessControlAnonymous),
  );
}

export function accessControlAnonymousFromJSON(
  jsonString: string,
): SafeParseResult<AccessControlAnonymous, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccessControlAnonymous$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccessControlAnonymous' from JSON`,
  );
}
