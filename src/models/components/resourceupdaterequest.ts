/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The moderation status of the resource.
 */
export const ModerationStatus = {
  Approved: "approved",
  Rejected: "rejected",
} as const;
/**
 * The moderation status of the resource.
 */
export type ModerationStatus = ClosedEnum<typeof ModerationStatus>;

/**
 * The type of OCR to perform on the resource.
 */
export const ResourceUpdateRequestOcr = {
  AdvOcr: "adv_ocr",
} as const;
/**
 * The type of OCR to perform on the resource.
 */
export type ResourceUpdateRequestOcr = ClosedEnum<
  typeof ResourceUpdateRequestOcr
>;

/**
 * The conversion to apply for raw files.
 */
export const RawConvert = {
  Aspose: "aspose",
  GoogleSpeech: "google_speech",
  ExtractText: "extract_text",
} as const;
/**
 * The conversion to apply for raw files.
 */
export type RawConvert = ClosedEnum<typeof RawConvert>;

/**
 * The type of categorization to perform on the resource.
 */
export const ResourceUpdateRequestCategorization = {
  GoogleTagging: "google_tagging",
  GoogleVideoTagging: "google_video_tagging",
  ImaggaTagging: "imagga_tagging",
  AwsRekTagging: "aws_rek_tagging",
} as const;
/**
 * The type of categorization to perform on the resource.
 */
export type ResourceUpdateRequestCategorization = ClosedEnum<
  typeof ResourceUpdateRequestCategorization
>;

/**
 * The background removal provider to use for the resource.
 */
export const ResourceUpdateRequestBackgroundRemoval = {
  CloudinaryAi: "cloudinary_ai",
  Pixelz: "pixelz",
} as const;
/**
 * The background removal provider to use for the resource.
 */
export type ResourceUpdateRequestBackgroundRemoval = ClosedEnum<
  typeof ResourceUpdateRequestBackgroundRemoval
>;

export type ResourceUpdateRequest = {
  /**
   * The display name of the resource.
   */
  displayName?: string | undefined;
  /**
   * Whether to ensure the display name is unique across all resources. If false, the operation will fail if a resource with the same display name exists. Default: false
   */
  uniqueDisplayName?: boolean | undefined;
  /**
   * The folder where the asset should be placed.
   */
  assetFolder?: string | undefined;
  /**
   * A comma-separated list of tags to assign to the resource.
   */
  tags?: string | undefined;
  /**
   * A pipe-separated list of key-value pairs of contextual metadata.
   */
  context?: string | undefined;
  /**
   * A pipe-separated list of custom metadata fields (by external_id) and their values.
   */
  metadata?: string | undefined;
  /**
   * Whether to clear invalid metadata fields. If false, invalid fields will be preserved. Default: false
   */
  clearInvalid?: boolean | undefined;
  /**
   * Face coordinates as comma-separated values, with multiple faces separated by pipes.
   */
  faceCoordinates?: string | undefined;
  /**
   * Custom coordinates as comma-separated values, with multiple coordinates separated by pipes.
   */
  customCoordinates?: string | undefined;
  /**
   * Named groups of coordinate pairs representing regions.
   */
  regions?: string | undefined;
  /**
   * Quality override value that will override any automatic quality transformations.
   */
  qualityOverride?: string | undefined;
  /**
   * The moderation status of the resource.
   */
  moderationStatus?: ModerationStatus | undefined;
  /**
   * Confidence threshold for auto-tagging.
   */
  autoTagging?: number | undefined;
  /**
   * The type of detection to perform on the resource.
   */
  detection?: string | undefined;
  /**
   * The type of OCR to perform on the resource.
   */
  ocr?: ResourceUpdateRequestOcr | undefined;
  /**
   * The conversion to apply for raw files.
   */
  rawConvert?: RawConvert | undefined;
  /**
   * The type of categorization to perform on the resource.
   */
  categorization?: ResourceUpdateRequestCategorization | undefined;
  /**
   * Whether to index the resource with visual search. If true, the resource will be indexed for visual search capabilities. Default: false
   */
  visualSearch?: boolean | undefined;
  /**
   * The background removal provider to use for the resource.
   */
  backgroundRemoval?: ResourceUpdateRequestBackgroundRemoval | undefined;
  /**
   * A JSON array of access_types for the asset. The asset is accessible as long as one of the access types is valid.
   *
   * @remarks
   * Possible values for each access type:
   *   - 'token' - requires either Token-based access or Cookie-based access for accessing the resource.
   *   - 'anonymous' - allows public access to the resource. The anonymous access type should also include start and end dates (in ISO 8601 format) defining when the resource is publicly available.
   */
  accessControl?: string | undefined;
};

/** @internal */
export const ModerationStatus$inboundSchema: z.ZodNativeEnum<
  typeof ModerationStatus
> = z.nativeEnum(ModerationStatus);

/** @internal */
export const ModerationStatus$outboundSchema: z.ZodNativeEnum<
  typeof ModerationStatus
> = ModerationStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ModerationStatus$ {
  /** @deprecated use `ModerationStatus$inboundSchema` instead. */
  export const inboundSchema = ModerationStatus$inboundSchema;
  /** @deprecated use `ModerationStatus$outboundSchema` instead. */
  export const outboundSchema = ModerationStatus$outboundSchema;
}

/** @internal */
export const ResourceUpdateRequestOcr$inboundSchema: z.ZodNativeEnum<
  typeof ResourceUpdateRequestOcr
> = z.nativeEnum(ResourceUpdateRequestOcr);

/** @internal */
export const ResourceUpdateRequestOcr$outboundSchema: z.ZodNativeEnum<
  typeof ResourceUpdateRequestOcr
> = ResourceUpdateRequestOcr$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResourceUpdateRequestOcr$ {
  /** @deprecated use `ResourceUpdateRequestOcr$inboundSchema` instead. */
  export const inboundSchema = ResourceUpdateRequestOcr$inboundSchema;
  /** @deprecated use `ResourceUpdateRequestOcr$outboundSchema` instead. */
  export const outboundSchema = ResourceUpdateRequestOcr$outboundSchema;
}

/** @internal */
export const RawConvert$inboundSchema: z.ZodNativeEnum<typeof RawConvert> = z
  .nativeEnum(RawConvert);

/** @internal */
export const RawConvert$outboundSchema: z.ZodNativeEnum<typeof RawConvert> =
  RawConvert$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RawConvert$ {
  /** @deprecated use `RawConvert$inboundSchema` instead. */
  export const inboundSchema = RawConvert$inboundSchema;
  /** @deprecated use `RawConvert$outboundSchema` instead. */
  export const outboundSchema = RawConvert$outboundSchema;
}

/** @internal */
export const ResourceUpdateRequestCategorization$inboundSchema: z.ZodNativeEnum<
  typeof ResourceUpdateRequestCategorization
> = z.nativeEnum(ResourceUpdateRequestCategorization);

/** @internal */
export const ResourceUpdateRequestCategorization$outboundSchema:
  z.ZodNativeEnum<typeof ResourceUpdateRequestCategorization> =
    ResourceUpdateRequestCategorization$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResourceUpdateRequestCategorization$ {
  /** @deprecated use `ResourceUpdateRequestCategorization$inboundSchema` instead. */
  export const inboundSchema =
    ResourceUpdateRequestCategorization$inboundSchema;
  /** @deprecated use `ResourceUpdateRequestCategorization$outboundSchema` instead. */
  export const outboundSchema =
    ResourceUpdateRequestCategorization$outboundSchema;
}

/** @internal */
export const ResourceUpdateRequestBackgroundRemoval$inboundSchema:
  z.ZodNativeEnum<typeof ResourceUpdateRequestBackgroundRemoval> = z.nativeEnum(
    ResourceUpdateRequestBackgroundRemoval,
  );

/** @internal */
export const ResourceUpdateRequestBackgroundRemoval$outboundSchema:
  z.ZodNativeEnum<typeof ResourceUpdateRequestBackgroundRemoval> =
    ResourceUpdateRequestBackgroundRemoval$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResourceUpdateRequestBackgroundRemoval$ {
  /** @deprecated use `ResourceUpdateRequestBackgroundRemoval$inboundSchema` instead. */
  export const inboundSchema =
    ResourceUpdateRequestBackgroundRemoval$inboundSchema;
  /** @deprecated use `ResourceUpdateRequestBackgroundRemoval$outboundSchema` instead. */
  export const outboundSchema =
    ResourceUpdateRequestBackgroundRemoval$outboundSchema;
}

/** @internal */
export const ResourceUpdateRequest$inboundSchema: z.ZodType<
  ResourceUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  display_name: z.string().optional(),
  unique_display_name: z.boolean().default(false),
  asset_folder: z.string().optional(),
  tags: z.string().optional(),
  context: z.string().optional(),
  metadata: z.string().optional(),
  clear_invalid: z.boolean().default(false),
  face_coordinates: z.string().optional(),
  custom_coordinates: z.string().optional(),
  regions: z.string().optional(),
  quality_override: z.string().optional(),
  moderation_status: ModerationStatus$inboundSchema.optional(),
  auto_tagging: z.number().optional(),
  detection: z.string().optional(),
  ocr: ResourceUpdateRequestOcr$inboundSchema.optional(),
  raw_convert: RawConvert$inboundSchema.optional(),
  categorization: ResourceUpdateRequestCategorization$inboundSchema.optional(),
  visual_search: z.boolean().optional(),
  background_removal: ResourceUpdateRequestBackgroundRemoval$inboundSchema
    .optional(),
  access_control: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "display_name": "displayName",
    "unique_display_name": "uniqueDisplayName",
    "asset_folder": "assetFolder",
    "clear_invalid": "clearInvalid",
    "face_coordinates": "faceCoordinates",
    "custom_coordinates": "customCoordinates",
    "quality_override": "qualityOverride",
    "moderation_status": "moderationStatus",
    "auto_tagging": "autoTagging",
    "raw_convert": "rawConvert",
    "visual_search": "visualSearch",
    "background_removal": "backgroundRemoval",
    "access_control": "accessControl",
  });
});

/** @internal */
export type ResourceUpdateRequest$Outbound = {
  display_name?: string | undefined;
  unique_display_name: boolean;
  asset_folder?: string | undefined;
  tags?: string | undefined;
  context?: string | undefined;
  metadata?: string | undefined;
  clear_invalid: boolean;
  face_coordinates?: string | undefined;
  custom_coordinates?: string | undefined;
  regions?: string | undefined;
  quality_override?: string | undefined;
  moderation_status?: string | undefined;
  auto_tagging?: number | undefined;
  detection?: string | undefined;
  ocr?: string | undefined;
  raw_convert?: string | undefined;
  categorization?: string | undefined;
  visual_search?: boolean | undefined;
  background_removal?: string | undefined;
  access_control?: string | undefined;
};

/** @internal */
export const ResourceUpdateRequest$outboundSchema: z.ZodType<
  ResourceUpdateRequest$Outbound,
  z.ZodTypeDef,
  ResourceUpdateRequest
> = z.object({
  displayName: z.string().optional(),
  uniqueDisplayName: z.boolean().default(false),
  assetFolder: z.string().optional(),
  tags: z.string().optional(),
  context: z.string().optional(),
  metadata: z.string().optional(),
  clearInvalid: z.boolean().default(false),
  faceCoordinates: z.string().optional(),
  customCoordinates: z.string().optional(),
  regions: z.string().optional(),
  qualityOverride: z.string().optional(),
  moderationStatus: ModerationStatus$outboundSchema.optional(),
  autoTagging: z.number().optional(),
  detection: z.string().optional(),
  ocr: ResourceUpdateRequestOcr$outboundSchema.optional(),
  rawConvert: RawConvert$outboundSchema.optional(),
  categorization: ResourceUpdateRequestCategorization$outboundSchema.optional(),
  visualSearch: z.boolean().optional(),
  backgroundRemoval: ResourceUpdateRequestBackgroundRemoval$outboundSchema
    .optional(),
  accessControl: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    displayName: "display_name",
    uniqueDisplayName: "unique_display_name",
    assetFolder: "asset_folder",
    clearInvalid: "clear_invalid",
    faceCoordinates: "face_coordinates",
    customCoordinates: "custom_coordinates",
    qualityOverride: "quality_override",
    moderationStatus: "moderation_status",
    autoTagging: "auto_tagging",
    rawConvert: "raw_convert",
    visualSearch: "visual_search",
    backgroundRemoval: "background_removal",
    accessControl: "access_control",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResourceUpdateRequest$ {
  /** @deprecated use `ResourceUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = ResourceUpdateRequest$inboundSchema;
  /** @deprecated use `ResourceUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = ResourceUpdateRequest$outboundSchema;
  /** @deprecated use `ResourceUpdateRequest$Outbound` instead. */
  export type Outbound = ResourceUpdateRequest$Outbound;
}

export function resourceUpdateRequestToJSON(
  resourceUpdateRequest: ResourceUpdateRequest,
): string {
  return JSON.stringify(
    ResourceUpdateRequest$outboundSchema.parse(resourceUpdateRequest),
  );
}

export function resourceUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<ResourceUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResourceUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResourceUpdateRequest' from JSON`,
  );
}
