/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AccessControlAnonymous,
  AccessControlAnonymous$inboundSchema,
  AccessControlAnonymous$Outbound,
  AccessControlAnonymous$outboundSchema,
} from "./accesscontrolanonymous.js";
import {
  AccessControlToken,
  AccessControlToken$inboundSchema,
  AccessControlToken$Outbound,
  AccessControlToken$outboundSchema,
} from "./accesscontroltoken.js";

export type AccessControl =
  | (AccessControlToken & { accessType: "token" })
  | (AccessControlAnonymous & { accessType: "anonymous" });

/** @internal */
export const AccessControl$inboundSchema: z.ZodType<
  AccessControl,
  z.ZodTypeDef,
  unknown
> = z.union([
  AccessControlToken$inboundSchema.and(
    z.object({ access_type: z.literal("token") }).transform((v) => ({
      accessType: v.access_type,
    })),
  ),
  AccessControlAnonymous$inboundSchema.and(
    z.object({ access_type: z.literal("anonymous") }).transform((v) => ({
      accessType: v.access_type,
    })),
  ),
]);

/** @internal */
export type AccessControl$Outbound =
  | (AccessControlToken$Outbound & { access_type: "token" })
  | (AccessControlAnonymous$Outbound & { access_type: "anonymous" });

/** @internal */
export const AccessControl$outboundSchema: z.ZodType<
  AccessControl$Outbound,
  z.ZodTypeDef,
  AccessControl
> = z.union([
  AccessControlToken$outboundSchema.and(
    z.object({ accessType: z.literal("token") }).transform((v) => ({
      access_type: v.accessType,
    })),
  ),
  AccessControlAnonymous$outboundSchema.and(
    z.object({ accessType: z.literal("anonymous") }).transform((v) => ({
      access_type: v.accessType,
    })),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccessControl$ {
  /** @deprecated use `AccessControl$inboundSchema` instead. */
  export const inboundSchema = AccessControl$inboundSchema;
  /** @deprecated use `AccessControl$outboundSchema` instead. */
  export const outboundSchema = AccessControl$outboundSchema;
  /** @deprecated use `AccessControl$Outbound` instead. */
  export type Outbound = AccessControl$Outbound;
}

export function accessControlToJSON(accessControl: AccessControl): string {
  return JSON.stringify(AccessControl$outboundSchema.parse(accessControl));
}

export function accessControlFromJSON(
  jsonString: string,
): SafeParseResult<AccessControl, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccessControl$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccessControl' from JSON`,
  );
}
