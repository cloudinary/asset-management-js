/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The type of asset. Relevant as a parameter only when using the SDKs (the resource_type is included in the endpoint URL when using the REST API). Note: use video for all video and audio assets, such as .mp3. Default: image.
 */
export const DeleteResourceByPublicIdsRequestResourceType3 = {
  Image: "image",
  Video: "video",
  Raw: "raw",
} as const;
/**
 * The type of asset. Relevant as a parameter only when using the SDKs (the resource_type is included in the endpoint URL when using the REST API). Note: use video for all video and audio assets, such as .mp3. Default: image.
 */
export type DeleteResourceByPublicIdsRequestResourceType3 = ClosedEnum<
  typeof DeleteResourceByPublicIdsRequestResourceType3
>;

export type DeleteResourceByPublicIdsRequest3 = {
  /**
   * A list of public IDs of the resources to delete.
   */
  publicIds?: Array<string> | undefined;
  /**
   * Delete all assets, including derived assets, where the public ID starts with the specified prefix (up to a maximum of 1000 original resources).
   */
  prefix?: string | undefined;
  /**
   * Delete all assets (of the relevant resource_type and type), including derived assets (up to a maximum of 1000 original resources).
   */
  all: boolean;
  /**
   * The type of asset. Relevant as a parameter only when using the SDKs (the resource_type is included in the endpoint URL when using the REST API). Note: use video for all video and audio assets, such as .mp3. Default: image.
   */
  resourceType?: DeleteResourceByPublicIdsRequestResourceType3 | undefined;
  /**
   * Whether to delete only the derived assets. Default: false.
   */
  keepOriginal?: boolean | undefined;
  /**
   * Whether to also invalidate the copies of the resource on the CDN. It usually takes between a few seconds and a few minutes for the invalidation to fully propagate through the CDN. Default: false.
   */
  invalidate?: boolean | undefined;
  /**
   * (Only when deleting by prefix or all) When a deletion request has more than 1000 resources to delete, the response includes the partial boolean parameter set to true, as well as a next_cursor value. You can then specify this returned next_cursor value as a parameter of the following deletion request.
   */
  nextCursor?: string | undefined;
  /**
   * Only the derived assets matching this hash of transformation parameters will be deleted. You can include multiple transformations separated by a pipe character (|).
   */
  transformations?: string | undefined;
};

/**
 * The type of asset. Relevant as a parameter only when using the SDKs (the resource_type is included in the endpoint URL when using the REST API). Note: use video for all video and audio assets, such as .mp3. Default: image.
 */
export const DeleteResourceByPublicIdsRequestResourceType2 = {
  Image: "image",
  Video: "video",
  Raw: "raw",
} as const;
/**
 * The type of asset. Relevant as a parameter only when using the SDKs (the resource_type is included in the endpoint URL when using the REST API). Note: use video for all video and audio assets, such as .mp3. Default: image.
 */
export type DeleteResourceByPublicIdsRequestResourceType2 = ClosedEnum<
  typeof DeleteResourceByPublicIdsRequestResourceType2
>;

export type DeleteResourceByPublicIdsRequest2 = {
  /**
   * A list of public IDs of the resources to delete.
   */
  publicIds?: Array<string> | undefined;
  /**
   * Delete all assets, including derived assets, where the public ID starts with the specified prefix (up to a maximum of 1000 original resources).
   */
  prefix: string;
  /**
   * Delete all assets (of the relevant resource_type and type), including derived assets (up to a maximum of 1000 original resources).
   */
  all?: boolean | undefined;
  /**
   * The type of asset. Relevant as a parameter only when using the SDKs (the resource_type is included in the endpoint URL when using the REST API). Note: use video for all video and audio assets, such as .mp3. Default: image.
   */
  resourceType?: DeleteResourceByPublicIdsRequestResourceType2 | undefined;
  /**
   * Whether to delete only the derived assets. Default: false.
   */
  keepOriginal?: boolean | undefined;
  /**
   * Whether to also invalidate the copies of the resource on the CDN. It usually takes between a few seconds and a few minutes for the invalidation to fully propagate through the CDN. Default: false.
   */
  invalidate?: boolean | undefined;
  /**
   * (Only when deleting by prefix or all) When a deletion request has more than 1000 resources to delete, the response includes the partial boolean parameter set to true, as well as a next_cursor value. You can then specify this returned next_cursor value as a parameter of the following deletion request.
   */
  nextCursor?: string | undefined;
  /**
   * Only the derived assets matching this hash of transformation parameters will be deleted. You can include multiple transformations separated by a pipe character (|).
   */
  transformations?: string | undefined;
};

/**
 * The type of asset. Relevant as a parameter only when using the SDKs (the resource_type is included in the endpoint URL when using the REST API). Note: use video for all video and audio assets, such as .mp3. Default: image.
 */
export const DeleteResourceByPublicIdsRequestResourceType1 = {
  Image: "image",
  Video: "video",
  Raw: "raw",
} as const;
/**
 * The type of asset. Relevant as a parameter only when using the SDKs (the resource_type is included in the endpoint URL when using the REST API). Note: use video for all video and audio assets, such as .mp3. Default: image.
 */
export type DeleteResourceByPublicIdsRequestResourceType1 = ClosedEnum<
  typeof DeleteResourceByPublicIdsRequestResourceType1
>;

export type DeleteResourceByPublicIdsRequest1 = {
  /**
   * A list of public IDs of the resources to delete.
   */
  publicIds: Array<string>;
  /**
   * Delete all assets, including derived assets, where the public ID starts with the specified prefix (up to a maximum of 1000 original resources).
   */
  prefix?: string | undefined;
  /**
   * Delete all assets (of the relevant resource_type and type), including derived assets (up to a maximum of 1000 original resources).
   */
  all?: boolean | undefined;
  /**
   * The type of asset. Relevant as a parameter only when using the SDKs (the resource_type is included in the endpoint URL when using the REST API). Note: use video for all video and audio assets, such as .mp3. Default: image.
   */
  resourceType?: DeleteResourceByPublicIdsRequestResourceType1 | undefined;
  /**
   * Whether to delete only the derived assets. Default: false.
   */
  keepOriginal?: boolean | undefined;
  /**
   * Whether to also invalidate the copies of the resource on the CDN. It usually takes between a few seconds and a few minutes for the invalidation to fully propagate through the CDN. Default: false.
   */
  invalidate?: boolean | undefined;
  /**
   * (Only when deleting by prefix or all) When a deletion request has more than 1000 resources to delete, the response includes the partial boolean parameter set to true, as well as a next_cursor value. You can then specify this returned next_cursor value as a parameter of the following deletion request.
   */
  nextCursor?: string | undefined;
  /**
   * Only the derived assets matching this hash of transformation parameters will be deleted. You can include multiple transformations separated by a pipe character (|).
   */
  transformations?: string | undefined;
};

export type DeleteResourceByPublicIdsRequestUnion =
  | DeleteResourceByPublicIdsRequest1
  | DeleteResourceByPublicIdsRequest2
  | DeleteResourceByPublicIdsRequest3;

/** @internal */
export const DeleteResourceByPublicIdsRequestResourceType3$inboundSchema:
  z.ZodNativeEnum<typeof DeleteResourceByPublicIdsRequestResourceType3> = z
    .nativeEnum(DeleteResourceByPublicIdsRequestResourceType3);

/** @internal */
export const DeleteResourceByPublicIdsRequestResourceType3$outboundSchema:
  z.ZodNativeEnum<typeof DeleteResourceByPublicIdsRequestResourceType3> =
    DeleteResourceByPublicIdsRequestResourceType3$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteResourceByPublicIdsRequestResourceType3$ {
  /** @deprecated use `DeleteResourceByPublicIdsRequestResourceType3$inboundSchema` instead. */
  export const inboundSchema =
    DeleteResourceByPublicIdsRequestResourceType3$inboundSchema;
  /** @deprecated use `DeleteResourceByPublicIdsRequestResourceType3$outboundSchema` instead. */
  export const outboundSchema =
    DeleteResourceByPublicIdsRequestResourceType3$outboundSchema;
}

/** @internal */
export const DeleteResourceByPublicIdsRequest3$inboundSchema: z.ZodType<
  DeleteResourceByPublicIdsRequest3,
  z.ZodTypeDef,
  unknown
> = z.object({
  public_ids: z.array(z.string()).optional(),
  prefix: z.string().optional(),
  all: z.boolean(),
  resource_type: DeleteResourceByPublicIdsRequestResourceType3$inboundSchema
    .default("image"),
  keep_original: z.boolean().default(false),
  invalidate: z.boolean().default(false),
  next_cursor: z.string().optional(),
  transformations: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "public_ids": "publicIds",
    "resource_type": "resourceType",
    "keep_original": "keepOriginal",
    "next_cursor": "nextCursor",
  });
});

/** @internal */
export type DeleteResourceByPublicIdsRequest3$Outbound = {
  public_ids?: Array<string> | undefined;
  prefix?: string | undefined;
  all: boolean;
  resource_type: string;
  keep_original: boolean;
  invalidate: boolean;
  next_cursor?: string | undefined;
  transformations?: string | undefined;
};

/** @internal */
export const DeleteResourceByPublicIdsRequest3$outboundSchema: z.ZodType<
  DeleteResourceByPublicIdsRequest3$Outbound,
  z.ZodTypeDef,
  DeleteResourceByPublicIdsRequest3
> = z.object({
  publicIds: z.array(z.string()).optional(),
  prefix: z.string().optional(),
  all: z.boolean(),
  resourceType: DeleteResourceByPublicIdsRequestResourceType3$outboundSchema
    .default("image"),
  keepOriginal: z.boolean().default(false),
  invalidate: z.boolean().default(false),
  nextCursor: z.string().optional(),
  transformations: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    publicIds: "public_ids",
    resourceType: "resource_type",
    keepOriginal: "keep_original",
    nextCursor: "next_cursor",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteResourceByPublicIdsRequest3$ {
  /** @deprecated use `DeleteResourceByPublicIdsRequest3$inboundSchema` instead. */
  export const inboundSchema = DeleteResourceByPublicIdsRequest3$inboundSchema;
  /** @deprecated use `DeleteResourceByPublicIdsRequest3$outboundSchema` instead. */
  export const outboundSchema =
    DeleteResourceByPublicIdsRequest3$outboundSchema;
  /** @deprecated use `DeleteResourceByPublicIdsRequest3$Outbound` instead. */
  export type Outbound = DeleteResourceByPublicIdsRequest3$Outbound;
}

export function deleteResourceByPublicIdsRequest3ToJSON(
  deleteResourceByPublicIdsRequest3: DeleteResourceByPublicIdsRequest3,
): string {
  return JSON.stringify(
    DeleteResourceByPublicIdsRequest3$outboundSchema.parse(
      deleteResourceByPublicIdsRequest3,
    ),
  );
}

export function deleteResourceByPublicIdsRequest3FromJSON(
  jsonString: string,
): SafeParseResult<DeleteResourceByPublicIdsRequest3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteResourceByPublicIdsRequest3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteResourceByPublicIdsRequest3' from JSON`,
  );
}

/** @internal */
export const DeleteResourceByPublicIdsRequestResourceType2$inboundSchema:
  z.ZodNativeEnum<typeof DeleteResourceByPublicIdsRequestResourceType2> = z
    .nativeEnum(DeleteResourceByPublicIdsRequestResourceType2);

/** @internal */
export const DeleteResourceByPublicIdsRequestResourceType2$outboundSchema:
  z.ZodNativeEnum<typeof DeleteResourceByPublicIdsRequestResourceType2> =
    DeleteResourceByPublicIdsRequestResourceType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteResourceByPublicIdsRequestResourceType2$ {
  /** @deprecated use `DeleteResourceByPublicIdsRequestResourceType2$inboundSchema` instead. */
  export const inboundSchema =
    DeleteResourceByPublicIdsRequestResourceType2$inboundSchema;
  /** @deprecated use `DeleteResourceByPublicIdsRequestResourceType2$outboundSchema` instead. */
  export const outboundSchema =
    DeleteResourceByPublicIdsRequestResourceType2$outboundSchema;
}

/** @internal */
export const DeleteResourceByPublicIdsRequest2$inboundSchema: z.ZodType<
  DeleteResourceByPublicIdsRequest2,
  z.ZodTypeDef,
  unknown
> = z.object({
  public_ids: z.array(z.string()).optional(),
  prefix: z.string(),
  all: z.boolean().optional(),
  resource_type: DeleteResourceByPublicIdsRequestResourceType2$inboundSchema
    .default("image"),
  keep_original: z.boolean().default(false),
  invalidate: z.boolean().default(false),
  next_cursor: z.string().optional(),
  transformations: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "public_ids": "publicIds",
    "resource_type": "resourceType",
    "keep_original": "keepOriginal",
    "next_cursor": "nextCursor",
  });
});

/** @internal */
export type DeleteResourceByPublicIdsRequest2$Outbound = {
  public_ids?: Array<string> | undefined;
  prefix: string;
  all?: boolean | undefined;
  resource_type: string;
  keep_original: boolean;
  invalidate: boolean;
  next_cursor?: string | undefined;
  transformations?: string | undefined;
};

/** @internal */
export const DeleteResourceByPublicIdsRequest2$outboundSchema: z.ZodType<
  DeleteResourceByPublicIdsRequest2$Outbound,
  z.ZodTypeDef,
  DeleteResourceByPublicIdsRequest2
> = z.object({
  publicIds: z.array(z.string()).optional(),
  prefix: z.string(),
  all: z.boolean().optional(),
  resourceType: DeleteResourceByPublicIdsRequestResourceType2$outboundSchema
    .default("image"),
  keepOriginal: z.boolean().default(false),
  invalidate: z.boolean().default(false),
  nextCursor: z.string().optional(),
  transformations: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    publicIds: "public_ids",
    resourceType: "resource_type",
    keepOriginal: "keep_original",
    nextCursor: "next_cursor",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteResourceByPublicIdsRequest2$ {
  /** @deprecated use `DeleteResourceByPublicIdsRequest2$inboundSchema` instead. */
  export const inboundSchema = DeleteResourceByPublicIdsRequest2$inboundSchema;
  /** @deprecated use `DeleteResourceByPublicIdsRequest2$outboundSchema` instead. */
  export const outboundSchema =
    DeleteResourceByPublicIdsRequest2$outboundSchema;
  /** @deprecated use `DeleteResourceByPublicIdsRequest2$Outbound` instead. */
  export type Outbound = DeleteResourceByPublicIdsRequest2$Outbound;
}

export function deleteResourceByPublicIdsRequest2ToJSON(
  deleteResourceByPublicIdsRequest2: DeleteResourceByPublicIdsRequest2,
): string {
  return JSON.stringify(
    DeleteResourceByPublicIdsRequest2$outboundSchema.parse(
      deleteResourceByPublicIdsRequest2,
    ),
  );
}

export function deleteResourceByPublicIdsRequest2FromJSON(
  jsonString: string,
): SafeParseResult<DeleteResourceByPublicIdsRequest2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteResourceByPublicIdsRequest2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteResourceByPublicIdsRequest2' from JSON`,
  );
}

/** @internal */
export const DeleteResourceByPublicIdsRequestResourceType1$inboundSchema:
  z.ZodNativeEnum<typeof DeleteResourceByPublicIdsRequestResourceType1> = z
    .nativeEnum(DeleteResourceByPublicIdsRequestResourceType1);

/** @internal */
export const DeleteResourceByPublicIdsRequestResourceType1$outboundSchema:
  z.ZodNativeEnum<typeof DeleteResourceByPublicIdsRequestResourceType1> =
    DeleteResourceByPublicIdsRequestResourceType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteResourceByPublicIdsRequestResourceType1$ {
  /** @deprecated use `DeleteResourceByPublicIdsRequestResourceType1$inboundSchema` instead. */
  export const inboundSchema =
    DeleteResourceByPublicIdsRequestResourceType1$inboundSchema;
  /** @deprecated use `DeleteResourceByPublicIdsRequestResourceType1$outboundSchema` instead. */
  export const outboundSchema =
    DeleteResourceByPublicIdsRequestResourceType1$outboundSchema;
}

/** @internal */
export const DeleteResourceByPublicIdsRequest1$inboundSchema: z.ZodType<
  DeleteResourceByPublicIdsRequest1,
  z.ZodTypeDef,
  unknown
> = z.object({
  public_ids: z.array(z.string()),
  prefix: z.string().optional(),
  all: z.boolean().optional(),
  resource_type: DeleteResourceByPublicIdsRequestResourceType1$inboundSchema
    .default("image"),
  keep_original: z.boolean().default(false),
  invalidate: z.boolean().default(false),
  next_cursor: z.string().optional(),
  transformations: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "public_ids": "publicIds",
    "resource_type": "resourceType",
    "keep_original": "keepOriginal",
    "next_cursor": "nextCursor",
  });
});

/** @internal */
export type DeleteResourceByPublicIdsRequest1$Outbound = {
  public_ids: Array<string>;
  prefix?: string | undefined;
  all?: boolean | undefined;
  resource_type: string;
  keep_original: boolean;
  invalidate: boolean;
  next_cursor?: string | undefined;
  transformations?: string | undefined;
};

/** @internal */
export const DeleteResourceByPublicIdsRequest1$outboundSchema: z.ZodType<
  DeleteResourceByPublicIdsRequest1$Outbound,
  z.ZodTypeDef,
  DeleteResourceByPublicIdsRequest1
> = z.object({
  publicIds: z.array(z.string()),
  prefix: z.string().optional(),
  all: z.boolean().optional(),
  resourceType: DeleteResourceByPublicIdsRequestResourceType1$outboundSchema
    .default("image"),
  keepOriginal: z.boolean().default(false),
  invalidate: z.boolean().default(false),
  nextCursor: z.string().optional(),
  transformations: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    publicIds: "public_ids",
    resourceType: "resource_type",
    keepOriginal: "keep_original",
    nextCursor: "next_cursor",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteResourceByPublicIdsRequest1$ {
  /** @deprecated use `DeleteResourceByPublicIdsRequest1$inboundSchema` instead. */
  export const inboundSchema = DeleteResourceByPublicIdsRequest1$inboundSchema;
  /** @deprecated use `DeleteResourceByPublicIdsRequest1$outboundSchema` instead. */
  export const outboundSchema =
    DeleteResourceByPublicIdsRequest1$outboundSchema;
  /** @deprecated use `DeleteResourceByPublicIdsRequest1$Outbound` instead. */
  export type Outbound = DeleteResourceByPublicIdsRequest1$Outbound;
}

export function deleteResourceByPublicIdsRequest1ToJSON(
  deleteResourceByPublicIdsRequest1: DeleteResourceByPublicIdsRequest1,
): string {
  return JSON.stringify(
    DeleteResourceByPublicIdsRequest1$outboundSchema.parse(
      deleteResourceByPublicIdsRequest1,
    ),
  );
}

export function deleteResourceByPublicIdsRequest1FromJSON(
  jsonString: string,
): SafeParseResult<DeleteResourceByPublicIdsRequest1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteResourceByPublicIdsRequest1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteResourceByPublicIdsRequest1' from JSON`,
  );
}

/** @internal */
export const DeleteResourceByPublicIdsRequestUnion$inboundSchema: z.ZodType<
  DeleteResourceByPublicIdsRequestUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => DeleteResourceByPublicIdsRequest1$inboundSchema),
  z.lazy(() => DeleteResourceByPublicIdsRequest2$inboundSchema),
  z.lazy(() => DeleteResourceByPublicIdsRequest3$inboundSchema),
]);

/** @internal */
export type DeleteResourceByPublicIdsRequestUnion$Outbound =
  | DeleteResourceByPublicIdsRequest1$Outbound
  | DeleteResourceByPublicIdsRequest2$Outbound
  | DeleteResourceByPublicIdsRequest3$Outbound;

/** @internal */
export const DeleteResourceByPublicIdsRequestUnion$outboundSchema: z.ZodType<
  DeleteResourceByPublicIdsRequestUnion$Outbound,
  z.ZodTypeDef,
  DeleteResourceByPublicIdsRequestUnion
> = z.union([
  z.lazy(() => DeleteResourceByPublicIdsRequest1$outboundSchema),
  z.lazy(() => DeleteResourceByPublicIdsRequest2$outboundSchema),
  z.lazy(() => DeleteResourceByPublicIdsRequest3$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteResourceByPublicIdsRequestUnion$ {
  /** @deprecated use `DeleteResourceByPublicIdsRequestUnion$inboundSchema` instead. */
  export const inboundSchema =
    DeleteResourceByPublicIdsRequestUnion$inboundSchema;
  /** @deprecated use `DeleteResourceByPublicIdsRequestUnion$outboundSchema` instead. */
  export const outboundSchema =
    DeleteResourceByPublicIdsRequestUnion$outboundSchema;
  /** @deprecated use `DeleteResourceByPublicIdsRequestUnion$Outbound` instead. */
  export type Outbound = DeleteResourceByPublicIdsRequestUnion$Outbound;
}

export function deleteResourceByPublicIdsRequestUnionToJSON(
  deleteResourceByPublicIdsRequestUnion: DeleteResourceByPublicIdsRequestUnion,
): string {
  return JSON.stringify(
    DeleteResourceByPublicIdsRequestUnion$outboundSchema.parse(
      deleteResourceByPublicIdsRequestUnion,
    ),
  );
}

export function deleteResourceByPublicIdsRequestUnionFromJSON(
  jsonString: string,
): SafeParseResult<DeleteResourceByPublicIdsRequestUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeleteResourceByPublicIdsRequestUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteResourceByPublicIdsRequestUnion' from JSON`,
  );
}
