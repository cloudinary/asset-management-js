/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Request parameters for deleting derived resources
 */
export type DerivedDestroyRequest = {
  /**
   * Array of derived resource IDs to delete specific derived resources
   */
  derivedResourceIds: Array<string>;
  /**
   * Whether to invalidate the CDN cache for the deleted resources
   */
  invalidate?: boolean | undefined;
};

/** @internal */
export const DerivedDestroyRequest$inboundSchema: z.ZodType<
  DerivedDestroyRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  derived_resource_ids: z.array(z.string()),
  invalidate: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "derived_resource_ids": "derivedResourceIds",
  });
});

/** @internal */
export type DerivedDestroyRequest$Outbound = {
  derived_resource_ids: Array<string>;
  invalidate?: boolean | undefined;
};

/** @internal */
export const DerivedDestroyRequest$outboundSchema: z.ZodType<
  DerivedDestroyRequest$Outbound,
  z.ZodTypeDef,
  DerivedDestroyRequest
> = z.object({
  derivedResourceIds: z.array(z.string()),
  invalidate: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    derivedResourceIds: "derived_resource_ids",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DerivedDestroyRequest$ {
  /** @deprecated use `DerivedDestroyRequest$inboundSchema` instead. */
  export const inboundSchema = DerivedDestroyRequest$inboundSchema;
  /** @deprecated use `DerivedDestroyRequest$outboundSchema` instead. */
  export const outboundSchema = DerivedDestroyRequest$outboundSchema;
  /** @deprecated use `DerivedDestroyRequest$Outbound` instead. */
  export type Outbound = DerivedDestroyRequest$Outbound;
}

export function derivedDestroyRequestToJSON(
  derivedDestroyRequest: DerivedDestroyRequest,
): string {
  return JSON.stringify(
    DerivedDestroyRequest$outboundSchema.parse(derivedDestroyRequest),
  );
}

export function derivedDestroyRequestFromJSON(
  jsonString: string,
): SafeParseResult<DerivedDestroyRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DerivedDestroyRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DerivedDestroyRequest' from JSON`,
  );
}
