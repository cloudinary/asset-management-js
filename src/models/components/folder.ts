/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Folder = {
  /**
   * The name of the folder.
   */
  name: string;
  /**
   * The full path of the folder.
   */
  path: string;
  /**
   * The unique identifier for the folder.
   */
  externalId: string;
  /**
   * The timestamp when the folder was created.
   */
  createdAt?: Date | undefined;
};

/** @internal */
export const Folder$inboundSchema: z.ZodType<Folder, z.ZodTypeDef, unknown> = z
  .object({
    name: z.string(),
    path: z.string(),
    external_id: z.string(),
    created_at: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "external_id": "externalId",
      "created_at": "createdAt",
    });
  });

/** @internal */
export type Folder$Outbound = {
  name: string;
  path: string;
  external_id: string;
  created_at?: string | undefined;
};

/** @internal */
export const Folder$outboundSchema: z.ZodType<
  Folder$Outbound,
  z.ZodTypeDef,
  Folder
> = z.object({
  name: z.string(),
  path: z.string(),
  externalId: z.string(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
}).transform((v) => {
  return remap$(v, {
    externalId: "external_id",
    createdAt: "created_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Folder$ {
  /** @deprecated use `Folder$inboundSchema` instead. */
  export const inboundSchema = Folder$inboundSchema;
  /** @deprecated use `Folder$outboundSchema` instead. */
  export const outboundSchema = Folder$outboundSchema;
  /** @deprecated use `Folder$Outbound` instead. */
  export type Outbound = Folder$Outbound;
}

export function folderToJSON(folder: Folder): string {
  return JSON.stringify(Folder$outboundSchema.parse(folder));
}

export function folderFromJSON(
  jsonString: string,
): SafeParseResult<Folder, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Folder$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Folder' from JSON`,
  );
}
