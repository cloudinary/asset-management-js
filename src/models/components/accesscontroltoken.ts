/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The type of access control to apply to the asset.
 */
export const AccessControlTokenAccessType = {
  Token: "token",
} as const;
/**
 * The type of access control to apply to the asset.
 */
export type AccessControlTokenAccessType = ClosedEnum<
  typeof AccessControlTokenAccessType
>;

/**
 * Token-based access control that requires authentication to access the asset.
 */
export type AccessControlToken = {
  /**
   * The type of access control to apply to the asset.
   */
  accessType: AccessControlTokenAccessType;
  /**
   * The authentication key identifier for token-based access. Default key is used if not specified or if set to 'default'.
   */
  key?: string | undefined;
  /**
   * The specific path pattern for which this access control applies.
   */
  path?: string | undefined;
};

/** @internal */
export const AccessControlTokenAccessType$inboundSchema: z.ZodNativeEnum<
  typeof AccessControlTokenAccessType
> = z.nativeEnum(AccessControlTokenAccessType);

/** @internal */
export const AccessControlTokenAccessType$outboundSchema: z.ZodNativeEnum<
  typeof AccessControlTokenAccessType
> = AccessControlTokenAccessType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccessControlTokenAccessType$ {
  /** @deprecated use `AccessControlTokenAccessType$inboundSchema` instead. */
  export const inboundSchema = AccessControlTokenAccessType$inboundSchema;
  /** @deprecated use `AccessControlTokenAccessType$outboundSchema` instead. */
  export const outboundSchema = AccessControlTokenAccessType$outboundSchema;
}

/** @internal */
export const AccessControlToken$inboundSchema: z.ZodType<
  AccessControlToken,
  z.ZodTypeDef,
  unknown
> = z.object({
  access_type: AccessControlTokenAccessType$inboundSchema,
  key: z.string().optional(),
  path: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "access_type": "accessType",
  });
});

/** @internal */
export type AccessControlToken$Outbound = {
  access_type: string;
  key?: string | undefined;
  path?: string | undefined;
};

/** @internal */
export const AccessControlToken$outboundSchema: z.ZodType<
  AccessControlToken$Outbound,
  z.ZodTypeDef,
  AccessControlToken
> = z.object({
  accessType: AccessControlTokenAccessType$outboundSchema,
  key: z.string().optional(),
  path: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    accessType: "access_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccessControlToken$ {
  /** @deprecated use `AccessControlToken$inboundSchema` instead. */
  export const inboundSchema = AccessControlToken$inboundSchema;
  /** @deprecated use `AccessControlToken$outboundSchema` instead. */
  export const outboundSchema = AccessControlToken$outboundSchema;
  /** @deprecated use `AccessControlToken$Outbound` instead. */
  export type Outbound = AccessControlToken$Outbound;
}

export function accessControlTokenToJSON(
  accessControlToken: AccessControlToken,
): string {
  return JSON.stringify(
    AccessControlToken$outboundSchema.parse(accessControlToken),
  );
}

export function accessControlTokenFromJSON(
  jsonString: string,
): SafeParseResult<AccessControlToken, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccessControlToken$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccessControlToken' from JSON`,
  );
}
