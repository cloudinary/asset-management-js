/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type VisualSearchParameters3 = {
  /**
   * A textual description to find visually similar images
   */
  text: string;
  /**
   * The minimum similarity score (between 0 and 1.0) that a resource must have to be included in the response
   */
  threshold?: number | undefined;
};

export type VisualSearchParameters2 = {
  /**
   * The asset ID of an existing image to use as the source for finding visually similar images
   */
  imageAssetId: string;
  /**
   * The minimum similarity score (between 0 and 1.0) that a resource must have to be included in the response
   */
  threshold?: number | undefined;
};

export type VisualSearchParameters1 = {
  /**
   * The URL of an image to use as the source for finding visually similar images
   */
  imageUrl: string;
  /**
   * The minimum similarity score (between 0 and 1.0) that a resource must have to be included in the response
   */
  threshold?: number | undefined;
};

/**
 * Parameters for visual search operations
 */
export type VisualSearchParametersUnion =
  | VisualSearchParameters1
  | VisualSearchParameters2
  | VisualSearchParameters3;

/** @internal */
export const VisualSearchParameters3$inboundSchema: z.ZodType<
  VisualSearchParameters3,
  z.ZodTypeDef,
  unknown
> = z.object({
  text: z.string(),
  threshold: z.number().optional(),
});

/** @internal */
export type VisualSearchParameters3$Outbound = {
  text: string;
  threshold?: number | undefined;
};

/** @internal */
export const VisualSearchParameters3$outboundSchema: z.ZodType<
  VisualSearchParameters3$Outbound,
  z.ZodTypeDef,
  VisualSearchParameters3
> = z.object({
  text: z.string(),
  threshold: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VisualSearchParameters3$ {
  /** @deprecated use `VisualSearchParameters3$inboundSchema` instead. */
  export const inboundSchema = VisualSearchParameters3$inboundSchema;
  /** @deprecated use `VisualSearchParameters3$outboundSchema` instead. */
  export const outboundSchema = VisualSearchParameters3$outboundSchema;
  /** @deprecated use `VisualSearchParameters3$Outbound` instead. */
  export type Outbound = VisualSearchParameters3$Outbound;
}

export function visualSearchParameters3ToJSON(
  visualSearchParameters3: VisualSearchParameters3,
): string {
  return JSON.stringify(
    VisualSearchParameters3$outboundSchema.parse(visualSearchParameters3),
  );
}

export function visualSearchParameters3FromJSON(
  jsonString: string,
): SafeParseResult<VisualSearchParameters3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VisualSearchParameters3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VisualSearchParameters3' from JSON`,
  );
}

/** @internal */
export const VisualSearchParameters2$inboundSchema: z.ZodType<
  VisualSearchParameters2,
  z.ZodTypeDef,
  unknown
> = z.object({
  image_asset_id: z.string(),
  threshold: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "image_asset_id": "imageAssetId",
  });
});

/** @internal */
export type VisualSearchParameters2$Outbound = {
  image_asset_id: string;
  threshold?: number | undefined;
};

/** @internal */
export const VisualSearchParameters2$outboundSchema: z.ZodType<
  VisualSearchParameters2$Outbound,
  z.ZodTypeDef,
  VisualSearchParameters2
> = z.object({
  imageAssetId: z.string(),
  threshold: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    imageAssetId: "image_asset_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VisualSearchParameters2$ {
  /** @deprecated use `VisualSearchParameters2$inboundSchema` instead. */
  export const inboundSchema = VisualSearchParameters2$inboundSchema;
  /** @deprecated use `VisualSearchParameters2$outboundSchema` instead. */
  export const outboundSchema = VisualSearchParameters2$outboundSchema;
  /** @deprecated use `VisualSearchParameters2$Outbound` instead. */
  export type Outbound = VisualSearchParameters2$Outbound;
}

export function visualSearchParameters2ToJSON(
  visualSearchParameters2: VisualSearchParameters2,
): string {
  return JSON.stringify(
    VisualSearchParameters2$outboundSchema.parse(visualSearchParameters2),
  );
}

export function visualSearchParameters2FromJSON(
  jsonString: string,
): SafeParseResult<VisualSearchParameters2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VisualSearchParameters2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VisualSearchParameters2' from JSON`,
  );
}

/** @internal */
export const VisualSearchParameters1$inboundSchema: z.ZodType<
  VisualSearchParameters1,
  z.ZodTypeDef,
  unknown
> = z.object({
  image_url: z.string(),
  threshold: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "image_url": "imageUrl",
  });
});

/** @internal */
export type VisualSearchParameters1$Outbound = {
  image_url: string;
  threshold?: number | undefined;
};

/** @internal */
export const VisualSearchParameters1$outboundSchema: z.ZodType<
  VisualSearchParameters1$Outbound,
  z.ZodTypeDef,
  VisualSearchParameters1
> = z.object({
  imageUrl: z.string(),
  threshold: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    imageUrl: "image_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VisualSearchParameters1$ {
  /** @deprecated use `VisualSearchParameters1$inboundSchema` instead. */
  export const inboundSchema = VisualSearchParameters1$inboundSchema;
  /** @deprecated use `VisualSearchParameters1$outboundSchema` instead. */
  export const outboundSchema = VisualSearchParameters1$outboundSchema;
  /** @deprecated use `VisualSearchParameters1$Outbound` instead. */
  export type Outbound = VisualSearchParameters1$Outbound;
}

export function visualSearchParameters1ToJSON(
  visualSearchParameters1: VisualSearchParameters1,
): string {
  return JSON.stringify(
    VisualSearchParameters1$outboundSchema.parse(visualSearchParameters1),
  );
}

export function visualSearchParameters1FromJSON(
  jsonString: string,
): SafeParseResult<VisualSearchParameters1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VisualSearchParameters1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VisualSearchParameters1' from JSON`,
  );
}

/** @internal */
export const VisualSearchParametersUnion$inboundSchema: z.ZodType<
  VisualSearchParametersUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => VisualSearchParameters1$inboundSchema),
  z.lazy(() => VisualSearchParameters2$inboundSchema),
  z.lazy(() => VisualSearchParameters3$inboundSchema),
]);

/** @internal */
export type VisualSearchParametersUnion$Outbound =
  | VisualSearchParameters1$Outbound
  | VisualSearchParameters2$Outbound
  | VisualSearchParameters3$Outbound;

/** @internal */
export const VisualSearchParametersUnion$outboundSchema: z.ZodType<
  VisualSearchParametersUnion$Outbound,
  z.ZodTypeDef,
  VisualSearchParametersUnion
> = z.union([
  z.lazy(() => VisualSearchParameters1$outboundSchema),
  z.lazy(() => VisualSearchParameters2$outboundSchema),
  z.lazy(() => VisualSearchParameters3$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VisualSearchParametersUnion$ {
  /** @deprecated use `VisualSearchParametersUnion$inboundSchema` instead. */
  export const inboundSchema = VisualSearchParametersUnion$inboundSchema;
  /** @deprecated use `VisualSearchParametersUnion$outboundSchema` instead. */
  export const outboundSchema = VisualSearchParametersUnion$outboundSchema;
  /** @deprecated use `VisualSearchParametersUnion$Outbound` instead. */
  export type Outbound = VisualSearchParametersUnion$Outbound;
}

export function visualSearchParametersUnionToJSON(
  visualSearchParametersUnion: VisualSearchParametersUnion,
): string {
  return JSON.stringify(
    VisualSearchParametersUnion$outboundSchema.parse(
      visualSearchParametersUnion,
    ),
  );
}

export function visualSearchParametersUnionFromJSON(
  jsonString: string,
): SafeParseResult<VisualSearchParametersUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VisualSearchParametersUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VisualSearchParametersUnion' from JSON`,
  );
}
