/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as operations from "../operations/index.js";
import { CloudinaryAssetMgmtError } from "./cloudinaryassetmgmterror.js";

/**
 * Version not found
 */
export type NotFoundErrorData = {
  error?: operations.NotFoundError | undefined;
};

/**
 * Version not found
 */
export class NotFoundError extends CloudinaryAssetMgmtError {
  error?: operations.NotFoundError | undefined;

  /** The original data that was passed to this error instance. */
  data$: NotFoundErrorData;

  constructor(
    err: NotFoundErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.error != null) this.error = err.error;

    this.name = "NotFoundError";
  }
}

/**
 * Authentication failed
 */
export type DownloadBackupAssetUnauthorizedErrorData = {
  error?: operations.DownloadBackupAssetUnauthorizedError | undefined;
};

/**
 * Authentication failed
 */
export class DownloadBackupAssetUnauthorizedError
  extends CloudinaryAssetMgmtError
{
  error?: operations.DownloadBackupAssetUnauthorizedError | undefined;

  /** The original data that was passed to this error instance. */
  data$: DownloadBackupAssetUnauthorizedErrorData;

  constructor(
    err: DownloadBackupAssetUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.error != null) this.error = err.error;

    this.name = "DownloadBackupAssetUnauthorizedError";
  }
}

/**
 * Bad request
 */
export type BadRequestErrorData = {
  error?: operations.BadRequestError | undefined;
};

/**
 * Bad request
 */
export class BadRequestError extends CloudinaryAssetMgmtError {
  error?: operations.BadRequestError | undefined;

  /** The original data that was passed to this error instance. */
  data$: BadRequestErrorData;

  constructor(
    err: BadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.error != null) this.error = err.error;

    this.name = "BadRequestError";
  }
}

/** @internal */
export const NotFoundError$inboundSchema: z.ZodType<
  NotFoundError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.lazy(() => operations.NotFoundError$inboundSchema).optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new NotFoundError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type NotFoundError$Outbound = {
  error?: operations.NotFoundError$Outbound | undefined;
};

/** @internal */
export const NotFoundError$outboundSchema: z.ZodType<
  NotFoundError$Outbound,
  z.ZodTypeDef,
  NotFoundError
> = z.instanceof(NotFoundError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.lazy(() => operations.NotFoundError$outboundSchema).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotFoundError$ {
  /** @deprecated use `NotFoundError$inboundSchema` instead. */
  export const inboundSchema = NotFoundError$inboundSchema;
  /** @deprecated use `NotFoundError$outboundSchema` instead. */
  export const outboundSchema = NotFoundError$outboundSchema;
  /** @deprecated use `NotFoundError$Outbound` instead. */
  export type Outbound = NotFoundError$Outbound;
}

/** @internal */
export const DownloadBackupAssetUnauthorizedError$inboundSchema: z.ZodType<
  DownloadBackupAssetUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.lazy(() =>
    operations.DownloadBackupAssetUnauthorizedError$inboundSchema
  ).optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new DownloadBackupAssetUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type DownloadBackupAssetUnauthorizedError$Outbound = {
  error?: operations.DownloadBackupAssetUnauthorizedError$Outbound | undefined;
};

/** @internal */
export const DownloadBackupAssetUnauthorizedError$outboundSchema: z.ZodType<
  DownloadBackupAssetUnauthorizedError$Outbound,
  z.ZodTypeDef,
  DownloadBackupAssetUnauthorizedError
> = z.instanceof(DownloadBackupAssetUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.lazy(() =>
      operations.DownloadBackupAssetUnauthorizedError$outboundSchema
    ).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DownloadBackupAssetUnauthorizedError$ {
  /** @deprecated use `DownloadBackupAssetUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    DownloadBackupAssetUnauthorizedError$inboundSchema;
  /** @deprecated use `DownloadBackupAssetUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    DownloadBackupAssetUnauthorizedError$outboundSchema;
  /** @deprecated use `DownloadBackupAssetUnauthorizedError$Outbound` instead. */
  export type Outbound = DownloadBackupAssetUnauthorizedError$Outbound;
}

/** @internal */
export const BadRequestError$inboundSchema: z.ZodType<
  BadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.lazy(() => operations.BadRequestError$inboundSchema).optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new BadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type BadRequestError$Outbound = {
  error?: operations.BadRequestError$Outbound | undefined;
};

/** @internal */
export const BadRequestError$outboundSchema: z.ZodType<
  BadRequestError$Outbound,
  z.ZodTypeDef,
  BadRequestError
> = z.instanceof(BadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.lazy(() => operations.BadRequestError$outboundSchema).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BadRequestError$ {
  /** @deprecated use `BadRequestError$inboundSchema` instead. */
  export const inboundSchema = BadRequestError$inboundSchema;
  /** @deprecated use `BadRequestError$outboundSchema` instead. */
  export const outboundSchema = BadRequestError$outboundSchema;
  /** @deprecated use `BadRequestError$Outbound` instead. */
  export type Outbound = BadRequestError$Outbound;
}
