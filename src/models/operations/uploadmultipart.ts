/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UploadMultipartGlobals = {
  /**
   * The cloud name of your product environment.
   */
  cloudName?: string | undefined;
};

/**
 * The type of resource to upload. "image" for uploading strictly images, "video" for uploading strictly videos, "raw" for uploading non-media files, or "auto" for allowing Cloudinary to automatically detect the type of the uploaded file.
 */
export const UploadMultipartResourceType = {
  Image: "image",
  Video: "video",
  Raw: "raw",
  Auto: "auto",
} as const;
/**
 * The type of resource to upload. "image" for uploading strictly images, "video" for uploading strictly videos, "raw" for uploading non-media files, or "auto" for allowing Cloudinary to automatically detect the type of the uploaded file.
 */
export type UploadMultipartResourceType = ClosedEnum<
  typeof UploadMultipartResourceType
>;

export type UploadMultipartRequest = {
  /**
   * The type of resource to upload. "image" for uploading strictly images, "video" for uploading strictly videos, "raw" for uploading non-media files, or "auto" for allowing Cloudinary to automatically detect the type of the uploaded file.
   */
  resourceType: UploadMultipartResourceType;
  binaryUploadRequest: components.BinaryUploadRequest;
};

/**
 * Successful upload
 */
export type UploadMultipartResponseBody =
  | components.AsyncUploadResponse
  | components.UploadResponse;

export type UploadMultipartResponse =
  | components.AsyncUploadResponse
  | components.UploadResponse
  | string;

/** @internal */
export const UploadMultipartGlobals$inboundSchema: z.ZodType<
  UploadMultipartGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  cloud_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "cloud_name": "cloudName",
  });
});

/** @internal */
export type UploadMultipartGlobals$Outbound = {
  cloud_name?: string | undefined;
};

/** @internal */
export const UploadMultipartGlobals$outboundSchema: z.ZodType<
  UploadMultipartGlobals$Outbound,
  z.ZodTypeDef,
  UploadMultipartGlobals
> = z.object({
  cloudName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    cloudName: "cloud_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadMultipartGlobals$ {
  /** @deprecated use `UploadMultipartGlobals$inboundSchema` instead. */
  export const inboundSchema = UploadMultipartGlobals$inboundSchema;
  /** @deprecated use `UploadMultipartGlobals$outboundSchema` instead. */
  export const outboundSchema = UploadMultipartGlobals$outboundSchema;
  /** @deprecated use `UploadMultipartGlobals$Outbound` instead. */
  export type Outbound = UploadMultipartGlobals$Outbound;
}

export function uploadMultipartGlobalsToJSON(
  uploadMultipartGlobals: UploadMultipartGlobals,
): string {
  return JSON.stringify(
    UploadMultipartGlobals$outboundSchema.parse(uploadMultipartGlobals),
  );
}

export function uploadMultipartGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<UploadMultipartGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadMultipartGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadMultipartGlobals' from JSON`,
  );
}

/** @internal */
export const UploadMultipartResourceType$inboundSchema: z.ZodNativeEnum<
  typeof UploadMultipartResourceType
> = z.nativeEnum(UploadMultipartResourceType);

/** @internal */
export const UploadMultipartResourceType$outboundSchema: z.ZodNativeEnum<
  typeof UploadMultipartResourceType
> = UploadMultipartResourceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadMultipartResourceType$ {
  /** @deprecated use `UploadMultipartResourceType$inboundSchema` instead. */
  export const inboundSchema = UploadMultipartResourceType$inboundSchema;
  /** @deprecated use `UploadMultipartResourceType$outboundSchema` instead. */
  export const outboundSchema = UploadMultipartResourceType$outboundSchema;
}

/** @internal */
export const UploadMultipartRequest$inboundSchema: z.ZodType<
  UploadMultipartRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource_type: UploadMultipartResourceType$inboundSchema,
  binary_upload_request: components.BinaryUploadRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "resource_type": "resourceType",
    "binary_upload_request": "binaryUploadRequest",
  });
});

/** @internal */
export type UploadMultipartRequest$Outbound = {
  resource_type: string;
  binary_upload_request: components.BinaryUploadRequest$Outbound;
};

/** @internal */
export const UploadMultipartRequest$outboundSchema: z.ZodType<
  UploadMultipartRequest$Outbound,
  z.ZodTypeDef,
  UploadMultipartRequest
> = z.object({
  resourceType: UploadMultipartResourceType$outboundSchema,
  binaryUploadRequest: components.BinaryUploadRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    resourceType: "resource_type",
    binaryUploadRequest: "binary_upload_request",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadMultipartRequest$ {
  /** @deprecated use `UploadMultipartRequest$inboundSchema` instead. */
  export const inboundSchema = UploadMultipartRequest$inboundSchema;
  /** @deprecated use `UploadMultipartRequest$outboundSchema` instead. */
  export const outboundSchema = UploadMultipartRequest$outboundSchema;
  /** @deprecated use `UploadMultipartRequest$Outbound` instead. */
  export type Outbound = UploadMultipartRequest$Outbound;
}

export function uploadMultipartRequestToJSON(
  uploadMultipartRequest: UploadMultipartRequest,
): string {
  return JSON.stringify(
    UploadMultipartRequest$outboundSchema.parse(uploadMultipartRequest),
  );
}

export function uploadMultipartRequestFromJSON(
  jsonString: string,
): SafeParseResult<UploadMultipartRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadMultipartRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadMultipartRequest' from JSON`,
  );
}

/** @internal */
export const UploadMultipartResponseBody$inboundSchema: z.ZodType<
  UploadMultipartResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.AsyncUploadResponse$inboundSchema,
  components.UploadResponse$inboundSchema,
]);

/** @internal */
export type UploadMultipartResponseBody$Outbound =
  | components.AsyncUploadResponse$Outbound
  | components.UploadResponse$Outbound;

/** @internal */
export const UploadMultipartResponseBody$outboundSchema: z.ZodType<
  UploadMultipartResponseBody$Outbound,
  z.ZodTypeDef,
  UploadMultipartResponseBody
> = z.union([
  components.AsyncUploadResponse$outboundSchema,
  components.UploadResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadMultipartResponseBody$ {
  /** @deprecated use `UploadMultipartResponseBody$inboundSchema` instead. */
  export const inboundSchema = UploadMultipartResponseBody$inboundSchema;
  /** @deprecated use `UploadMultipartResponseBody$outboundSchema` instead. */
  export const outboundSchema = UploadMultipartResponseBody$outboundSchema;
  /** @deprecated use `UploadMultipartResponseBody$Outbound` instead. */
  export type Outbound = UploadMultipartResponseBody$Outbound;
}

export function uploadMultipartResponseBodyToJSON(
  uploadMultipartResponseBody: UploadMultipartResponseBody,
): string {
  return JSON.stringify(
    UploadMultipartResponseBody$outboundSchema.parse(
      uploadMultipartResponseBody,
    ),
  );
}

export function uploadMultipartResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<UploadMultipartResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadMultipartResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadMultipartResponseBody' from JSON`,
  );
}

/** @internal */
export const UploadMultipartResponse$inboundSchema: z.ZodType<
  UploadMultipartResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.union([
    components.AsyncUploadResponse$inboundSchema,
    components.UploadResponse$inboundSchema,
  ]),
  z.string(),
]);

/** @internal */
export type UploadMultipartResponse$Outbound =
  | components.AsyncUploadResponse$Outbound
  | components.UploadResponse$Outbound
  | string;

/** @internal */
export const UploadMultipartResponse$outboundSchema: z.ZodType<
  UploadMultipartResponse$Outbound,
  z.ZodTypeDef,
  UploadMultipartResponse
> = z.union([
  z.union([
    components.AsyncUploadResponse$outboundSchema,
    components.UploadResponse$outboundSchema,
  ]),
  z.string(),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadMultipartResponse$ {
  /** @deprecated use `UploadMultipartResponse$inboundSchema` instead. */
  export const inboundSchema = UploadMultipartResponse$inboundSchema;
  /** @deprecated use `UploadMultipartResponse$outboundSchema` instead. */
  export const outboundSchema = UploadMultipartResponse$outboundSchema;
  /** @deprecated use `UploadMultipartResponse$Outbound` instead. */
  export type Outbound = UploadMultipartResponse$Outbound;
}

export function uploadMultipartResponseToJSON(
  uploadMultipartResponse: UploadMultipartResponse,
): string {
  return JSON.stringify(
    UploadMultipartResponse$outboundSchema.parse(uploadMultipartResponse),
  );
}

export function uploadMultipartResponseFromJSON(
  jsonString: string,
): SafeParseResult<UploadMultipartResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadMultipartResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadMultipartResponse' from JSON`,
  );
}
