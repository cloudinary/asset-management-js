/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListResourcesByAssetFolderGlobals = {
  /**
   * The cloud name of your product environment.
   */
  cloudName?: string | undefined;
};

/**
 * Filter by resource type within the folder.
 */
export const ListResourcesByAssetFolderResourceType = {
  Image: "image",
  Video: "video",
  Raw: "raw",
} as const;
/**
 * Filter by resource type within the folder.
 */
export type ListResourcesByAssetFolderResourceType = ClosedEnum<
  typeof ListResourcesByAssetFolderResourceType
>;

export type ListResourcesByAssetFolderRequest = {
  /**
   * The full path of the asset folder.
   */
  assetFolder: string;
  /**
   * Filter by resource type within the folder.
   */
  resourceType?: ListResourcesByAssetFolderResourceType | undefined;
  /**
   * Cursor for pagination.
   */
  nextCursor?: string | undefined;
  /**
   * Maximum number of results to return (1-500).
   */
  maxResults?: number | undefined;
  /**
   * Sort direction.
   */
  direction?: components.Direction | undefined;
  fields?: Array<components.FieldsSpec> | undefined;
};

/** @internal */
export const ListResourcesByAssetFolderGlobals$inboundSchema: z.ZodType<
  ListResourcesByAssetFolderGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  cloud_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "cloud_name": "cloudName",
  });
});

/** @internal */
export type ListResourcesByAssetFolderGlobals$Outbound = {
  cloud_name?: string | undefined;
};

/** @internal */
export const ListResourcesByAssetFolderGlobals$outboundSchema: z.ZodType<
  ListResourcesByAssetFolderGlobals$Outbound,
  z.ZodTypeDef,
  ListResourcesByAssetFolderGlobals
> = z.object({
  cloudName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    cloudName: "cloud_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListResourcesByAssetFolderGlobals$ {
  /** @deprecated use `ListResourcesByAssetFolderGlobals$inboundSchema` instead. */
  export const inboundSchema = ListResourcesByAssetFolderGlobals$inboundSchema;
  /** @deprecated use `ListResourcesByAssetFolderGlobals$outboundSchema` instead. */
  export const outboundSchema =
    ListResourcesByAssetFolderGlobals$outboundSchema;
  /** @deprecated use `ListResourcesByAssetFolderGlobals$Outbound` instead. */
  export type Outbound = ListResourcesByAssetFolderGlobals$Outbound;
}

export function listResourcesByAssetFolderGlobalsToJSON(
  listResourcesByAssetFolderGlobals: ListResourcesByAssetFolderGlobals,
): string {
  return JSON.stringify(
    ListResourcesByAssetFolderGlobals$outboundSchema.parse(
      listResourcesByAssetFolderGlobals,
    ),
  );
}

export function listResourcesByAssetFolderGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ListResourcesByAssetFolderGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListResourcesByAssetFolderGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListResourcesByAssetFolderGlobals' from JSON`,
  );
}

/** @internal */
export const ListResourcesByAssetFolderResourceType$inboundSchema:
  z.ZodNativeEnum<typeof ListResourcesByAssetFolderResourceType> = z.nativeEnum(
    ListResourcesByAssetFolderResourceType,
  );

/** @internal */
export const ListResourcesByAssetFolderResourceType$outboundSchema:
  z.ZodNativeEnum<typeof ListResourcesByAssetFolderResourceType> =
    ListResourcesByAssetFolderResourceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListResourcesByAssetFolderResourceType$ {
  /** @deprecated use `ListResourcesByAssetFolderResourceType$inboundSchema` instead. */
  export const inboundSchema =
    ListResourcesByAssetFolderResourceType$inboundSchema;
  /** @deprecated use `ListResourcesByAssetFolderResourceType$outboundSchema` instead. */
  export const outboundSchema =
    ListResourcesByAssetFolderResourceType$outboundSchema;
}

/** @internal */
export const ListResourcesByAssetFolderRequest$inboundSchema: z.ZodType<
  ListResourcesByAssetFolderRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  asset_folder: z.string(),
  resource_type: ListResourcesByAssetFolderResourceType$inboundSchema
    .optional(),
  next_cursor: z.string().optional(),
  max_results: z.number().int().optional(),
  direction: components.Direction$inboundSchema.optional(),
  fields: z.array(components.FieldsSpec$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "asset_folder": "assetFolder",
    "resource_type": "resourceType",
    "next_cursor": "nextCursor",
    "max_results": "maxResults",
  });
});

/** @internal */
export type ListResourcesByAssetFolderRequest$Outbound = {
  asset_folder: string;
  resource_type?: string | undefined;
  next_cursor?: string | undefined;
  max_results?: number | undefined;
  direction?: string | undefined;
  fields?: Array<string> | undefined;
};

/** @internal */
export const ListResourcesByAssetFolderRequest$outboundSchema: z.ZodType<
  ListResourcesByAssetFolderRequest$Outbound,
  z.ZodTypeDef,
  ListResourcesByAssetFolderRequest
> = z.object({
  assetFolder: z.string(),
  resourceType: ListResourcesByAssetFolderResourceType$outboundSchema
    .optional(),
  nextCursor: z.string().optional(),
  maxResults: z.number().int().optional(),
  direction: components.Direction$outboundSchema.optional(),
  fields: z.array(components.FieldsSpec$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    assetFolder: "asset_folder",
    resourceType: "resource_type",
    nextCursor: "next_cursor",
    maxResults: "max_results",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListResourcesByAssetFolderRequest$ {
  /** @deprecated use `ListResourcesByAssetFolderRequest$inboundSchema` instead. */
  export const inboundSchema = ListResourcesByAssetFolderRequest$inboundSchema;
  /** @deprecated use `ListResourcesByAssetFolderRequest$outboundSchema` instead. */
  export const outboundSchema =
    ListResourcesByAssetFolderRequest$outboundSchema;
  /** @deprecated use `ListResourcesByAssetFolderRequest$Outbound` instead. */
  export type Outbound = ListResourcesByAssetFolderRequest$Outbound;
}

export function listResourcesByAssetFolderRequestToJSON(
  listResourcesByAssetFolderRequest: ListResourcesByAssetFolderRequest,
): string {
  return JSON.stringify(
    ListResourcesByAssetFolderRequest$outboundSchema.parse(
      listResourcesByAssetFolderRequest,
    ),
  );
}

export function listResourcesByAssetFolderRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListResourcesByAssetFolderRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListResourcesByAssetFolderRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListResourcesByAssetFolderRequest' from JSON`,
  );
}
