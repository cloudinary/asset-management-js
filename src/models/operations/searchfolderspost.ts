/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SearchFoldersPostGlobals = {
  /**
   * The cloud name of your product environment.
   */
  cloudName?: string | undefined;
};

export type SearchFoldersPostRequest = {
  /**
   * The (Lucene-like) string expression specifying the search query.
   */
  expression?: string | undefined;
  /**
   * An array of key-value pairs for sorting. Each value is a key and direction (asc/desc).
   */
  sortBy?: Array<string> | undefined;
  /**
   * Maximum number of folders to return (max 500, default 50).
   */
  maxResults?: number | undefined;
  /**
   * When more results are available, use the next_cursor value from the previous response.
   */
  nextCursor?: string | undefined;
};

/** @internal */
export const SearchFoldersPostGlobals$inboundSchema: z.ZodType<
  SearchFoldersPostGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  cloud_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "cloud_name": "cloudName",
  });
});

/** @internal */
export type SearchFoldersPostGlobals$Outbound = {
  cloud_name?: string | undefined;
};

/** @internal */
export const SearchFoldersPostGlobals$outboundSchema: z.ZodType<
  SearchFoldersPostGlobals$Outbound,
  z.ZodTypeDef,
  SearchFoldersPostGlobals
> = z.object({
  cloudName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    cloudName: "cloud_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchFoldersPostGlobals$ {
  /** @deprecated use `SearchFoldersPostGlobals$inboundSchema` instead. */
  export const inboundSchema = SearchFoldersPostGlobals$inboundSchema;
  /** @deprecated use `SearchFoldersPostGlobals$outboundSchema` instead. */
  export const outboundSchema = SearchFoldersPostGlobals$outboundSchema;
  /** @deprecated use `SearchFoldersPostGlobals$Outbound` instead. */
  export type Outbound = SearchFoldersPostGlobals$Outbound;
}

export function searchFoldersPostGlobalsToJSON(
  searchFoldersPostGlobals: SearchFoldersPostGlobals,
): string {
  return JSON.stringify(
    SearchFoldersPostGlobals$outboundSchema.parse(searchFoldersPostGlobals),
  );
}

export function searchFoldersPostGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<SearchFoldersPostGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchFoldersPostGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchFoldersPostGlobals' from JSON`,
  );
}

/** @internal */
export const SearchFoldersPostRequest$inboundSchema: z.ZodType<
  SearchFoldersPostRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  expression: z.string().optional(),
  sort_by: z.array(z.string()).optional(),
  max_results: z.number().int().default(50),
  next_cursor: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "sort_by": "sortBy",
    "max_results": "maxResults",
    "next_cursor": "nextCursor",
  });
});

/** @internal */
export type SearchFoldersPostRequest$Outbound = {
  expression?: string | undefined;
  sort_by?: Array<string> | undefined;
  max_results: number;
  next_cursor?: string | undefined;
};

/** @internal */
export const SearchFoldersPostRequest$outboundSchema: z.ZodType<
  SearchFoldersPostRequest$Outbound,
  z.ZodTypeDef,
  SearchFoldersPostRequest
> = z.object({
  expression: z.string().optional(),
  sortBy: z.array(z.string()).optional(),
  maxResults: z.number().int().default(50),
  nextCursor: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    sortBy: "sort_by",
    maxResults: "max_results",
    nextCursor: "next_cursor",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchFoldersPostRequest$ {
  /** @deprecated use `SearchFoldersPostRequest$inboundSchema` instead. */
  export const inboundSchema = SearchFoldersPostRequest$inboundSchema;
  /** @deprecated use `SearchFoldersPostRequest$outboundSchema` instead. */
  export const outboundSchema = SearchFoldersPostRequest$outboundSchema;
  /** @deprecated use `SearchFoldersPostRequest$Outbound` instead. */
  export type Outbound = SearchFoldersPostRequest$Outbound;
}

export function searchFoldersPostRequestToJSON(
  searchFoldersPostRequest: SearchFoldersPostRequest,
): string {
  return JSON.stringify(
    SearchFoldersPostRequest$outboundSchema.parse(searchFoldersPostRequest),
  );
}

export function searchFoldersPostRequestFromJSON(
  jsonString: string,
): SafeParseResult<SearchFoldersPostRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchFoldersPostRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchFoldersPostRequest' from JSON`,
  );
}
