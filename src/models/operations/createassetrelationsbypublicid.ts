/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateAssetRelationsByPublicIdGlobals = {
  /**
   * The cloud name of your product environment.
   */
  cloudName?: string | undefined;
};

/**
 * The delivery type of the asset.
 */
export const CreateAssetRelationsByPublicIdType = {
  Upload: "upload",
  Private: "private",
  Authenticated: "authenticated",
} as const;
/**
 * The delivery type of the asset.
 */
export type CreateAssetRelationsByPublicIdType = ClosedEnum<
  typeof CreateAssetRelationsByPublicIdType
>;

export type CreateAssetRelationsByPublicIdRequestBody = {
  /**
   * Relates the asset to all the other assets specified in this array of up to 10 assets, specified as resource_type/type/public_id.
   */
  assetsToRelate: Array<string>;
};

export type CreateAssetRelationsByPublicIdRequest = {
  /**
   * The type the of asset.
   */
  resourceType: components.ResourceTypeParameter;
  /**
   * The delivery type of the asset.
   */
  type?: CreateAssetRelationsByPublicIdType | undefined;
  /**
   * The public ID of the asset.
   */
  publicId: string;
  requestBody: CreateAssetRelationsByPublicIdRequestBody;
};

/** @internal */
export const CreateAssetRelationsByPublicIdGlobals$inboundSchema: z.ZodType<
  CreateAssetRelationsByPublicIdGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  cloud_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "cloud_name": "cloudName",
  });
});

/** @internal */
export type CreateAssetRelationsByPublicIdGlobals$Outbound = {
  cloud_name?: string | undefined;
};

/** @internal */
export const CreateAssetRelationsByPublicIdGlobals$outboundSchema: z.ZodType<
  CreateAssetRelationsByPublicIdGlobals$Outbound,
  z.ZodTypeDef,
  CreateAssetRelationsByPublicIdGlobals
> = z.object({
  cloudName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    cloudName: "cloud_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssetRelationsByPublicIdGlobals$ {
  /** @deprecated use `CreateAssetRelationsByPublicIdGlobals$inboundSchema` instead. */
  export const inboundSchema =
    CreateAssetRelationsByPublicIdGlobals$inboundSchema;
  /** @deprecated use `CreateAssetRelationsByPublicIdGlobals$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssetRelationsByPublicIdGlobals$outboundSchema;
  /** @deprecated use `CreateAssetRelationsByPublicIdGlobals$Outbound` instead. */
  export type Outbound = CreateAssetRelationsByPublicIdGlobals$Outbound;
}

export function createAssetRelationsByPublicIdGlobalsToJSON(
  createAssetRelationsByPublicIdGlobals: CreateAssetRelationsByPublicIdGlobals,
): string {
  return JSON.stringify(
    CreateAssetRelationsByPublicIdGlobals$outboundSchema.parse(
      createAssetRelationsByPublicIdGlobals,
    ),
  );
}

export function createAssetRelationsByPublicIdGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<CreateAssetRelationsByPublicIdGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateAssetRelationsByPublicIdGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAssetRelationsByPublicIdGlobals' from JSON`,
  );
}

/** @internal */
export const CreateAssetRelationsByPublicIdType$inboundSchema: z.ZodNativeEnum<
  typeof CreateAssetRelationsByPublicIdType
> = z.nativeEnum(CreateAssetRelationsByPublicIdType);

/** @internal */
export const CreateAssetRelationsByPublicIdType$outboundSchema: z.ZodNativeEnum<
  typeof CreateAssetRelationsByPublicIdType
> = CreateAssetRelationsByPublicIdType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssetRelationsByPublicIdType$ {
  /** @deprecated use `CreateAssetRelationsByPublicIdType$inboundSchema` instead. */
  export const inboundSchema = CreateAssetRelationsByPublicIdType$inboundSchema;
  /** @deprecated use `CreateAssetRelationsByPublicIdType$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssetRelationsByPublicIdType$outboundSchema;
}

/** @internal */
export const CreateAssetRelationsByPublicIdRequestBody$inboundSchema: z.ZodType<
  CreateAssetRelationsByPublicIdRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  assets_to_relate: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    "assets_to_relate": "assetsToRelate",
  });
});

/** @internal */
export type CreateAssetRelationsByPublicIdRequestBody$Outbound = {
  assets_to_relate: Array<string>;
};

/** @internal */
export const CreateAssetRelationsByPublicIdRequestBody$outboundSchema:
  z.ZodType<
    CreateAssetRelationsByPublicIdRequestBody$Outbound,
    z.ZodTypeDef,
    CreateAssetRelationsByPublicIdRequestBody
  > = z.object({
    assetsToRelate: z.array(z.string()),
  }).transform((v) => {
    return remap$(v, {
      assetsToRelate: "assets_to_relate",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssetRelationsByPublicIdRequestBody$ {
  /** @deprecated use `CreateAssetRelationsByPublicIdRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    CreateAssetRelationsByPublicIdRequestBody$inboundSchema;
  /** @deprecated use `CreateAssetRelationsByPublicIdRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssetRelationsByPublicIdRequestBody$outboundSchema;
  /** @deprecated use `CreateAssetRelationsByPublicIdRequestBody$Outbound` instead. */
  export type Outbound = CreateAssetRelationsByPublicIdRequestBody$Outbound;
}

export function createAssetRelationsByPublicIdRequestBodyToJSON(
  createAssetRelationsByPublicIdRequestBody:
    CreateAssetRelationsByPublicIdRequestBody,
): string {
  return JSON.stringify(
    CreateAssetRelationsByPublicIdRequestBody$outboundSchema.parse(
      createAssetRelationsByPublicIdRequestBody,
    ),
  );
}

export function createAssetRelationsByPublicIdRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateAssetRelationsByPublicIdRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateAssetRelationsByPublicIdRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateAssetRelationsByPublicIdRequestBody' from JSON`,
  );
}

/** @internal */
export const CreateAssetRelationsByPublicIdRequest$inboundSchema: z.ZodType<
  CreateAssetRelationsByPublicIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource_type: components.ResourceTypeParameter$inboundSchema,
  type: CreateAssetRelationsByPublicIdType$inboundSchema.default("upload"),
  public_id: z.string(),
  RequestBody: z.lazy(() =>
    CreateAssetRelationsByPublicIdRequestBody$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "resource_type": "resourceType",
    "public_id": "publicId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type CreateAssetRelationsByPublicIdRequest$Outbound = {
  resource_type: string;
  type: string;
  public_id: string;
  RequestBody: CreateAssetRelationsByPublicIdRequestBody$Outbound;
};

/** @internal */
export const CreateAssetRelationsByPublicIdRequest$outboundSchema: z.ZodType<
  CreateAssetRelationsByPublicIdRequest$Outbound,
  z.ZodTypeDef,
  CreateAssetRelationsByPublicIdRequest
> = z.object({
  resourceType: components.ResourceTypeParameter$outboundSchema,
  type: CreateAssetRelationsByPublicIdType$outboundSchema.default("upload"),
  publicId: z.string(),
  requestBody: z.lazy(() =>
    CreateAssetRelationsByPublicIdRequestBody$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    resourceType: "resource_type",
    publicId: "public_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssetRelationsByPublicIdRequest$ {
  /** @deprecated use `CreateAssetRelationsByPublicIdRequest$inboundSchema` instead. */
  export const inboundSchema =
    CreateAssetRelationsByPublicIdRequest$inboundSchema;
  /** @deprecated use `CreateAssetRelationsByPublicIdRequest$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssetRelationsByPublicIdRequest$outboundSchema;
  /** @deprecated use `CreateAssetRelationsByPublicIdRequest$Outbound` instead. */
  export type Outbound = CreateAssetRelationsByPublicIdRequest$Outbound;
}

export function createAssetRelationsByPublicIdRequestToJSON(
  createAssetRelationsByPublicIdRequest: CreateAssetRelationsByPublicIdRequest,
): string {
  return JSON.stringify(
    CreateAssetRelationsByPublicIdRequest$outboundSchema.parse(
      createAssetRelationsByPublicIdRequest,
    ),
  );
}

export function createAssetRelationsByPublicIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateAssetRelationsByPublicIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateAssetRelationsByPublicIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAssetRelationsByPublicIdRequest' from JSON`,
  );
}
