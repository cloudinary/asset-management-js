/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListRawFilesGlobals = {
  /**
   * The cloud name of your product environment.
   */
  cloudName?: string | undefined;
};

/**
 * The delivery type. Necessary for prefix filtering.
 */
export const ListRawFilesType = {
  Upload: "upload",
  Private: "private",
  Authenticated: "authenticated",
  List: "list",
} as const;
/**
 * The delivery type. Necessary for prefix filtering.
 */
export type ListRawFilesType = ClosedEnum<typeof ListRawFilesType>;

export type ListRawFilesRequest = {
  /**
   * The delivery type. Necessary for prefix filtering.
   */
  type?: ListRawFilesType | undefined;
  /**
   * A public_id prefix. When specified, all assets with that prefix are returned. When using this, the `type` parameter must also be specified.
   */
  prefix?: string | undefined;
  /**
   * An array of public IDs to return.
   */
  publicIds?: Array<string> | undefined;
  /**
   * Whether to include the list of tag names assigned to each asset. Default: false
   */
  tags?: boolean | undefined;
  /**
   * Cursor for pagination.
   */
  nextCursor?: string | undefined;
  /**
   * Maximum number of results to return (1-500).
   */
  maxResults?: number | undefined;
  /**
   * Sort direction.
   */
  direction?: components.Direction | undefined;
  /**
   * An ISO-8601 formatted timestamp. When specified, assets created since that timestamp are returned.  Supported only if neither `prefix` nor `public_ids` were passed.
   */
  startAt?: Date | undefined;
  fields?: Array<components.FieldsSpec> | undefined;
};

/** @internal */
export const ListRawFilesGlobals$inboundSchema: z.ZodType<
  ListRawFilesGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  cloud_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "cloud_name": "cloudName",
  });
});

/** @internal */
export type ListRawFilesGlobals$Outbound = {
  cloud_name?: string | undefined;
};

/** @internal */
export const ListRawFilesGlobals$outboundSchema: z.ZodType<
  ListRawFilesGlobals$Outbound,
  z.ZodTypeDef,
  ListRawFilesGlobals
> = z.object({
  cloudName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    cloudName: "cloud_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListRawFilesGlobals$ {
  /** @deprecated use `ListRawFilesGlobals$inboundSchema` instead. */
  export const inboundSchema = ListRawFilesGlobals$inboundSchema;
  /** @deprecated use `ListRawFilesGlobals$outboundSchema` instead. */
  export const outboundSchema = ListRawFilesGlobals$outboundSchema;
  /** @deprecated use `ListRawFilesGlobals$Outbound` instead. */
  export type Outbound = ListRawFilesGlobals$Outbound;
}

export function listRawFilesGlobalsToJSON(
  listRawFilesGlobals: ListRawFilesGlobals,
): string {
  return JSON.stringify(
    ListRawFilesGlobals$outboundSchema.parse(listRawFilesGlobals),
  );
}

export function listRawFilesGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ListRawFilesGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListRawFilesGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListRawFilesGlobals' from JSON`,
  );
}

/** @internal */
export const ListRawFilesType$inboundSchema: z.ZodNativeEnum<
  typeof ListRawFilesType
> = z.nativeEnum(ListRawFilesType);

/** @internal */
export const ListRawFilesType$outboundSchema: z.ZodNativeEnum<
  typeof ListRawFilesType
> = ListRawFilesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListRawFilesType$ {
  /** @deprecated use `ListRawFilesType$inboundSchema` instead. */
  export const inboundSchema = ListRawFilesType$inboundSchema;
  /** @deprecated use `ListRawFilesType$outboundSchema` instead. */
  export const outboundSchema = ListRawFilesType$outboundSchema;
}

/** @internal */
export const ListRawFilesRequest$inboundSchema: z.ZodType<
  ListRawFilesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ListRawFilesType$inboundSchema.optional(),
  prefix: z.string().optional(),
  public_ids: z.array(z.string()).optional(),
  tags: z.boolean().optional(),
  next_cursor: z.string().optional(),
  max_results: z.number().int().optional(),
  direction: components.Direction$inboundSchema.optional(),
  start_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  fields: z.array(components.FieldsSpec$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "public_ids": "publicIds",
    "next_cursor": "nextCursor",
    "max_results": "maxResults",
    "start_at": "startAt",
  });
});

/** @internal */
export type ListRawFilesRequest$Outbound = {
  type?: string | undefined;
  prefix?: string | undefined;
  public_ids?: Array<string> | undefined;
  tags?: boolean | undefined;
  next_cursor?: string | undefined;
  max_results?: number | undefined;
  direction?: string | undefined;
  start_at?: string | undefined;
  fields?: Array<string> | undefined;
};

/** @internal */
export const ListRawFilesRequest$outboundSchema: z.ZodType<
  ListRawFilesRequest$Outbound,
  z.ZodTypeDef,
  ListRawFilesRequest
> = z.object({
  type: ListRawFilesType$outboundSchema.optional(),
  prefix: z.string().optional(),
  publicIds: z.array(z.string()).optional(),
  tags: z.boolean().optional(),
  nextCursor: z.string().optional(),
  maxResults: z.number().int().optional(),
  direction: components.Direction$outboundSchema.optional(),
  startAt: z.date().transform(v => v.toISOString()).optional(),
  fields: z.array(components.FieldsSpec$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    publicIds: "public_ids",
    nextCursor: "next_cursor",
    maxResults: "max_results",
    startAt: "start_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListRawFilesRequest$ {
  /** @deprecated use `ListRawFilesRequest$inboundSchema` instead. */
  export const inboundSchema = ListRawFilesRequest$inboundSchema;
  /** @deprecated use `ListRawFilesRequest$outboundSchema` instead. */
  export const outboundSchema = ListRawFilesRequest$outboundSchema;
  /** @deprecated use `ListRawFilesRequest$Outbound` instead. */
  export type Outbound = ListRawFilesRequest$Outbound;
}

export function listRawFilesRequestToJSON(
  listRawFilesRequest: ListRawFilesRequest,
): string {
  return JSON.stringify(
    ListRawFilesRequest$outboundSchema.parse(listRawFilesRequest),
  );
}

export function listRawFilesRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListRawFilesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListRawFilesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListRawFilesRequest' from JSON`,
  );
}
