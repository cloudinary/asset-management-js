/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListResourceTagsGlobals = {
  /**
   * The cloud name of your product environment.
   */
  cloudName?: string | undefined;
};

export type ListResourceTagsRequest = {
  /**
   * The type the of asset.
   */
  resourceType: components.ResourceTypeParameter;
  /**
   * The prefix to use if you want to limit the returned tags to those that start with the specified prefix.
   */
  prefix?: string | undefined;
  /**
   * Cursor for pagination.
   */
  nextCursor?: string | undefined;
  /**
   * Maximum number of results to return (1-500).
   */
  maxResults?: number | undefined;
};

/**
 * List of tags retrieved
 */
export type ListResourceTagsResponse = {
  tags?: Array<string> | undefined;
  nextCursor?: string | null | undefined;
};

/** @internal */
export const ListResourceTagsGlobals$inboundSchema: z.ZodType<
  ListResourceTagsGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  cloud_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "cloud_name": "cloudName",
  });
});

/** @internal */
export type ListResourceTagsGlobals$Outbound = {
  cloud_name?: string | undefined;
};

/** @internal */
export const ListResourceTagsGlobals$outboundSchema: z.ZodType<
  ListResourceTagsGlobals$Outbound,
  z.ZodTypeDef,
  ListResourceTagsGlobals
> = z.object({
  cloudName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    cloudName: "cloud_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListResourceTagsGlobals$ {
  /** @deprecated use `ListResourceTagsGlobals$inboundSchema` instead. */
  export const inboundSchema = ListResourceTagsGlobals$inboundSchema;
  /** @deprecated use `ListResourceTagsGlobals$outboundSchema` instead. */
  export const outboundSchema = ListResourceTagsGlobals$outboundSchema;
  /** @deprecated use `ListResourceTagsGlobals$Outbound` instead. */
  export type Outbound = ListResourceTagsGlobals$Outbound;
}

export function listResourceTagsGlobalsToJSON(
  listResourceTagsGlobals: ListResourceTagsGlobals,
): string {
  return JSON.stringify(
    ListResourceTagsGlobals$outboundSchema.parse(listResourceTagsGlobals),
  );
}

export function listResourceTagsGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ListResourceTagsGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListResourceTagsGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListResourceTagsGlobals' from JSON`,
  );
}

/** @internal */
export const ListResourceTagsRequest$inboundSchema: z.ZodType<
  ListResourceTagsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource_type: components.ResourceTypeParameter$inboundSchema,
  prefix: z.string().optional(),
  next_cursor: z.string().optional(),
  max_results: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "resource_type": "resourceType",
    "next_cursor": "nextCursor",
    "max_results": "maxResults",
  });
});

/** @internal */
export type ListResourceTagsRequest$Outbound = {
  resource_type: string;
  prefix?: string | undefined;
  next_cursor?: string | undefined;
  max_results?: number | undefined;
};

/** @internal */
export const ListResourceTagsRequest$outboundSchema: z.ZodType<
  ListResourceTagsRequest$Outbound,
  z.ZodTypeDef,
  ListResourceTagsRequest
> = z.object({
  resourceType: components.ResourceTypeParameter$outboundSchema,
  prefix: z.string().optional(),
  nextCursor: z.string().optional(),
  maxResults: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    resourceType: "resource_type",
    nextCursor: "next_cursor",
    maxResults: "max_results",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListResourceTagsRequest$ {
  /** @deprecated use `ListResourceTagsRequest$inboundSchema` instead. */
  export const inboundSchema = ListResourceTagsRequest$inboundSchema;
  /** @deprecated use `ListResourceTagsRequest$outboundSchema` instead. */
  export const outboundSchema = ListResourceTagsRequest$outboundSchema;
  /** @deprecated use `ListResourceTagsRequest$Outbound` instead. */
  export type Outbound = ListResourceTagsRequest$Outbound;
}

export function listResourceTagsRequestToJSON(
  listResourceTagsRequest: ListResourceTagsRequest,
): string {
  return JSON.stringify(
    ListResourceTagsRequest$outboundSchema.parse(listResourceTagsRequest),
  );
}

export function listResourceTagsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListResourceTagsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListResourceTagsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListResourceTagsRequest' from JSON`,
  );
}

/** @internal */
export const ListResourceTagsResponse$inboundSchema: z.ZodType<
  ListResourceTagsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  tags: z.array(z.string()).optional(),
  next_cursor: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "next_cursor": "nextCursor",
  });
});

/** @internal */
export type ListResourceTagsResponse$Outbound = {
  tags?: Array<string> | undefined;
  next_cursor?: string | null | undefined;
};

/** @internal */
export const ListResourceTagsResponse$outboundSchema: z.ZodType<
  ListResourceTagsResponse$Outbound,
  z.ZodTypeDef,
  ListResourceTagsResponse
> = z.object({
  tags: z.array(z.string()).optional(),
  nextCursor: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    nextCursor: "next_cursor",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListResourceTagsResponse$ {
  /** @deprecated use `ListResourceTagsResponse$inboundSchema` instead. */
  export const inboundSchema = ListResourceTagsResponse$inboundSchema;
  /** @deprecated use `ListResourceTagsResponse$outboundSchema` instead. */
  export const outboundSchema = ListResourceTagsResponse$outboundSchema;
  /** @deprecated use `ListResourceTagsResponse$Outbound` instead. */
  export type Outbound = ListResourceTagsResponse$Outbound;
}

export function listResourceTagsResponseToJSON(
  listResourceTagsResponse: ListResourceTagsResponse,
): string {
  return JSON.stringify(
    ListResourceTagsResponse$outboundSchema.parse(listResourceTagsResponse),
  );
}

export function listResourceTagsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListResourceTagsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListResourceTagsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListResourceTagsResponse' from JSON`,
  );
}
