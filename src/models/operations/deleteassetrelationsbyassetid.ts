/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteAssetRelationsByAssetIdGlobals = {
  /**
   * The cloud name of your product environment.
   */
  cloudName?: string | undefined;
};

export type DeleteAssetRelationsByAssetIdRequestBody = {
  /**
   * Unrelates the asset from all the assets specified in this array of assets, specified by their asset IDs.
   */
  assetsToUnrelate: Array<string>;
};

export type DeleteAssetRelationsByAssetIdRequest = {
  /**
   * The asset ID of the asset to update.
   */
  assetId: string;
  requestBody: DeleteAssetRelationsByAssetIdRequestBody;
};

/** @internal */
export const DeleteAssetRelationsByAssetIdGlobals$inboundSchema: z.ZodType<
  DeleteAssetRelationsByAssetIdGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  cloud_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "cloud_name": "cloudName",
  });
});

/** @internal */
export type DeleteAssetRelationsByAssetIdGlobals$Outbound = {
  cloud_name?: string | undefined;
};

/** @internal */
export const DeleteAssetRelationsByAssetIdGlobals$outboundSchema: z.ZodType<
  DeleteAssetRelationsByAssetIdGlobals$Outbound,
  z.ZodTypeDef,
  DeleteAssetRelationsByAssetIdGlobals
> = z.object({
  cloudName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    cloudName: "cloud_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteAssetRelationsByAssetIdGlobals$ {
  /** @deprecated use `DeleteAssetRelationsByAssetIdGlobals$inboundSchema` instead. */
  export const inboundSchema =
    DeleteAssetRelationsByAssetIdGlobals$inboundSchema;
  /** @deprecated use `DeleteAssetRelationsByAssetIdGlobals$outboundSchema` instead. */
  export const outboundSchema =
    DeleteAssetRelationsByAssetIdGlobals$outboundSchema;
  /** @deprecated use `DeleteAssetRelationsByAssetIdGlobals$Outbound` instead. */
  export type Outbound = DeleteAssetRelationsByAssetIdGlobals$Outbound;
}

export function deleteAssetRelationsByAssetIdGlobalsToJSON(
  deleteAssetRelationsByAssetIdGlobals: DeleteAssetRelationsByAssetIdGlobals,
): string {
  return JSON.stringify(
    DeleteAssetRelationsByAssetIdGlobals$outboundSchema.parse(
      deleteAssetRelationsByAssetIdGlobals,
    ),
  );
}

export function deleteAssetRelationsByAssetIdGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<DeleteAssetRelationsByAssetIdGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeleteAssetRelationsByAssetIdGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteAssetRelationsByAssetIdGlobals' from JSON`,
  );
}

/** @internal */
export const DeleteAssetRelationsByAssetIdRequestBody$inboundSchema: z.ZodType<
  DeleteAssetRelationsByAssetIdRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  assets_to_unrelate: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    "assets_to_unrelate": "assetsToUnrelate",
  });
});

/** @internal */
export type DeleteAssetRelationsByAssetIdRequestBody$Outbound = {
  assets_to_unrelate: Array<string>;
};

/** @internal */
export const DeleteAssetRelationsByAssetIdRequestBody$outboundSchema: z.ZodType<
  DeleteAssetRelationsByAssetIdRequestBody$Outbound,
  z.ZodTypeDef,
  DeleteAssetRelationsByAssetIdRequestBody
> = z.object({
  assetsToUnrelate: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    assetsToUnrelate: "assets_to_unrelate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteAssetRelationsByAssetIdRequestBody$ {
  /** @deprecated use `DeleteAssetRelationsByAssetIdRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    DeleteAssetRelationsByAssetIdRequestBody$inboundSchema;
  /** @deprecated use `DeleteAssetRelationsByAssetIdRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    DeleteAssetRelationsByAssetIdRequestBody$outboundSchema;
  /** @deprecated use `DeleteAssetRelationsByAssetIdRequestBody$Outbound` instead. */
  export type Outbound = DeleteAssetRelationsByAssetIdRequestBody$Outbound;
}

export function deleteAssetRelationsByAssetIdRequestBodyToJSON(
  deleteAssetRelationsByAssetIdRequestBody:
    DeleteAssetRelationsByAssetIdRequestBody,
): string {
  return JSON.stringify(
    DeleteAssetRelationsByAssetIdRequestBody$outboundSchema.parse(
      deleteAssetRelationsByAssetIdRequestBody,
    ),
  );
}

export function deleteAssetRelationsByAssetIdRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  DeleteAssetRelationsByAssetIdRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeleteAssetRelationsByAssetIdRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeleteAssetRelationsByAssetIdRequestBody' from JSON`,
  );
}

/** @internal */
export const DeleteAssetRelationsByAssetIdRequest$inboundSchema: z.ZodType<
  DeleteAssetRelationsByAssetIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  asset_id: z.string(),
  RequestBody: z.lazy(() =>
    DeleteAssetRelationsByAssetIdRequestBody$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "asset_id": "assetId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type DeleteAssetRelationsByAssetIdRequest$Outbound = {
  asset_id: string;
  RequestBody: DeleteAssetRelationsByAssetIdRequestBody$Outbound;
};

/** @internal */
export const DeleteAssetRelationsByAssetIdRequest$outboundSchema: z.ZodType<
  DeleteAssetRelationsByAssetIdRequest$Outbound,
  z.ZodTypeDef,
  DeleteAssetRelationsByAssetIdRequest
> = z.object({
  assetId: z.string(),
  requestBody: z.lazy(() =>
    DeleteAssetRelationsByAssetIdRequestBody$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    assetId: "asset_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteAssetRelationsByAssetIdRequest$ {
  /** @deprecated use `DeleteAssetRelationsByAssetIdRequest$inboundSchema` instead. */
  export const inboundSchema =
    DeleteAssetRelationsByAssetIdRequest$inboundSchema;
  /** @deprecated use `DeleteAssetRelationsByAssetIdRequest$outboundSchema` instead. */
  export const outboundSchema =
    DeleteAssetRelationsByAssetIdRequest$outboundSchema;
  /** @deprecated use `DeleteAssetRelationsByAssetIdRequest$Outbound` instead. */
  export type Outbound = DeleteAssetRelationsByAssetIdRequest$Outbound;
}

export function deleteAssetRelationsByAssetIdRequestToJSON(
  deleteAssetRelationsByAssetIdRequest: DeleteAssetRelationsByAssetIdRequest,
): string {
  return JSON.stringify(
    DeleteAssetRelationsByAssetIdRequest$outboundSchema.parse(
      deleteAssetRelationsByAssetIdRequest,
    ),
  );
}

export function deleteAssetRelationsByAssetIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteAssetRelationsByAssetIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeleteAssetRelationsByAssetIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteAssetRelationsByAssetIdRequest' from JSON`,
  );
}
