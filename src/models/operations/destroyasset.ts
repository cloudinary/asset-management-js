/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DestroyAssetGlobals = {
  /**
   * The cloud name of your product environment.
   */
  cloudName?: string | undefined;
};

/**
 * The type of asset/resource to destroy
 */
export const DestroyAssetResourceType = {
  Image: "image",
  Video: "video",
  Raw: "raw",
} as const;
/**
 * The type of asset/resource to destroy
 */
export type DestroyAssetResourceType = ClosedEnum<
  typeof DestroyAssetResourceType
>;

export type DestroyAssetRequest = {
  /**
   * The type of asset/resource to destroy
   */
  resourceType: DestroyAssetResourceType;
  /**
   * The public ID of the asset/resource to destroy
   */
  publicId: string;
  /**
   * Whether to invalidate CDN cached copies of the asset
   */
  invalidate?: boolean | undefined;
};

/**
 * Indicates successful deletion
 */
export const Result = {
  Ok: "ok",
} as const;
/**
 * Indicates successful deletion
 */
export type Result = ClosedEnum<typeof Result>;

/**
 * Asset/resource destroyed successfully
 */
export type DestroyAssetResponse = {
  /**
   * Indicates successful deletion
   */
  result?: Result | undefined;
};

/** @internal */
export const DestroyAssetGlobals$inboundSchema: z.ZodType<
  DestroyAssetGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  cloud_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "cloud_name": "cloudName",
  });
});

/** @internal */
export type DestroyAssetGlobals$Outbound = {
  cloud_name?: string | undefined;
};

/** @internal */
export const DestroyAssetGlobals$outboundSchema: z.ZodType<
  DestroyAssetGlobals$Outbound,
  z.ZodTypeDef,
  DestroyAssetGlobals
> = z.object({
  cloudName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    cloudName: "cloud_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DestroyAssetGlobals$ {
  /** @deprecated use `DestroyAssetGlobals$inboundSchema` instead. */
  export const inboundSchema = DestroyAssetGlobals$inboundSchema;
  /** @deprecated use `DestroyAssetGlobals$outboundSchema` instead. */
  export const outboundSchema = DestroyAssetGlobals$outboundSchema;
  /** @deprecated use `DestroyAssetGlobals$Outbound` instead. */
  export type Outbound = DestroyAssetGlobals$Outbound;
}

export function destroyAssetGlobalsToJSON(
  destroyAssetGlobals: DestroyAssetGlobals,
): string {
  return JSON.stringify(
    DestroyAssetGlobals$outboundSchema.parse(destroyAssetGlobals),
  );
}

export function destroyAssetGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<DestroyAssetGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DestroyAssetGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DestroyAssetGlobals' from JSON`,
  );
}

/** @internal */
export const DestroyAssetResourceType$inboundSchema: z.ZodNativeEnum<
  typeof DestroyAssetResourceType
> = z.nativeEnum(DestroyAssetResourceType);

/** @internal */
export const DestroyAssetResourceType$outboundSchema: z.ZodNativeEnum<
  typeof DestroyAssetResourceType
> = DestroyAssetResourceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DestroyAssetResourceType$ {
  /** @deprecated use `DestroyAssetResourceType$inboundSchema` instead. */
  export const inboundSchema = DestroyAssetResourceType$inboundSchema;
  /** @deprecated use `DestroyAssetResourceType$outboundSchema` instead. */
  export const outboundSchema = DestroyAssetResourceType$outboundSchema;
}

/** @internal */
export const DestroyAssetRequest$inboundSchema: z.ZodType<
  DestroyAssetRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource_type: DestroyAssetResourceType$inboundSchema,
  public_id: z.string(),
  invalidate: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "resource_type": "resourceType",
    "public_id": "publicId",
  });
});

/** @internal */
export type DestroyAssetRequest$Outbound = {
  resource_type: string;
  public_id: string;
  invalidate: boolean;
};

/** @internal */
export const DestroyAssetRequest$outboundSchema: z.ZodType<
  DestroyAssetRequest$Outbound,
  z.ZodTypeDef,
  DestroyAssetRequest
> = z.object({
  resourceType: DestroyAssetResourceType$outboundSchema,
  publicId: z.string(),
  invalidate: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    resourceType: "resource_type",
    publicId: "public_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DestroyAssetRequest$ {
  /** @deprecated use `DestroyAssetRequest$inboundSchema` instead. */
  export const inboundSchema = DestroyAssetRequest$inboundSchema;
  /** @deprecated use `DestroyAssetRequest$outboundSchema` instead. */
  export const outboundSchema = DestroyAssetRequest$outboundSchema;
  /** @deprecated use `DestroyAssetRequest$Outbound` instead. */
  export type Outbound = DestroyAssetRequest$Outbound;
}

export function destroyAssetRequestToJSON(
  destroyAssetRequest: DestroyAssetRequest,
): string {
  return JSON.stringify(
    DestroyAssetRequest$outboundSchema.parse(destroyAssetRequest),
  );
}

export function destroyAssetRequestFromJSON(
  jsonString: string,
): SafeParseResult<DestroyAssetRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DestroyAssetRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DestroyAssetRequest' from JSON`,
  );
}

/** @internal */
export const Result$inboundSchema: z.ZodNativeEnum<typeof Result> = z
  .nativeEnum(Result);

/** @internal */
export const Result$outboundSchema: z.ZodNativeEnum<typeof Result> =
  Result$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Result$ {
  /** @deprecated use `Result$inboundSchema` instead. */
  export const inboundSchema = Result$inboundSchema;
  /** @deprecated use `Result$outboundSchema` instead. */
  export const outboundSchema = Result$outboundSchema;
}

/** @internal */
export const DestroyAssetResponse$inboundSchema: z.ZodType<
  DestroyAssetResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  result: Result$inboundSchema.optional(),
});

/** @internal */
export type DestroyAssetResponse$Outbound = {
  result?: string | undefined;
};

/** @internal */
export const DestroyAssetResponse$outboundSchema: z.ZodType<
  DestroyAssetResponse$Outbound,
  z.ZodTypeDef,
  DestroyAssetResponse
> = z.object({
  result: Result$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DestroyAssetResponse$ {
  /** @deprecated use `DestroyAssetResponse$inboundSchema` instead. */
  export const inboundSchema = DestroyAssetResponse$inboundSchema;
  /** @deprecated use `DestroyAssetResponse$outboundSchema` instead. */
  export const outboundSchema = DestroyAssetResponse$outboundSchema;
  /** @deprecated use `DestroyAssetResponse$Outbound` instead. */
  export type Outbound = DestroyAssetResponse$Outbound;
}

export function destroyAssetResponseToJSON(
  destroyAssetResponse: DestroyAssetResponse,
): string {
  return JSON.stringify(
    DestroyAssetResponse$outboundSchema.parse(destroyAssetResponse),
  );
}

export function destroyAssetResponseFromJSON(
  jsonString: string,
): SafeParseResult<DestroyAssetResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DestroyAssetResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DestroyAssetResponse' from JSON`,
  );
}
