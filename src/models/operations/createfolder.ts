/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateFolderGlobals = {
  /**
   * The cloud name of your product environment.
   */
  cloudName?: string | undefined;
};

export type CreateFolderRequest = {
  folder: string;
};

/**
 * Folder created successfully
 */
export type CreateFolderResponse = {
  /**
   * Whether the operation was successful
   */
  success?: boolean | undefined;
  /**
   * The path of the created folder
   */
  path?: string | undefined;
  /**
   * The name of the created folder
   */
  name?: string | undefined;
};

/** @internal */
export const CreateFolderGlobals$inboundSchema: z.ZodType<
  CreateFolderGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  cloud_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "cloud_name": "cloudName",
  });
});

/** @internal */
export type CreateFolderGlobals$Outbound = {
  cloud_name?: string | undefined;
};

/** @internal */
export const CreateFolderGlobals$outboundSchema: z.ZodType<
  CreateFolderGlobals$Outbound,
  z.ZodTypeDef,
  CreateFolderGlobals
> = z.object({
  cloudName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    cloudName: "cloud_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateFolderGlobals$ {
  /** @deprecated use `CreateFolderGlobals$inboundSchema` instead. */
  export const inboundSchema = CreateFolderGlobals$inboundSchema;
  /** @deprecated use `CreateFolderGlobals$outboundSchema` instead. */
  export const outboundSchema = CreateFolderGlobals$outboundSchema;
  /** @deprecated use `CreateFolderGlobals$Outbound` instead. */
  export type Outbound = CreateFolderGlobals$Outbound;
}

export function createFolderGlobalsToJSON(
  createFolderGlobals: CreateFolderGlobals,
): string {
  return JSON.stringify(
    CreateFolderGlobals$outboundSchema.parse(createFolderGlobals),
  );
}

export function createFolderGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<CreateFolderGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateFolderGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateFolderGlobals' from JSON`,
  );
}

/** @internal */
export const CreateFolderRequest$inboundSchema: z.ZodType<
  CreateFolderRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  folder: z.string(),
});

/** @internal */
export type CreateFolderRequest$Outbound = {
  folder: string;
};

/** @internal */
export const CreateFolderRequest$outboundSchema: z.ZodType<
  CreateFolderRequest$Outbound,
  z.ZodTypeDef,
  CreateFolderRequest
> = z.object({
  folder: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateFolderRequest$ {
  /** @deprecated use `CreateFolderRequest$inboundSchema` instead. */
  export const inboundSchema = CreateFolderRequest$inboundSchema;
  /** @deprecated use `CreateFolderRequest$outboundSchema` instead. */
  export const outboundSchema = CreateFolderRequest$outboundSchema;
  /** @deprecated use `CreateFolderRequest$Outbound` instead. */
  export type Outbound = CreateFolderRequest$Outbound;
}

export function createFolderRequestToJSON(
  createFolderRequest: CreateFolderRequest,
): string {
  return JSON.stringify(
    CreateFolderRequest$outboundSchema.parse(createFolderRequest),
  );
}

export function createFolderRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateFolderRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateFolderRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateFolderRequest' from JSON`,
  );
}

/** @internal */
export const CreateFolderResponse$inboundSchema: z.ZodType<
  CreateFolderResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean().optional(),
  path: z.string().optional(),
  name: z.string().optional(),
});

/** @internal */
export type CreateFolderResponse$Outbound = {
  success?: boolean | undefined;
  path?: string | undefined;
  name?: string | undefined;
};

/** @internal */
export const CreateFolderResponse$outboundSchema: z.ZodType<
  CreateFolderResponse$Outbound,
  z.ZodTypeDef,
  CreateFolderResponse
> = z.object({
  success: z.boolean().optional(),
  path: z.string().optional(),
  name: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateFolderResponse$ {
  /** @deprecated use `CreateFolderResponse$inboundSchema` instead. */
  export const inboundSchema = CreateFolderResponse$inboundSchema;
  /** @deprecated use `CreateFolderResponse$outboundSchema` instead. */
  export const outboundSchema = CreateFolderResponse$outboundSchema;
  /** @deprecated use `CreateFolderResponse$Outbound` instead. */
  export type Outbound = CreateFolderResponse$Outbound;
}

export function createFolderResponseToJSON(
  createFolderResponse: CreateFolderResponse,
): string {
  return JSON.stringify(
    CreateFolderResponse$outboundSchema.parse(createFolderResponse),
  );
}

export function createFolderResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateFolderResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateFolderResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateFolderResponse' from JSON`,
  );
}
