/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateAssetRelationsByAssetIdGlobals = {
  /**
   * The cloud name of your product environment.
   */
  cloudName?: string | undefined;
};

export type CreateAssetRelationsByAssetIdRequestBody = {
  /**
   * Relates the asset to all the assets specified in this array of up to 10 assets, specified by their asset IDs.
   */
  assetsToRelate: Array<string>;
};

export type CreateAssetRelationsByAssetIdRequest = {
  /**
   * The asset ID of the asset to update.
   */
  assetId: string;
  requestBody: CreateAssetRelationsByAssetIdRequestBody;
};

/** @internal */
export const CreateAssetRelationsByAssetIdGlobals$inboundSchema: z.ZodType<
  CreateAssetRelationsByAssetIdGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  cloud_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "cloud_name": "cloudName",
  });
});

/** @internal */
export type CreateAssetRelationsByAssetIdGlobals$Outbound = {
  cloud_name?: string | undefined;
};

/** @internal */
export const CreateAssetRelationsByAssetIdGlobals$outboundSchema: z.ZodType<
  CreateAssetRelationsByAssetIdGlobals$Outbound,
  z.ZodTypeDef,
  CreateAssetRelationsByAssetIdGlobals
> = z.object({
  cloudName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    cloudName: "cloud_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssetRelationsByAssetIdGlobals$ {
  /** @deprecated use `CreateAssetRelationsByAssetIdGlobals$inboundSchema` instead. */
  export const inboundSchema =
    CreateAssetRelationsByAssetIdGlobals$inboundSchema;
  /** @deprecated use `CreateAssetRelationsByAssetIdGlobals$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssetRelationsByAssetIdGlobals$outboundSchema;
  /** @deprecated use `CreateAssetRelationsByAssetIdGlobals$Outbound` instead. */
  export type Outbound = CreateAssetRelationsByAssetIdGlobals$Outbound;
}

export function createAssetRelationsByAssetIdGlobalsToJSON(
  createAssetRelationsByAssetIdGlobals: CreateAssetRelationsByAssetIdGlobals,
): string {
  return JSON.stringify(
    CreateAssetRelationsByAssetIdGlobals$outboundSchema.parse(
      createAssetRelationsByAssetIdGlobals,
    ),
  );
}

export function createAssetRelationsByAssetIdGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<CreateAssetRelationsByAssetIdGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateAssetRelationsByAssetIdGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAssetRelationsByAssetIdGlobals' from JSON`,
  );
}

/** @internal */
export const CreateAssetRelationsByAssetIdRequestBody$inboundSchema: z.ZodType<
  CreateAssetRelationsByAssetIdRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  assets_to_relate: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    "assets_to_relate": "assetsToRelate",
  });
});

/** @internal */
export type CreateAssetRelationsByAssetIdRequestBody$Outbound = {
  assets_to_relate: Array<string>;
};

/** @internal */
export const CreateAssetRelationsByAssetIdRequestBody$outboundSchema: z.ZodType<
  CreateAssetRelationsByAssetIdRequestBody$Outbound,
  z.ZodTypeDef,
  CreateAssetRelationsByAssetIdRequestBody
> = z.object({
  assetsToRelate: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    assetsToRelate: "assets_to_relate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssetRelationsByAssetIdRequestBody$ {
  /** @deprecated use `CreateAssetRelationsByAssetIdRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    CreateAssetRelationsByAssetIdRequestBody$inboundSchema;
  /** @deprecated use `CreateAssetRelationsByAssetIdRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssetRelationsByAssetIdRequestBody$outboundSchema;
  /** @deprecated use `CreateAssetRelationsByAssetIdRequestBody$Outbound` instead. */
  export type Outbound = CreateAssetRelationsByAssetIdRequestBody$Outbound;
}

export function createAssetRelationsByAssetIdRequestBodyToJSON(
  createAssetRelationsByAssetIdRequestBody:
    CreateAssetRelationsByAssetIdRequestBody,
): string {
  return JSON.stringify(
    CreateAssetRelationsByAssetIdRequestBody$outboundSchema.parse(
      createAssetRelationsByAssetIdRequestBody,
    ),
  );
}

export function createAssetRelationsByAssetIdRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateAssetRelationsByAssetIdRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateAssetRelationsByAssetIdRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateAssetRelationsByAssetIdRequestBody' from JSON`,
  );
}

/** @internal */
export const CreateAssetRelationsByAssetIdRequest$inboundSchema: z.ZodType<
  CreateAssetRelationsByAssetIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  asset_id: z.string(),
  RequestBody: z.lazy(() =>
    CreateAssetRelationsByAssetIdRequestBody$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "asset_id": "assetId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type CreateAssetRelationsByAssetIdRequest$Outbound = {
  asset_id: string;
  RequestBody: CreateAssetRelationsByAssetIdRequestBody$Outbound;
};

/** @internal */
export const CreateAssetRelationsByAssetIdRequest$outboundSchema: z.ZodType<
  CreateAssetRelationsByAssetIdRequest$Outbound,
  z.ZodTypeDef,
  CreateAssetRelationsByAssetIdRequest
> = z.object({
  assetId: z.string(),
  requestBody: z.lazy(() =>
    CreateAssetRelationsByAssetIdRequestBody$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    assetId: "asset_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssetRelationsByAssetIdRequest$ {
  /** @deprecated use `CreateAssetRelationsByAssetIdRequest$inboundSchema` instead. */
  export const inboundSchema =
    CreateAssetRelationsByAssetIdRequest$inboundSchema;
  /** @deprecated use `CreateAssetRelationsByAssetIdRequest$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssetRelationsByAssetIdRequest$outboundSchema;
  /** @deprecated use `CreateAssetRelationsByAssetIdRequest$Outbound` instead. */
  export type Outbound = CreateAssetRelationsByAssetIdRequest$Outbound;
}

export function createAssetRelationsByAssetIdRequestToJSON(
  createAssetRelationsByAssetIdRequest: CreateAssetRelationsByAssetIdRequest,
): string {
  return JSON.stringify(
    CreateAssetRelationsByAssetIdRequest$outboundSchema.parse(
      createAssetRelationsByAssetIdRequest,
    ),
  );
}

export function createAssetRelationsByAssetIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateAssetRelationsByAssetIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateAssetRelationsByAssetIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAssetRelationsByAssetIdRequest' from JSON`,
  );
}
