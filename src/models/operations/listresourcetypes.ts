/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListResourceTypesGlobals = {
  /**
   * The cloud name of your product environment.
   */
  cloudName?: string | undefined;
};

export type ListResourceTypesRequest = {};

export type ListResourceTypesError = {
  message: string;
};

export const ListResourceTypesResourceType = {
  Image: "image",
  Raw: "raw",
  Video: "video",
} as const;
export type ListResourceTypesResourceType = ClosedEnum<
  typeof ListResourceTypesResourceType
>;

/**
 * The list of resource types.
 */
export type ListResourceTypesResponse = {
  /**
   * The list of available resource types.
   */
  resourceTypes?: Array<ListResourceTypesResourceType> | undefined;
};

/** @internal */
export const ListResourceTypesGlobals$inboundSchema: z.ZodType<
  ListResourceTypesGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  cloud_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "cloud_name": "cloudName",
  });
});

/** @internal */
export type ListResourceTypesGlobals$Outbound = {
  cloud_name?: string | undefined;
};

/** @internal */
export const ListResourceTypesGlobals$outboundSchema: z.ZodType<
  ListResourceTypesGlobals$Outbound,
  z.ZodTypeDef,
  ListResourceTypesGlobals
> = z.object({
  cloudName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    cloudName: "cloud_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListResourceTypesGlobals$ {
  /** @deprecated use `ListResourceTypesGlobals$inboundSchema` instead. */
  export const inboundSchema = ListResourceTypesGlobals$inboundSchema;
  /** @deprecated use `ListResourceTypesGlobals$outboundSchema` instead. */
  export const outboundSchema = ListResourceTypesGlobals$outboundSchema;
  /** @deprecated use `ListResourceTypesGlobals$Outbound` instead. */
  export type Outbound = ListResourceTypesGlobals$Outbound;
}

export function listResourceTypesGlobalsToJSON(
  listResourceTypesGlobals: ListResourceTypesGlobals,
): string {
  return JSON.stringify(
    ListResourceTypesGlobals$outboundSchema.parse(listResourceTypesGlobals),
  );
}

export function listResourceTypesGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ListResourceTypesGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListResourceTypesGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListResourceTypesGlobals' from JSON`,
  );
}

/** @internal */
export const ListResourceTypesRequest$inboundSchema: z.ZodType<
  ListResourceTypesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ListResourceTypesRequest$Outbound = {};

/** @internal */
export const ListResourceTypesRequest$outboundSchema: z.ZodType<
  ListResourceTypesRequest$Outbound,
  z.ZodTypeDef,
  ListResourceTypesRequest
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListResourceTypesRequest$ {
  /** @deprecated use `ListResourceTypesRequest$inboundSchema` instead. */
  export const inboundSchema = ListResourceTypesRequest$inboundSchema;
  /** @deprecated use `ListResourceTypesRequest$outboundSchema` instead. */
  export const outboundSchema = ListResourceTypesRequest$outboundSchema;
  /** @deprecated use `ListResourceTypesRequest$Outbound` instead. */
  export type Outbound = ListResourceTypesRequest$Outbound;
}

export function listResourceTypesRequestToJSON(
  listResourceTypesRequest: ListResourceTypesRequest,
): string {
  return JSON.stringify(
    ListResourceTypesRequest$outboundSchema.parse(listResourceTypesRequest),
  );
}

export function listResourceTypesRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListResourceTypesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListResourceTypesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListResourceTypesRequest' from JSON`,
  );
}

/** @internal */
export const ListResourceTypesError$inboundSchema: z.ZodType<
  ListResourceTypesError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type ListResourceTypesError$Outbound = {
  message: string;
};

/** @internal */
export const ListResourceTypesError$outboundSchema: z.ZodType<
  ListResourceTypesError$Outbound,
  z.ZodTypeDef,
  ListResourceTypesError
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListResourceTypesError$ {
  /** @deprecated use `ListResourceTypesError$inboundSchema` instead. */
  export const inboundSchema = ListResourceTypesError$inboundSchema;
  /** @deprecated use `ListResourceTypesError$outboundSchema` instead. */
  export const outboundSchema = ListResourceTypesError$outboundSchema;
  /** @deprecated use `ListResourceTypesError$Outbound` instead. */
  export type Outbound = ListResourceTypesError$Outbound;
}

export function listResourceTypesErrorToJSON(
  listResourceTypesError: ListResourceTypesError,
): string {
  return JSON.stringify(
    ListResourceTypesError$outboundSchema.parse(listResourceTypesError),
  );
}

export function listResourceTypesErrorFromJSON(
  jsonString: string,
): SafeParseResult<ListResourceTypesError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListResourceTypesError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListResourceTypesError' from JSON`,
  );
}

/** @internal */
export const ListResourceTypesResourceType$inboundSchema: z.ZodNativeEnum<
  typeof ListResourceTypesResourceType
> = z.nativeEnum(ListResourceTypesResourceType);

/** @internal */
export const ListResourceTypesResourceType$outboundSchema: z.ZodNativeEnum<
  typeof ListResourceTypesResourceType
> = ListResourceTypesResourceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListResourceTypesResourceType$ {
  /** @deprecated use `ListResourceTypesResourceType$inboundSchema` instead. */
  export const inboundSchema = ListResourceTypesResourceType$inboundSchema;
  /** @deprecated use `ListResourceTypesResourceType$outboundSchema` instead. */
  export const outboundSchema = ListResourceTypesResourceType$outboundSchema;
}

/** @internal */
export const ListResourceTypesResponse$inboundSchema: z.ZodType<
  ListResourceTypesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource_types: z.array(ListResourceTypesResourceType$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "resource_types": "resourceTypes",
  });
});

/** @internal */
export type ListResourceTypesResponse$Outbound = {
  resource_types?: Array<string> | undefined;
};

/** @internal */
export const ListResourceTypesResponse$outboundSchema: z.ZodType<
  ListResourceTypesResponse$Outbound,
  z.ZodTypeDef,
  ListResourceTypesResponse
> = z.object({
  resourceTypes: z.array(ListResourceTypesResourceType$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    resourceTypes: "resource_types",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListResourceTypesResponse$ {
  /** @deprecated use `ListResourceTypesResponse$inboundSchema` instead. */
  export const inboundSchema = ListResourceTypesResponse$inboundSchema;
  /** @deprecated use `ListResourceTypesResponse$outboundSchema` instead. */
  export const outboundSchema = ListResourceTypesResponse$outboundSchema;
  /** @deprecated use `ListResourceTypesResponse$Outbound` instead. */
  export type Outbound = ListResourceTypesResponse$Outbound;
}

export function listResourceTypesResponseToJSON(
  listResourceTypesResponse: ListResourceTypesResponse,
): string {
  return JSON.stringify(
    ListResourceTypesResponse$outboundSchema.parse(listResourceTypesResponse),
  );
}

export function listResourceTypesResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListResourceTypesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListResourceTypesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListResourceTypesResponse' from JSON`,
  );
}
