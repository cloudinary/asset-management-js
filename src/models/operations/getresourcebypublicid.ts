/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetResourceByPublicIdGlobals = {
  /**
   * The cloud name of your product environment.
   */
  cloudName?: string | undefined;
};

/**
 * The delivery type of the asset.
 */
export const GetResourceByPublicIdType = {
  Upload: "upload",
  Private: "private",
  Authenticated: "authenticated",
  Fetch: "fetch",
  Facebook: "facebook",
  Twitter: "twitter",
  Gravatar: "gravatar",
  Youtube: "youtube",
  Hulu: "hulu",
  Vimeo: "vimeo",
  Animoto: "animoto",
  Worldstarhiphop: "worldstarhiphop",
  Dailymotion: "dailymotion",
  List: "list",
} as const;
/**
 * The delivery type of the asset.
 */
export type GetResourceByPublicIdType = ClosedEnum<
  typeof GetResourceByPublicIdType
>;

export type GetResourceByPublicIdRequest = {
  /**
   * The type the of asset.
   */
  resourceType: components.ResourceTypeParameter;
  /**
   * The delivery type of the asset.
   */
  type: GetResourceByPublicIdType;
  /**
   * The public ID of the asset to update.
   */
  publicId: string;
  /**
   * Whether to include color information (predominant colors and histogram of 32 leading colors). Default: false.
   */
  colors?: boolean | undefined;
  /**
   * Whether to include IPTC, XMP, and detailed Exif metadata in the response. Default: false.
   */
  mediaMetadata?: boolean | undefined;
  /**
   * Whether to include a list of coordinates of detected faces. Default: false.
   */
  faces?: boolean | undefined;
  /**
   * Whether to return quality analysis scores for the image. Default: false.
   */
  qualityAnalysis?: boolean | undefined;
  /**
   * Whether to return accessibility analysis scores for the image. Default: false.
   */
  accessibilityAnalysis?: boolean | undefined;
  /**
   * Whether to report the number of pages in multi-page documents (e.g., PDF). Default: false.
   */
  pages?: boolean | undefined;
  /**
   * Whether to include the perceptual hash (pHash) of the uploaded photo for image similarity detection. Default: false.
   */
  phash?: boolean | undefined;
  /**
   * Whether to include previously specified custom cropping coordinates and faces coordinates. Default: false.
   */
  coordinates?: boolean | undefined;
  /**
   * Whether to include details of all the backed up versions of the asset. Default: false.
   */
  versions?: boolean | undefined;
  /**
   * Maximum number of derived assets to return. Default: 10.
   */
  maxResults?: number | undefined;
  /**
   * The cursor for the next page of derived assets when there are more derived images than max_results.
   */
  derivedNextCursor?: string | undefined;
};

/** @internal */
export const GetResourceByPublicIdGlobals$inboundSchema: z.ZodType<
  GetResourceByPublicIdGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  cloud_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "cloud_name": "cloudName",
  });
});

/** @internal */
export type GetResourceByPublicIdGlobals$Outbound = {
  cloud_name?: string | undefined;
};

/** @internal */
export const GetResourceByPublicIdGlobals$outboundSchema: z.ZodType<
  GetResourceByPublicIdGlobals$Outbound,
  z.ZodTypeDef,
  GetResourceByPublicIdGlobals
> = z.object({
  cloudName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    cloudName: "cloud_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetResourceByPublicIdGlobals$ {
  /** @deprecated use `GetResourceByPublicIdGlobals$inboundSchema` instead. */
  export const inboundSchema = GetResourceByPublicIdGlobals$inboundSchema;
  /** @deprecated use `GetResourceByPublicIdGlobals$outboundSchema` instead. */
  export const outboundSchema = GetResourceByPublicIdGlobals$outboundSchema;
  /** @deprecated use `GetResourceByPublicIdGlobals$Outbound` instead. */
  export type Outbound = GetResourceByPublicIdGlobals$Outbound;
}

export function getResourceByPublicIdGlobalsToJSON(
  getResourceByPublicIdGlobals: GetResourceByPublicIdGlobals,
): string {
  return JSON.stringify(
    GetResourceByPublicIdGlobals$outboundSchema.parse(
      getResourceByPublicIdGlobals,
    ),
  );
}

export function getResourceByPublicIdGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GetResourceByPublicIdGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetResourceByPublicIdGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetResourceByPublicIdGlobals' from JSON`,
  );
}

/** @internal */
export const GetResourceByPublicIdType$inboundSchema: z.ZodNativeEnum<
  typeof GetResourceByPublicIdType
> = z.nativeEnum(GetResourceByPublicIdType);

/** @internal */
export const GetResourceByPublicIdType$outboundSchema: z.ZodNativeEnum<
  typeof GetResourceByPublicIdType
> = GetResourceByPublicIdType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetResourceByPublicIdType$ {
  /** @deprecated use `GetResourceByPublicIdType$inboundSchema` instead. */
  export const inboundSchema = GetResourceByPublicIdType$inboundSchema;
  /** @deprecated use `GetResourceByPublicIdType$outboundSchema` instead. */
  export const outboundSchema = GetResourceByPublicIdType$outboundSchema;
}

/** @internal */
export const GetResourceByPublicIdRequest$inboundSchema: z.ZodType<
  GetResourceByPublicIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource_type: components.ResourceTypeParameter$inboundSchema,
  type: GetResourceByPublicIdType$inboundSchema,
  public_id: z.string(),
  colors: z.boolean().default(false),
  media_metadata: z.boolean().default(false),
  faces: z.boolean().default(false),
  quality_analysis: z.boolean().default(false),
  accessibility_analysis: z.boolean().default(false),
  pages: z.boolean().default(false),
  phash: z.boolean().default(false),
  coordinates: z.boolean().default(false),
  versions: z.boolean().default(false),
  max_results: z.number().int().default(10),
  derived_next_cursor: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "resource_type": "resourceType",
    "public_id": "publicId",
    "media_metadata": "mediaMetadata",
    "quality_analysis": "qualityAnalysis",
    "accessibility_analysis": "accessibilityAnalysis",
    "max_results": "maxResults",
    "derived_next_cursor": "derivedNextCursor",
  });
});

/** @internal */
export type GetResourceByPublicIdRequest$Outbound = {
  resource_type: string;
  type: string;
  public_id: string;
  colors: boolean;
  media_metadata: boolean;
  faces: boolean;
  quality_analysis: boolean;
  accessibility_analysis: boolean;
  pages: boolean;
  phash: boolean;
  coordinates: boolean;
  versions: boolean;
  max_results: number;
  derived_next_cursor?: string | undefined;
};

/** @internal */
export const GetResourceByPublicIdRequest$outboundSchema: z.ZodType<
  GetResourceByPublicIdRequest$Outbound,
  z.ZodTypeDef,
  GetResourceByPublicIdRequest
> = z.object({
  resourceType: components.ResourceTypeParameter$outboundSchema,
  type: GetResourceByPublicIdType$outboundSchema,
  publicId: z.string(),
  colors: z.boolean().default(false),
  mediaMetadata: z.boolean().default(false),
  faces: z.boolean().default(false),
  qualityAnalysis: z.boolean().default(false),
  accessibilityAnalysis: z.boolean().default(false),
  pages: z.boolean().default(false),
  phash: z.boolean().default(false),
  coordinates: z.boolean().default(false),
  versions: z.boolean().default(false),
  maxResults: z.number().int().default(10),
  derivedNextCursor: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    resourceType: "resource_type",
    publicId: "public_id",
    mediaMetadata: "media_metadata",
    qualityAnalysis: "quality_analysis",
    accessibilityAnalysis: "accessibility_analysis",
    maxResults: "max_results",
    derivedNextCursor: "derived_next_cursor",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetResourceByPublicIdRequest$ {
  /** @deprecated use `GetResourceByPublicIdRequest$inboundSchema` instead. */
  export const inboundSchema = GetResourceByPublicIdRequest$inboundSchema;
  /** @deprecated use `GetResourceByPublicIdRequest$outboundSchema` instead. */
  export const outboundSchema = GetResourceByPublicIdRequest$outboundSchema;
  /** @deprecated use `GetResourceByPublicIdRequest$Outbound` instead. */
  export type Outbound = GetResourceByPublicIdRequest$Outbound;
}

export function getResourceByPublicIdRequestToJSON(
  getResourceByPublicIdRequest: GetResourceByPublicIdRequest,
): string {
  return JSON.stringify(
    GetResourceByPublicIdRequest$outboundSchema.parse(
      getResourceByPublicIdRequest,
    ),
  );
}

export function getResourceByPublicIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetResourceByPublicIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetResourceByPublicIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetResourceByPublicIdRequest' from JSON`,
  );
}
