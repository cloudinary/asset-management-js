/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DownloadAssetGlobals = {
  /**
   * The cloud name of your product environment.
   */
  cloudName?: string | undefined;
};

/**
 * The storage type of the asset. Defaults to 'upload'.
 */
export const DownloadAssetType = {
  Upload: "upload",
  Private: "private",
  Authenticated: "authenticated",
} as const;
/**
 * The storage type of the asset. Defaults to 'upload'.
 */
export type DownloadAssetType = ClosedEnum<typeof DownloadAssetType>;

export type DownloadAssetRequest = {
  /**
   * The type the of asset.
   */
  resourceType: components.ResourceTypeParameter;
  /**
   * The public ID of the asset to download.
   */
  publicId: string;
  /**
   * The format to convert the asset to before downloading.
   */
  format?: string | undefined;
  /**
   * The storage type of the asset. Defaults to 'upload'.
   */
  type?: DownloadAssetType | undefined;
  /**
   * Unix timestamp indicating when the download URL should expire.
   */
  expiresAt?: number | undefined;
  /**
   * Whether to force download as an attachment.
   */
  attachment?: boolean | undefined;
  /**
   * The desired filename for the downloaded file.
   */
  targetFilename?: string | undefined;
  /**
   * A transformation to apply to the asset before downloading.
   */
  transformation?: string | undefined;
  apiKey: string;
  signature: string;
  timestamp: number;
};

export type DownloadAssetResponse =
  | ReadableStream<Uint8Array>
  | ReadableStream<Uint8Array>
  | ReadableStream<Uint8Array>;

/** @internal */
export const DownloadAssetGlobals$inboundSchema: z.ZodType<
  DownloadAssetGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  cloud_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "cloud_name": "cloudName",
  });
});

/** @internal */
export type DownloadAssetGlobals$Outbound = {
  cloud_name?: string | undefined;
};

/** @internal */
export const DownloadAssetGlobals$outboundSchema: z.ZodType<
  DownloadAssetGlobals$Outbound,
  z.ZodTypeDef,
  DownloadAssetGlobals
> = z.object({
  cloudName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    cloudName: "cloud_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DownloadAssetGlobals$ {
  /** @deprecated use `DownloadAssetGlobals$inboundSchema` instead. */
  export const inboundSchema = DownloadAssetGlobals$inboundSchema;
  /** @deprecated use `DownloadAssetGlobals$outboundSchema` instead. */
  export const outboundSchema = DownloadAssetGlobals$outboundSchema;
  /** @deprecated use `DownloadAssetGlobals$Outbound` instead. */
  export type Outbound = DownloadAssetGlobals$Outbound;
}

export function downloadAssetGlobalsToJSON(
  downloadAssetGlobals: DownloadAssetGlobals,
): string {
  return JSON.stringify(
    DownloadAssetGlobals$outboundSchema.parse(downloadAssetGlobals),
  );
}

export function downloadAssetGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<DownloadAssetGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DownloadAssetGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DownloadAssetGlobals' from JSON`,
  );
}

/** @internal */
export const DownloadAssetType$inboundSchema: z.ZodNativeEnum<
  typeof DownloadAssetType
> = z.nativeEnum(DownloadAssetType);

/** @internal */
export const DownloadAssetType$outboundSchema: z.ZodNativeEnum<
  typeof DownloadAssetType
> = DownloadAssetType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DownloadAssetType$ {
  /** @deprecated use `DownloadAssetType$inboundSchema` instead. */
  export const inboundSchema = DownloadAssetType$inboundSchema;
  /** @deprecated use `DownloadAssetType$outboundSchema` instead. */
  export const outboundSchema = DownloadAssetType$outboundSchema;
}

/** @internal */
export const DownloadAssetRequest$inboundSchema: z.ZodType<
  DownloadAssetRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource_type: components.ResourceTypeParameter$inboundSchema,
  public_id: z.string(),
  format: z.string().optional(),
  type: DownloadAssetType$inboundSchema.default("upload"),
  expires_at: z.number().int().optional(),
  attachment: z.boolean().default(false),
  target_filename: z.string().optional(),
  transformation: z.string().optional(),
  api_key: z.string(),
  signature: z.string(),
  timestamp: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "resource_type": "resourceType",
    "public_id": "publicId",
    "expires_at": "expiresAt",
    "target_filename": "targetFilename",
    "api_key": "apiKey",
  });
});

/** @internal */
export type DownloadAssetRequest$Outbound = {
  resource_type: string;
  public_id: string;
  format?: string | undefined;
  type: string;
  expires_at?: number | undefined;
  attachment: boolean;
  target_filename?: string | undefined;
  transformation?: string | undefined;
  api_key: string;
  signature: string;
  timestamp: number;
};

/** @internal */
export const DownloadAssetRequest$outboundSchema: z.ZodType<
  DownloadAssetRequest$Outbound,
  z.ZodTypeDef,
  DownloadAssetRequest
> = z.object({
  resourceType: components.ResourceTypeParameter$outboundSchema,
  publicId: z.string(),
  format: z.string().optional(),
  type: DownloadAssetType$outboundSchema.default("upload"),
  expiresAt: z.number().int().optional(),
  attachment: z.boolean().default(false),
  targetFilename: z.string().optional(),
  transformation: z.string().optional(),
  apiKey: z.string(),
  signature: z.string(),
  timestamp: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    resourceType: "resource_type",
    publicId: "public_id",
    expiresAt: "expires_at",
    targetFilename: "target_filename",
    apiKey: "api_key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DownloadAssetRequest$ {
  /** @deprecated use `DownloadAssetRequest$inboundSchema` instead. */
  export const inboundSchema = DownloadAssetRequest$inboundSchema;
  /** @deprecated use `DownloadAssetRequest$outboundSchema` instead. */
  export const outboundSchema = DownloadAssetRequest$outboundSchema;
  /** @deprecated use `DownloadAssetRequest$Outbound` instead. */
  export type Outbound = DownloadAssetRequest$Outbound;
}

export function downloadAssetRequestToJSON(
  downloadAssetRequest: DownloadAssetRequest,
): string {
  return JSON.stringify(
    DownloadAssetRequest$outboundSchema.parse(downloadAssetRequest),
  );
}

export function downloadAssetRequestFromJSON(
  jsonString: string,
): SafeParseResult<DownloadAssetRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DownloadAssetRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DownloadAssetRequest' from JSON`,
  );
}

/** @internal */
export const DownloadAssetResponse$inboundSchema: z.ZodType<
  DownloadAssetResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.instanceof(ReadableStream<Uint8Array>),
  z.instanceof(ReadableStream<Uint8Array>),
  z.instanceof(ReadableStream<Uint8Array>),
]);

/** @internal */
export type DownloadAssetResponse$Outbound =
  | ReadableStream<Uint8Array>
  | ReadableStream<Uint8Array>
  | ReadableStream<Uint8Array>;

/** @internal */
export const DownloadAssetResponse$outboundSchema: z.ZodType<
  DownloadAssetResponse$Outbound,
  z.ZodTypeDef,
  DownloadAssetResponse
> = z.union([
  z.instanceof(ReadableStream<Uint8Array>),
  z.instanceof(ReadableStream<Uint8Array>),
  z.instanceof(ReadableStream<Uint8Array>),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DownloadAssetResponse$ {
  /** @deprecated use `DownloadAssetResponse$inboundSchema` instead. */
  export const inboundSchema = DownloadAssetResponse$inboundSchema;
  /** @deprecated use `DownloadAssetResponse$outboundSchema` instead. */
  export const outboundSchema = DownloadAssetResponse$outboundSchema;
  /** @deprecated use `DownloadAssetResponse$Outbound` instead. */
  export type Outbound = DownloadAssetResponse$Outbound;
}

export function downloadAssetResponseToJSON(
  downloadAssetResponse: DownloadAssetResponse,
): string {
  return JSON.stringify(
    DownloadAssetResponse$outboundSchema.parse(downloadAssetResponse),
  );
}

export function downloadAssetResponseFromJSON(
  jsonString: string,
): SafeParseResult<DownloadAssetResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DownloadAssetResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DownloadAssetResponse' from JSON`,
  );
}
