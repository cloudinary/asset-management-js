/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetVideoViewsGlobals = {
  /**
   * The cloud name of your product environment.
   */
  cloudName?: string | undefined;
};

/**
 * Specifies the expression field by which to sort the results. Prepend values with a '-' to reverse the order.
 */
export const SortBy = {
  ViewEndedAt: "view_ended_at",
  VideoDuration: "video_duration",
  ViewWatchTime: "view_watch_time",
  MinusViewEndedAt: "-view_ended_at",
  MinusVideoDuration: "-video_duration",
  MinusViewWatchTime: "-view_watch_time",
} as const;
/**
 * Specifies the expression field by which to sort the results. Prepend values with a '-' to reverse the order.
 */
export type SortBy = ClosedEnum<typeof SortBy>;

export type GetVideoViewsRequest = {
  /**
   * A set of conditions used to limit the results to rows that match those conditions. For example: `?expression=video_public_id=skate`
   */
  expression?: string | undefined;
  /**
   * Specifies the number of items to include in the response.
   */
  maxResults?: number | undefined;
  /**
   * Specifies the expression field by which to sort the results. Prepend values with a '-' to reverse the order.
   */
  sortBy?: SortBy | undefined;
  /**
   * The value to be used to obtain the next batch of results.
   */
  nextCursor?: string | undefined;
};

export type Data = {
  /**
   * The full public ID of the video
   */
  videoPublicId?: string | undefined;
  /**
   * The duration in seconds of the video
   */
  videoDuration?: number | null | undefined;
  /**
   * The transformation applied to the video
   */
  videoTransformation?: string | null | undefined;
  /**
   * The file extension of the video
   */
  videoExtension?: string | null | undefined;
  /**
   * The application used to view the video
   */
  viewerApplicationName?: string | null | undefined;
  /**
   * The 2-digit ISO country code of the viewer location
   */
  viewerLocationCountryCode?: string | null | undefined;
  /**
   * The full identifier for the viewer's operating system
   */
  viewerOsIdentifier?: string | null | undefined;
  /**
   * The length of time the video was viewed
   */
  viewWatchTime?: number | null | undefined;
  /**
   * The date when the video view ended
   */
  viewEndedAt?: Date | undefined;
};

/**
 * List of video views retrieved
 */
export type GetVideoViewsResponse = {
  /**
   * Unique identifier for the request
   */
  requestId?: string | undefined;
  /**
   * Cursor value for pagination
   */
  nextCursor?: string | undefined;
  data?: Array<Data> | undefined;
};

/** @internal */
export const GetVideoViewsGlobals$inboundSchema: z.ZodType<
  GetVideoViewsGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  cloud_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "cloud_name": "cloudName",
  });
});

/** @internal */
export type GetVideoViewsGlobals$Outbound = {
  cloud_name?: string | undefined;
};

/** @internal */
export const GetVideoViewsGlobals$outboundSchema: z.ZodType<
  GetVideoViewsGlobals$Outbound,
  z.ZodTypeDef,
  GetVideoViewsGlobals
> = z.object({
  cloudName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    cloudName: "cloud_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetVideoViewsGlobals$ {
  /** @deprecated use `GetVideoViewsGlobals$inboundSchema` instead. */
  export const inboundSchema = GetVideoViewsGlobals$inboundSchema;
  /** @deprecated use `GetVideoViewsGlobals$outboundSchema` instead. */
  export const outboundSchema = GetVideoViewsGlobals$outboundSchema;
  /** @deprecated use `GetVideoViewsGlobals$Outbound` instead. */
  export type Outbound = GetVideoViewsGlobals$Outbound;
}

export function getVideoViewsGlobalsToJSON(
  getVideoViewsGlobals: GetVideoViewsGlobals,
): string {
  return JSON.stringify(
    GetVideoViewsGlobals$outboundSchema.parse(getVideoViewsGlobals),
  );
}

export function getVideoViewsGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GetVideoViewsGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetVideoViewsGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetVideoViewsGlobals' from JSON`,
  );
}

/** @internal */
export const SortBy$inboundSchema: z.ZodNativeEnum<typeof SortBy> = z
  .nativeEnum(SortBy);

/** @internal */
export const SortBy$outboundSchema: z.ZodNativeEnum<typeof SortBy> =
  SortBy$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SortBy$ {
  /** @deprecated use `SortBy$inboundSchema` instead. */
  export const inboundSchema = SortBy$inboundSchema;
  /** @deprecated use `SortBy$outboundSchema` instead. */
  export const outboundSchema = SortBy$outboundSchema;
}

/** @internal */
export const GetVideoViewsRequest$inboundSchema: z.ZodType<
  GetVideoViewsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  expression: z.string().optional(),
  max_results: z.number().int().default(10),
  sort_by: SortBy$inboundSchema.default("-view_ended_at"),
  next_cursor: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "max_results": "maxResults",
    "sort_by": "sortBy",
    "next_cursor": "nextCursor",
  });
});

/** @internal */
export type GetVideoViewsRequest$Outbound = {
  expression?: string | undefined;
  max_results: number;
  sort_by: string;
  next_cursor?: string | undefined;
};

/** @internal */
export const GetVideoViewsRequest$outboundSchema: z.ZodType<
  GetVideoViewsRequest$Outbound,
  z.ZodTypeDef,
  GetVideoViewsRequest
> = z.object({
  expression: z.string().optional(),
  maxResults: z.number().int().default(10),
  sortBy: SortBy$outboundSchema.default("-view_ended_at"),
  nextCursor: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    maxResults: "max_results",
    sortBy: "sort_by",
    nextCursor: "next_cursor",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetVideoViewsRequest$ {
  /** @deprecated use `GetVideoViewsRequest$inboundSchema` instead. */
  export const inboundSchema = GetVideoViewsRequest$inboundSchema;
  /** @deprecated use `GetVideoViewsRequest$outboundSchema` instead. */
  export const outboundSchema = GetVideoViewsRequest$outboundSchema;
  /** @deprecated use `GetVideoViewsRequest$Outbound` instead. */
  export type Outbound = GetVideoViewsRequest$Outbound;
}

export function getVideoViewsRequestToJSON(
  getVideoViewsRequest: GetVideoViewsRequest,
): string {
  return JSON.stringify(
    GetVideoViewsRequest$outboundSchema.parse(getVideoViewsRequest),
  );
}

export function getVideoViewsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetVideoViewsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetVideoViewsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetVideoViewsRequest' from JSON`,
  );
}

/** @internal */
export const Data$inboundSchema: z.ZodType<Data, z.ZodTypeDef, unknown> = z
  .object({
    video_public_id: z.string().optional(),
    video_duration: z.nullable(z.number()).optional(),
    video_transformation: z.nullable(z.string()).optional(),
    video_extension: z.nullable(z.string()).optional(),
    viewer_application_name: z.nullable(z.string()).optional(),
    viewer_location_country_code: z.nullable(z.string()).optional(),
    viewer_os_identifier: z.nullable(z.string()).optional(),
    view_watch_time: z.nullable(z.number()).optional(),
    view_ended_at: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "video_public_id": "videoPublicId",
      "video_duration": "videoDuration",
      "video_transformation": "videoTransformation",
      "video_extension": "videoExtension",
      "viewer_application_name": "viewerApplicationName",
      "viewer_location_country_code": "viewerLocationCountryCode",
      "viewer_os_identifier": "viewerOsIdentifier",
      "view_watch_time": "viewWatchTime",
      "view_ended_at": "viewEndedAt",
    });
  });

/** @internal */
export type Data$Outbound = {
  video_public_id?: string | undefined;
  video_duration?: number | null | undefined;
  video_transformation?: string | null | undefined;
  video_extension?: string | null | undefined;
  viewer_application_name?: string | null | undefined;
  viewer_location_country_code?: string | null | undefined;
  viewer_os_identifier?: string | null | undefined;
  view_watch_time?: number | null | undefined;
  view_ended_at?: string | undefined;
};

/** @internal */
export const Data$outboundSchema: z.ZodType<Data$Outbound, z.ZodTypeDef, Data> =
  z.object({
    videoPublicId: z.string().optional(),
    videoDuration: z.nullable(z.number()).optional(),
    videoTransformation: z.nullable(z.string()).optional(),
    videoExtension: z.nullable(z.string()).optional(),
    viewerApplicationName: z.nullable(z.string()).optional(),
    viewerLocationCountryCode: z.nullable(z.string()).optional(),
    viewerOsIdentifier: z.nullable(z.string()).optional(),
    viewWatchTime: z.nullable(z.number()).optional(),
    viewEndedAt: z.date().transform(v => v.toISOString()).optional(),
  }).transform((v) => {
    return remap$(v, {
      videoPublicId: "video_public_id",
      videoDuration: "video_duration",
      videoTransformation: "video_transformation",
      videoExtension: "video_extension",
      viewerApplicationName: "viewer_application_name",
      viewerLocationCountryCode: "viewer_location_country_code",
      viewerOsIdentifier: "viewer_os_identifier",
      viewWatchTime: "view_watch_time",
      viewEndedAt: "view_ended_at",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Data$ {
  /** @deprecated use `Data$inboundSchema` instead. */
  export const inboundSchema = Data$inboundSchema;
  /** @deprecated use `Data$outboundSchema` instead. */
  export const outboundSchema = Data$outboundSchema;
  /** @deprecated use `Data$Outbound` instead. */
  export type Outbound = Data$Outbound;
}

export function dataToJSON(data: Data): string {
  return JSON.stringify(Data$outboundSchema.parse(data));
}

export function dataFromJSON(
  jsonString: string,
): SafeParseResult<Data, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Data$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Data' from JSON`,
  );
}

/** @internal */
export const GetVideoViewsResponse$inboundSchema: z.ZodType<
  GetVideoViewsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  request_id: z.string().optional(),
  next_cursor: z.string().optional(),
  data: z.array(z.lazy(() => Data$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "request_id": "requestId",
    "next_cursor": "nextCursor",
  });
});

/** @internal */
export type GetVideoViewsResponse$Outbound = {
  request_id?: string | undefined;
  next_cursor?: string | undefined;
  data?: Array<Data$Outbound> | undefined;
};

/** @internal */
export const GetVideoViewsResponse$outboundSchema: z.ZodType<
  GetVideoViewsResponse$Outbound,
  z.ZodTypeDef,
  GetVideoViewsResponse
> = z.object({
  requestId: z.string().optional(),
  nextCursor: z.string().optional(),
  data: z.array(z.lazy(() => Data$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    requestId: "request_id",
    nextCursor: "next_cursor",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetVideoViewsResponse$ {
  /** @deprecated use `GetVideoViewsResponse$inboundSchema` instead. */
  export const inboundSchema = GetVideoViewsResponse$inboundSchema;
  /** @deprecated use `GetVideoViewsResponse$outboundSchema` instead. */
  export const outboundSchema = GetVideoViewsResponse$outboundSchema;
  /** @deprecated use `GetVideoViewsResponse$Outbound` instead. */
  export type Outbound = GetVideoViewsResponse$Outbound;
}

export function getVideoViewsResponseToJSON(
  getVideoViewsResponse: GetVideoViewsResponse,
): string {
  return JSON.stringify(
    GetVideoViewsResponse$outboundSchema.parse(getVideoViewsResponse),
  );
}

export function getVideoViewsResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetVideoViewsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetVideoViewsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetVideoViewsResponse' from JSON`,
  );
}
