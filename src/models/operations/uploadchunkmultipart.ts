/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UploadChunkMultipartGlobals = {
  /**
   * The cloud name of your product environment.
   */
  cloudName?: string | undefined;
};

export type UploadChunkMultipartRequest = {
  /**
   * The type of resource to upload:
   *
   * @remarks
   * - "image" for uploading strictly images
   * - "video" for uploading strictly videos
   * - "raw" for uploading non-media files
   * - "auto" for allowing Cloudinary to automatically detect the type of the uploaded file
   */
  resourceType?: components.UploadResourceType | undefined;
  /**
   * The range of bytes being uploaded in the current chunk, in the format "bytes start-end/total". For example, "bytes 0-999999/3000000" indicates the first 1MB chunk of a 3MB file.
   */
  contentRange: string;
  /**
   * A unique identifier for the upload. Must be the same for all chunks of the same file.
   */
  xUniqueUploadId: string;
  binaryUploadRequest: components.BinaryUploadRequest;
};

/**
 * Chunk upload successful. For all but the final chunk, this returns upload status. For the final chunk, it returns the complete upload response.
 */
export type UploadChunkMultipartResponseBody =
  | components.NonFinalChunkUploadResponse
  | components.AsyncUploadResponse
  | components.UploadResponse;

export type UploadChunkMultipartResponse =
  | components.NonFinalChunkUploadResponse
  | components.AsyncUploadResponse
  | components.UploadResponse
  | string;

/** @internal */
export const UploadChunkMultipartGlobals$inboundSchema: z.ZodType<
  UploadChunkMultipartGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  cloud_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "cloud_name": "cloudName",
  });
});

/** @internal */
export type UploadChunkMultipartGlobals$Outbound = {
  cloud_name?: string | undefined;
};

/** @internal */
export const UploadChunkMultipartGlobals$outboundSchema: z.ZodType<
  UploadChunkMultipartGlobals$Outbound,
  z.ZodTypeDef,
  UploadChunkMultipartGlobals
> = z.object({
  cloudName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    cloudName: "cloud_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadChunkMultipartGlobals$ {
  /** @deprecated use `UploadChunkMultipartGlobals$inboundSchema` instead. */
  export const inboundSchema = UploadChunkMultipartGlobals$inboundSchema;
  /** @deprecated use `UploadChunkMultipartGlobals$outboundSchema` instead. */
  export const outboundSchema = UploadChunkMultipartGlobals$outboundSchema;
  /** @deprecated use `UploadChunkMultipartGlobals$Outbound` instead. */
  export type Outbound = UploadChunkMultipartGlobals$Outbound;
}

export function uploadChunkMultipartGlobalsToJSON(
  uploadChunkMultipartGlobals: UploadChunkMultipartGlobals,
): string {
  return JSON.stringify(
    UploadChunkMultipartGlobals$outboundSchema.parse(
      uploadChunkMultipartGlobals,
    ),
  );
}

export function uploadChunkMultipartGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<UploadChunkMultipartGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadChunkMultipartGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadChunkMultipartGlobals' from JSON`,
  );
}

/** @internal */
export const UploadChunkMultipartRequest$inboundSchema: z.ZodType<
  UploadChunkMultipartRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource_type: components.UploadResourceType$inboundSchema.default("auto"),
  "Content-Range": z.string(),
  "X-Unique-Upload-Id": z.string(),
  binary_upload_request: components.BinaryUploadRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "resource_type": "resourceType",
    "Content-Range": "contentRange",
    "X-Unique-Upload-Id": "xUniqueUploadId",
    "binary_upload_request": "binaryUploadRequest",
  });
});

/** @internal */
export type UploadChunkMultipartRequest$Outbound = {
  resource_type: string;
  "Content-Range": string;
  "X-Unique-Upload-Id": string;
  binary_upload_request: components.BinaryUploadRequest$Outbound;
};

/** @internal */
export const UploadChunkMultipartRequest$outboundSchema: z.ZodType<
  UploadChunkMultipartRequest$Outbound,
  z.ZodTypeDef,
  UploadChunkMultipartRequest
> = z.object({
  resourceType: components.UploadResourceType$outboundSchema.default("auto"),
  contentRange: z.string(),
  xUniqueUploadId: z.string(),
  binaryUploadRequest: components.BinaryUploadRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    resourceType: "resource_type",
    contentRange: "Content-Range",
    xUniqueUploadId: "X-Unique-Upload-Id",
    binaryUploadRequest: "binary_upload_request",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadChunkMultipartRequest$ {
  /** @deprecated use `UploadChunkMultipartRequest$inboundSchema` instead. */
  export const inboundSchema = UploadChunkMultipartRequest$inboundSchema;
  /** @deprecated use `UploadChunkMultipartRequest$outboundSchema` instead. */
  export const outboundSchema = UploadChunkMultipartRequest$outboundSchema;
  /** @deprecated use `UploadChunkMultipartRequest$Outbound` instead. */
  export type Outbound = UploadChunkMultipartRequest$Outbound;
}

export function uploadChunkMultipartRequestToJSON(
  uploadChunkMultipartRequest: UploadChunkMultipartRequest,
): string {
  return JSON.stringify(
    UploadChunkMultipartRequest$outboundSchema.parse(
      uploadChunkMultipartRequest,
    ),
  );
}

export function uploadChunkMultipartRequestFromJSON(
  jsonString: string,
): SafeParseResult<UploadChunkMultipartRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadChunkMultipartRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadChunkMultipartRequest' from JSON`,
  );
}

/** @internal */
export const UploadChunkMultipartResponseBody$inboundSchema: z.ZodType<
  UploadChunkMultipartResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.NonFinalChunkUploadResponse$inboundSchema,
  components.AsyncUploadResponse$inboundSchema,
  components.UploadResponse$inboundSchema,
]);

/** @internal */
export type UploadChunkMultipartResponseBody$Outbound =
  | components.NonFinalChunkUploadResponse$Outbound
  | components.AsyncUploadResponse$Outbound
  | components.UploadResponse$Outbound;

/** @internal */
export const UploadChunkMultipartResponseBody$outboundSchema: z.ZodType<
  UploadChunkMultipartResponseBody$Outbound,
  z.ZodTypeDef,
  UploadChunkMultipartResponseBody
> = z.union([
  components.NonFinalChunkUploadResponse$outboundSchema,
  components.AsyncUploadResponse$outboundSchema,
  components.UploadResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadChunkMultipartResponseBody$ {
  /** @deprecated use `UploadChunkMultipartResponseBody$inboundSchema` instead. */
  export const inboundSchema = UploadChunkMultipartResponseBody$inboundSchema;
  /** @deprecated use `UploadChunkMultipartResponseBody$outboundSchema` instead. */
  export const outboundSchema = UploadChunkMultipartResponseBody$outboundSchema;
  /** @deprecated use `UploadChunkMultipartResponseBody$Outbound` instead. */
  export type Outbound = UploadChunkMultipartResponseBody$Outbound;
}

export function uploadChunkMultipartResponseBodyToJSON(
  uploadChunkMultipartResponseBody: UploadChunkMultipartResponseBody,
): string {
  return JSON.stringify(
    UploadChunkMultipartResponseBody$outboundSchema.parse(
      uploadChunkMultipartResponseBody,
    ),
  );
}

export function uploadChunkMultipartResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<UploadChunkMultipartResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadChunkMultipartResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadChunkMultipartResponseBody' from JSON`,
  );
}

/** @internal */
export const UploadChunkMultipartResponse$inboundSchema: z.ZodType<
  UploadChunkMultipartResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.union([
    components.NonFinalChunkUploadResponse$inboundSchema,
    components.AsyncUploadResponse$inboundSchema,
    components.UploadResponse$inboundSchema,
  ]),
  z.string(),
]);

/** @internal */
export type UploadChunkMultipartResponse$Outbound =
  | components.NonFinalChunkUploadResponse$Outbound
  | components.AsyncUploadResponse$Outbound
  | components.UploadResponse$Outbound
  | string;

/** @internal */
export const UploadChunkMultipartResponse$outboundSchema: z.ZodType<
  UploadChunkMultipartResponse$Outbound,
  z.ZodTypeDef,
  UploadChunkMultipartResponse
> = z.union([
  z.union([
    components.NonFinalChunkUploadResponse$outboundSchema,
    components.AsyncUploadResponse$outboundSchema,
    components.UploadResponse$outboundSchema,
  ]),
  z.string(),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadChunkMultipartResponse$ {
  /** @deprecated use `UploadChunkMultipartResponse$inboundSchema` instead. */
  export const inboundSchema = UploadChunkMultipartResponse$inboundSchema;
  /** @deprecated use `UploadChunkMultipartResponse$outboundSchema` instead. */
  export const outboundSchema = UploadChunkMultipartResponse$outboundSchema;
  /** @deprecated use `UploadChunkMultipartResponse$Outbound` instead. */
  export type Outbound = UploadChunkMultipartResponse$Outbound;
}

export function uploadChunkMultipartResponseToJSON(
  uploadChunkMultipartResponse: UploadChunkMultipartResponse,
): string {
  return JSON.stringify(
    UploadChunkMultipartResponse$outboundSchema.parse(
      uploadChunkMultipartResponse,
    ),
  );
}

export function uploadChunkMultipartResponseFromJSON(
  jsonString: string,
): SafeParseResult<UploadChunkMultipartResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadChunkMultipartResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadChunkMultipartResponse' from JSON`,
  );
}
