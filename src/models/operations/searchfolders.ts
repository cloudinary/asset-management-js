/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SearchFoldersGlobals = {
  /**
   * The cloud name of your product environment.
   */
  cloudName?: string | undefined;
};

export type Expression = {};

/**
 * The (Lucene-like) string expression specifying the search query, or an object for advanced queries. If not passed, returns all folders (up to max_results).
 */
export type ExpressionUnion = Expression | string;

export type SearchFoldersRequest = {
  /**
   * The (Lucene-like) string expression specifying the search query, or an object for advanced queries. If not passed, returns all folders (up to max_results).
   */
  expression?: Expression | string | undefined;
  /**
   * An array of key-value pairs for sorting. Each value is a key and direction (asc/desc).
   */
  sortBy?: Array<string> | undefined;
  /**
   * Maximum number of folders to return (max 500, default 50).
   */
  maxResults?: number | undefined;
  /**
   * When more results are available, use the next_cursor value from the previous response.
   */
  nextCursor?: string | undefined;
};

/** @internal */
export const SearchFoldersGlobals$inboundSchema: z.ZodType<
  SearchFoldersGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  cloud_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "cloud_name": "cloudName",
  });
});

/** @internal */
export type SearchFoldersGlobals$Outbound = {
  cloud_name?: string | undefined;
};

/** @internal */
export const SearchFoldersGlobals$outboundSchema: z.ZodType<
  SearchFoldersGlobals$Outbound,
  z.ZodTypeDef,
  SearchFoldersGlobals
> = z.object({
  cloudName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    cloudName: "cloud_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchFoldersGlobals$ {
  /** @deprecated use `SearchFoldersGlobals$inboundSchema` instead. */
  export const inboundSchema = SearchFoldersGlobals$inboundSchema;
  /** @deprecated use `SearchFoldersGlobals$outboundSchema` instead. */
  export const outboundSchema = SearchFoldersGlobals$outboundSchema;
  /** @deprecated use `SearchFoldersGlobals$Outbound` instead. */
  export type Outbound = SearchFoldersGlobals$Outbound;
}

export function searchFoldersGlobalsToJSON(
  searchFoldersGlobals: SearchFoldersGlobals,
): string {
  return JSON.stringify(
    SearchFoldersGlobals$outboundSchema.parse(searchFoldersGlobals),
  );
}

export function searchFoldersGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<SearchFoldersGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchFoldersGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchFoldersGlobals' from JSON`,
  );
}

/** @internal */
export const Expression$inboundSchema: z.ZodType<
  Expression,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type Expression$Outbound = {};

/** @internal */
export const Expression$outboundSchema: z.ZodType<
  Expression$Outbound,
  z.ZodTypeDef,
  Expression
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Expression$ {
  /** @deprecated use `Expression$inboundSchema` instead. */
  export const inboundSchema = Expression$inboundSchema;
  /** @deprecated use `Expression$outboundSchema` instead. */
  export const outboundSchema = Expression$outboundSchema;
  /** @deprecated use `Expression$Outbound` instead. */
  export type Outbound = Expression$Outbound;
}

export function expressionToJSON(expression: Expression): string {
  return JSON.stringify(Expression$outboundSchema.parse(expression));
}

export function expressionFromJSON(
  jsonString: string,
): SafeParseResult<Expression, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Expression$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Expression' from JSON`,
  );
}

/** @internal */
export const ExpressionUnion$inboundSchema: z.ZodType<
  ExpressionUnion,
  z.ZodTypeDef,
  unknown
> = z.union([z.lazy(() => Expression$inboundSchema), z.string()]);

/** @internal */
export type ExpressionUnion$Outbound = Expression$Outbound | string;

/** @internal */
export const ExpressionUnion$outboundSchema: z.ZodType<
  ExpressionUnion$Outbound,
  z.ZodTypeDef,
  ExpressionUnion
> = z.union([z.lazy(() => Expression$outboundSchema), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExpressionUnion$ {
  /** @deprecated use `ExpressionUnion$inboundSchema` instead. */
  export const inboundSchema = ExpressionUnion$inboundSchema;
  /** @deprecated use `ExpressionUnion$outboundSchema` instead. */
  export const outboundSchema = ExpressionUnion$outboundSchema;
  /** @deprecated use `ExpressionUnion$Outbound` instead. */
  export type Outbound = ExpressionUnion$Outbound;
}

export function expressionUnionToJSON(
  expressionUnion: ExpressionUnion,
): string {
  return JSON.stringify(ExpressionUnion$outboundSchema.parse(expressionUnion));
}

export function expressionUnionFromJSON(
  jsonString: string,
): SafeParseResult<ExpressionUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExpressionUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExpressionUnion' from JSON`,
  );
}

/** @internal */
export const SearchFoldersRequest$inboundSchema: z.ZodType<
  SearchFoldersRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  expression: z.union([z.lazy(() => Expression$inboundSchema), z.string()])
    .optional(),
  sort_by: z.array(z.string()).optional(),
  max_results: z.number().int().default(50),
  next_cursor: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "sort_by": "sortBy",
    "max_results": "maxResults",
    "next_cursor": "nextCursor",
  });
});

/** @internal */
export type SearchFoldersRequest$Outbound = {
  expression?: Expression$Outbound | string | undefined;
  sort_by?: Array<string> | undefined;
  max_results: number;
  next_cursor?: string | undefined;
};

/** @internal */
export const SearchFoldersRequest$outboundSchema: z.ZodType<
  SearchFoldersRequest$Outbound,
  z.ZodTypeDef,
  SearchFoldersRequest
> = z.object({
  expression: z.union([z.lazy(() => Expression$outboundSchema), z.string()])
    .optional(),
  sortBy: z.array(z.string()).optional(),
  maxResults: z.number().int().default(50),
  nextCursor: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    sortBy: "sort_by",
    maxResults: "max_results",
    nextCursor: "next_cursor",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchFoldersRequest$ {
  /** @deprecated use `SearchFoldersRequest$inboundSchema` instead. */
  export const inboundSchema = SearchFoldersRequest$inboundSchema;
  /** @deprecated use `SearchFoldersRequest$outboundSchema` instead. */
  export const outboundSchema = SearchFoldersRequest$outboundSchema;
  /** @deprecated use `SearchFoldersRequest$Outbound` instead. */
  export type Outbound = SearchFoldersRequest$Outbound;
}

export function searchFoldersRequestToJSON(
  searchFoldersRequest: SearchFoldersRequest,
): string {
  return JSON.stringify(
    SearchFoldersRequest$outboundSchema.parse(searchFoldersRequest),
  );
}

export function searchFoldersRequestFromJSON(
  jsonString: string,
): SafeParseResult<SearchFoldersRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchFoldersRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchFoldersRequest' from JSON`,
  );
}
