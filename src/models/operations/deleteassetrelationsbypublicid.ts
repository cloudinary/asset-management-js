/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteAssetRelationsByPublicIdGlobals = {
  /**
   * The cloud name of your product environment.
   */
  cloudName?: string | undefined;
};

/**
 * The delivery type of the asset.
 */
export const DeleteAssetRelationsByPublicIdType = {
  Upload: "upload",
  Private: "private",
  Authenticated: "authenticated",
} as const;
/**
 * The delivery type of the asset.
 */
export type DeleteAssetRelationsByPublicIdType = ClosedEnum<
  typeof DeleteAssetRelationsByPublicIdType
>;

export type DeleteAssetRelationsByPublicIdRequestBody = {
  /**
   * Unrelates the asset from all the assets specified in this array of assets, specified as resource_type/type/public_id.
   */
  assetsToUnrelate: Array<string>;
};

export type DeleteAssetRelationsByPublicIdRequest = {
  /**
   * The type the of asset.
   */
  resourceType: components.ResourceTypeParameter;
  /**
   * The delivery type of the asset.
   */
  type?: DeleteAssetRelationsByPublicIdType | undefined;
  /**
   * The public ID of the asset.
   */
  publicId: string;
  requestBody: DeleteAssetRelationsByPublicIdRequestBody;
};

/** @internal */
export const DeleteAssetRelationsByPublicIdGlobals$inboundSchema: z.ZodType<
  DeleteAssetRelationsByPublicIdGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  cloud_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "cloud_name": "cloudName",
  });
});

/** @internal */
export type DeleteAssetRelationsByPublicIdGlobals$Outbound = {
  cloud_name?: string | undefined;
};

/** @internal */
export const DeleteAssetRelationsByPublicIdGlobals$outboundSchema: z.ZodType<
  DeleteAssetRelationsByPublicIdGlobals$Outbound,
  z.ZodTypeDef,
  DeleteAssetRelationsByPublicIdGlobals
> = z.object({
  cloudName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    cloudName: "cloud_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteAssetRelationsByPublicIdGlobals$ {
  /** @deprecated use `DeleteAssetRelationsByPublicIdGlobals$inboundSchema` instead. */
  export const inboundSchema =
    DeleteAssetRelationsByPublicIdGlobals$inboundSchema;
  /** @deprecated use `DeleteAssetRelationsByPublicIdGlobals$outboundSchema` instead. */
  export const outboundSchema =
    DeleteAssetRelationsByPublicIdGlobals$outboundSchema;
  /** @deprecated use `DeleteAssetRelationsByPublicIdGlobals$Outbound` instead. */
  export type Outbound = DeleteAssetRelationsByPublicIdGlobals$Outbound;
}

export function deleteAssetRelationsByPublicIdGlobalsToJSON(
  deleteAssetRelationsByPublicIdGlobals: DeleteAssetRelationsByPublicIdGlobals,
): string {
  return JSON.stringify(
    DeleteAssetRelationsByPublicIdGlobals$outboundSchema.parse(
      deleteAssetRelationsByPublicIdGlobals,
    ),
  );
}

export function deleteAssetRelationsByPublicIdGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<DeleteAssetRelationsByPublicIdGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeleteAssetRelationsByPublicIdGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteAssetRelationsByPublicIdGlobals' from JSON`,
  );
}

/** @internal */
export const DeleteAssetRelationsByPublicIdType$inboundSchema: z.ZodNativeEnum<
  typeof DeleteAssetRelationsByPublicIdType
> = z.nativeEnum(DeleteAssetRelationsByPublicIdType);

/** @internal */
export const DeleteAssetRelationsByPublicIdType$outboundSchema: z.ZodNativeEnum<
  typeof DeleteAssetRelationsByPublicIdType
> = DeleteAssetRelationsByPublicIdType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteAssetRelationsByPublicIdType$ {
  /** @deprecated use `DeleteAssetRelationsByPublicIdType$inboundSchema` instead. */
  export const inboundSchema = DeleteAssetRelationsByPublicIdType$inboundSchema;
  /** @deprecated use `DeleteAssetRelationsByPublicIdType$outboundSchema` instead. */
  export const outboundSchema =
    DeleteAssetRelationsByPublicIdType$outboundSchema;
}

/** @internal */
export const DeleteAssetRelationsByPublicIdRequestBody$inboundSchema: z.ZodType<
  DeleteAssetRelationsByPublicIdRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  assets_to_unrelate: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    "assets_to_unrelate": "assetsToUnrelate",
  });
});

/** @internal */
export type DeleteAssetRelationsByPublicIdRequestBody$Outbound = {
  assets_to_unrelate: Array<string>;
};

/** @internal */
export const DeleteAssetRelationsByPublicIdRequestBody$outboundSchema:
  z.ZodType<
    DeleteAssetRelationsByPublicIdRequestBody$Outbound,
    z.ZodTypeDef,
    DeleteAssetRelationsByPublicIdRequestBody
  > = z.object({
    assetsToUnrelate: z.array(z.string()),
  }).transform((v) => {
    return remap$(v, {
      assetsToUnrelate: "assets_to_unrelate",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteAssetRelationsByPublicIdRequestBody$ {
  /** @deprecated use `DeleteAssetRelationsByPublicIdRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    DeleteAssetRelationsByPublicIdRequestBody$inboundSchema;
  /** @deprecated use `DeleteAssetRelationsByPublicIdRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    DeleteAssetRelationsByPublicIdRequestBody$outboundSchema;
  /** @deprecated use `DeleteAssetRelationsByPublicIdRequestBody$Outbound` instead. */
  export type Outbound = DeleteAssetRelationsByPublicIdRequestBody$Outbound;
}

export function deleteAssetRelationsByPublicIdRequestBodyToJSON(
  deleteAssetRelationsByPublicIdRequestBody:
    DeleteAssetRelationsByPublicIdRequestBody,
): string {
  return JSON.stringify(
    DeleteAssetRelationsByPublicIdRequestBody$outboundSchema.parse(
      deleteAssetRelationsByPublicIdRequestBody,
    ),
  );
}

export function deleteAssetRelationsByPublicIdRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  DeleteAssetRelationsByPublicIdRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeleteAssetRelationsByPublicIdRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeleteAssetRelationsByPublicIdRequestBody' from JSON`,
  );
}

/** @internal */
export const DeleteAssetRelationsByPublicIdRequest$inboundSchema: z.ZodType<
  DeleteAssetRelationsByPublicIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource_type: components.ResourceTypeParameter$inboundSchema,
  type: DeleteAssetRelationsByPublicIdType$inboundSchema.default("upload"),
  public_id: z.string(),
  RequestBody: z.lazy(() =>
    DeleteAssetRelationsByPublicIdRequestBody$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "resource_type": "resourceType",
    "public_id": "publicId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type DeleteAssetRelationsByPublicIdRequest$Outbound = {
  resource_type: string;
  type: string;
  public_id: string;
  RequestBody: DeleteAssetRelationsByPublicIdRequestBody$Outbound;
};

/** @internal */
export const DeleteAssetRelationsByPublicIdRequest$outboundSchema: z.ZodType<
  DeleteAssetRelationsByPublicIdRequest$Outbound,
  z.ZodTypeDef,
  DeleteAssetRelationsByPublicIdRequest
> = z.object({
  resourceType: components.ResourceTypeParameter$outboundSchema,
  type: DeleteAssetRelationsByPublicIdType$outboundSchema.default("upload"),
  publicId: z.string(),
  requestBody: z.lazy(() =>
    DeleteAssetRelationsByPublicIdRequestBody$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    resourceType: "resource_type",
    publicId: "public_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteAssetRelationsByPublicIdRequest$ {
  /** @deprecated use `DeleteAssetRelationsByPublicIdRequest$inboundSchema` instead. */
  export const inboundSchema =
    DeleteAssetRelationsByPublicIdRequest$inboundSchema;
  /** @deprecated use `DeleteAssetRelationsByPublicIdRequest$outboundSchema` instead. */
  export const outboundSchema =
    DeleteAssetRelationsByPublicIdRequest$outboundSchema;
  /** @deprecated use `DeleteAssetRelationsByPublicIdRequest$Outbound` instead. */
  export type Outbound = DeleteAssetRelationsByPublicIdRequest$Outbound;
}

export function deleteAssetRelationsByPublicIdRequestToJSON(
  deleteAssetRelationsByPublicIdRequest: DeleteAssetRelationsByPublicIdRequest,
): string {
  return JSON.stringify(
    DeleteAssetRelationsByPublicIdRequest$outboundSchema.parse(
      deleteAssetRelationsByPublicIdRequest,
    ),
  );
}

export function deleteAssetRelationsByPublicIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteAssetRelationsByPublicIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeleteAssetRelationsByPublicIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteAssetRelationsByPublicIdRequest' from JSON`,
  );
}
