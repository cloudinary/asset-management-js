/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UploadChunkedGlobals = {
  /**
   * The cloud name of your product environment.
   */
  cloudName?: string | undefined;
};

/**
 * The type of resource to upload. "image" for uploading strictly images, "video" for uploading strictly videos, "raw" for uploading non-media files, or "auto" for allowing Cloudinary to automatically detect the type of the uploaded file.
 */
export const UploadChunkedResourceType = {
  Image: "image",
  Video: "video",
  Raw: "raw",
  Auto: "auto",
} as const;
/**
 * The type of resource to upload. "image" for uploading strictly images, "video" for uploading strictly videos, "raw" for uploading non-media files, or "auto" for allowing Cloudinary to automatically detect the type of the uploaded file.
 */
export type UploadChunkedResourceType = ClosedEnum<
  typeof UploadChunkedResourceType
>;

export type UploadChunkedRequest = {
  /**
   * The type of resource to upload. "image" for uploading strictly images, "video" for uploading strictly videos, "raw" for uploading non-media files, or "auto" for allowing Cloudinary to automatically detect the type of the uploaded file.
   */
  resourceType: UploadChunkedResourceType;
  /**
   * The range of bytes being uploaded in the current chunk, in the format "bytes start-end/total". For example, "bytes 0-999999/3000000" indicates the first 1MB chunk of a 3MB file.
   */
  contentRange: string;
  /**
   * A unique identifier for the upload. Must be the same for all chunks of the same file.
   */
  xUniqueUploadId: string;
  uploadRequest: components.UploadRequest;
};

/**
 * Chunk upload successful. For all but the final chunk, this returns upload status. For the final chunk, it returns the complete upload response.
 */
export type UploadChunkedResponseBody =
  | components.NonFinalChunkUploadResponse
  | components.AsyncUploadResponse
  | components.UploadResponse;

export type UploadChunkedResponse =
  | components.NonFinalChunkUploadResponse
  | components.AsyncUploadResponse
  | components.UploadResponse
  | string;

/** @internal */
export const UploadChunkedGlobals$inboundSchema: z.ZodType<
  UploadChunkedGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  cloud_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "cloud_name": "cloudName",
  });
});

/** @internal */
export type UploadChunkedGlobals$Outbound = {
  cloud_name?: string | undefined;
};

/** @internal */
export const UploadChunkedGlobals$outboundSchema: z.ZodType<
  UploadChunkedGlobals$Outbound,
  z.ZodTypeDef,
  UploadChunkedGlobals
> = z.object({
  cloudName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    cloudName: "cloud_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadChunkedGlobals$ {
  /** @deprecated use `UploadChunkedGlobals$inboundSchema` instead. */
  export const inboundSchema = UploadChunkedGlobals$inboundSchema;
  /** @deprecated use `UploadChunkedGlobals$outboundSchema` instead. */
  export const outboundSchema = UploadChunkedGlobals$outboundSchema;
  /** @deprecated use `UploadChunkedGlobals$Outbound` instead. */
  export type Outbound = UploadChunkedGlobals$Outbound;
}

export function uploadChunkedGlobalsToJSON(
  uploadChunkedGlobals: UploadChunkedGlobals,
): string {
  return JSON.stringify(
    UploadChunkedGlobals$outboundSchema.parse(uploadChunkedGlobals),
  );
}

export function uploadChunkedGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<UploadChunkedGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadChunkedGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadChunkedGlobals' from JSON`,
  );
}

/** @internal */
export const UploadChunkedResourceType$inboundSchema: z.ZodNativeEnum<
  typeof UploadChunkedResourceType
> = z.nativeEnum(UploadChunkedResourceType);

/** @internal */
export const UploadChunkedResourceType$outboundSchema: z.ZodNativeEnum<
  typeof UploadChunkedResourceType
> = UploadChunkedResourceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadChunkedResourceType$ {
  /** @deprecated use `UploadChunkedResourceType$inboundSchema` instead. */
  export const inboundSchema = UploadChunkedResourceType$inboundSchema;
  /** @deprecated use `UploadChunkedResourceType$outboundSchema` instead. */
  export const outboundSchema = UploadChunkedResourceType$outboundSchema;
}

/** @internal */
export const UploadChunkedRequest$inboundSchema: z.ZodType<
  UploadChunkedRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource_type: UploadChunkedResourceType$inboundSchema,
  "Content-Range": z.string(),
  "X-Unique-Upload-Id": z.string(),
  upload_request: components.UploadRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "resource_type": "resourceType",
    "Content-Range": "contentRange",
    "X-Unique-Upload-Id": "xUniqueUploadId",
    "upload_request": "uploadRequest",
  });
});

/** @internal */
export type UploadChunkedRequest$Outbound = {
  resource_type: string;
  "Content-Range": string;
  "X-Unique-Upload-Id": string;
  upload_request: components.UploadRequest$Outbound;
};

/** @internal */
export const UploadChunkedRequest$outboundSchema: z.ZodType<
  UploadChunkedRequest$Outbound,
  z.ZodTypeDef,
  UploadChunkedRequest
> = z.object({
  resourceType: UploadChunkedResourceType$outboundSchema,
  contentRange: z.string(),
  xUniqueUploadId: z.string(),
  uploadRequest: components.UploadRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    resourceType: "resource_type",
    contentRange: "Content-Range",
    xUniqueUploadId: "X-Unique-Upload-Id",
    uploadRequest: "upload_request",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadChunkedRequest$ {
  /** @deprecated use `UploadChunkedRequest$inboundSchema` instead. */
  export const inboundSchema = UploadChunkedRequest$inboundSchema;
  /** @deprecated use `UploadChunkedRequest$outboundSchema` instead. */
  export const outboundSchema = UploadChunkedRequest$outboundSchema;
  /** @deprecated use `UploadChunkedRequest$Outbound` instead. */
  export type Outbound = UploadChunkedRequest$Outbound;
}

export function uploadChunkedRequestToJSON(
  uploadChunkedRequest: UploadChunkedRequest,
): string {
  return JSON.stringify(
    UploadChunkedRequest$outboundSchema.parse(uploadChunkedRequest),
  );
}

export function uploadChunkedRequestFromJSON(
  jsonString: string,
): SafeParseResult<UploadChunkedRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadChunkedRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadChunkedRequest' from JSON`,
  );
}

/** @internal */
export const UploadChunkedResponseBody$inboundSchema: z.ZodType<
  UploadChunkedResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.NonFinalChunkUploadResponse$inboundSchema,
  components.AsyncUploadResponse$inboundSchema,
  components.UploadResponse$inboundSchema,
]);

/** @internal */
export type UploadChunkedResponseBody$Outbound =
  | components.NonFinalChunkUploadResponse$Outbound
  | components.AsyncUploadResponse$Outbound
  | components.UploadResponse$Outbound;

/** @internal */
export const UploadChunkedResponseBody$outboundSchema: z.ZodType<
  UploadChunkedResponseBody$Outbound,
  z.ZodTypeDef,
  UploadChunkedResponseBody
> = z.union([
  components.NonFinalChunkUploadResponse$outboundSchema,
  components.AsyncUploadResponse$outboundSchema,
  components.UploadResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadChunkedResponseBody$ {
  /** @deprecated use `UploadChunkedResponseBody$inboundSchema` instead. */
  export const inboundSchema = UploadChunkedResponseBody$inboundSchema;
  /** @deprecated use `UploadChunkedResponseBody$outboundSchema` instead. */
  export const outboundSchema = UploadChunkedResponseBody$outboundSchema;
  /** @deprecated use `UploadChunkedResponseBody$Outbound` instead. */
  export type Outbound = UploadChunkedResponseBody$Outbound;
}

export function uploadChunkedResponseBodyToJSON(
  uploadChunkedResponseBody: UploadChunkedResponseBody,
): string {
  return JSON.stringify(
    UploadChunkedResponseBody$outboundSchema.parse(uploadChunkedResponseBody),
  );
}

export function uploadChunkedResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<UploadChunkedResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadChunkedResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadChunkedResponseBody' from JSON`,
  );
}

/** @internal */
export const UploadChunkedResponse$inboundSchema: z.ZodType<
  UploadChunkedResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.union([
    components.NonFinalChunkUploadResponse$inboundSchema,
    components.AsyncUploadResponse$inboundSchema,
    components.UploadResponse$inboundSchema,
  ]),
  z.string(),
]);

/** @internal */
export type UploadChunkedResponse$Outbound =
  | components.NonFinalChunkUploadResponse$Outbound
  | components.AsyncUploadResponse$Outbound
  | components.UploadResponse$Outbound
  | string;

/** @internal */
export const UploadChunkedResponse$outboundSchema: z.ZodType<
  UploadChunkedResponse$Outbound,
  z.ZodTypeDef,
  UploadChunkedResponse
> = z.union([
  z.union([
    components.NonFinalChunkUploadResponse$outboundSchema,
    components.AsyncUploadResponse$outboundSchema,
    components.UploadResponse$outboundSchema,
  ]),
  z.string(),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadChunkedResponse$ {
  /** @deprecated use `UploadChunkedResponse$inboundSchema` instead. */
  export const inboundSchema = UploadChunkedResponse$inboundSchema;
  /** @deprecated use `UploadChunkedResponse$outboundSchema` instead. */
  export const outboundSchema = UploadChunkedResponse$outboundSchema;
  /** @deprecated use `UploadChunkedResponse$Outbound` instead. */
  export type Outbound = UploadChunkedResponse$Outbound;
}

export function uploadChunkedResponseToJSON(
  uploadChunkedResponse: UploadChunkedResponse,
): string {
  return JSON.stringify(
    UploadChunkedResponse$outboundSchema.parse(uploadChunkedResponse),
  );
}

export function uploadChunkedResponseFromJSON(
  jsonString: string,
): SafeParseResult<UploadChunkedResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadChunkedResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadChunkedResponse' from JSON`,
  );
}
