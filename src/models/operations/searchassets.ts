/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SearchAssetsGlobals = {
  /**
   * The cloud name of your product environment.
   */
  cloudName?: string | undefined;
};

/** @internal */
export const SearchAssetsGlobals$inboundSchema: z.ZodType<
  SearchAssetsGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  cloud_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "cloud_name": "cloudName",
  });
});

/** @internal */
export type SearchAssetsGlobals$Outbound = {
  cloud_name?: string | undefined;
};

/** @internal */
export const SearchAssetsGlobals$outboundSchema: z.ZodType<
  SearchAssetsGlobals$Outbound,
  z.ZodTypeDef,
  SearchAssetsGlobals
> = z.object({
  cloudName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    cloudName: "cloud_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAssetsGlobals$ {
  /** @deprecated use `SearchAssetsGlobals$inboundSchema` instead. */
  export const inboundSchema = SearchAssetsGlobals$inboundSchema;
  /** @deprecated use `SearchAssetsGlobals$outboundSchema` instead. */
  export const outboundSchema = SearchAssetsGlobals$outboundSchema;
  /** @deprecated use `SearchAssetsGlobals$Outbound` instead. */
  export type Outbound = SearchAssetsGlobals$Outbound;
}

export function searchAssetsGlobalsToJSON(
  searchAssetsGlobals: SearchAssetsGlobals,
): string {
  return JSON.stringify(
    SearchAssetsGlobals$outboundSchema.parse(searchAssetsGlobals),
  );
}

export function searchAssetsGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<SearchAssetsGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchAssetsGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchAssetsGlobals' from JSON`,
  );
}
