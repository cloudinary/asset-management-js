/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RenameAssetGlobals = {
  /**
   * The cloud name of your product environment.
   */
  cloudName?: string | undefined;
};

/**
 * The type of resource to rename. "image", "video", or "raw".
 */
export const RenameAssetResourceType = {
  Image: "image",
  Video: "video",
  Raw: "raw",
} as const;
/**
 * The type of resource to rename. "image", "video", or "raw".
 */
export type RenameAssetResourceType = ClosedEnum<
  typeof RenameAssetResourceType
>;

/**
 * The storage type of the asset. Defaults to 'upload'.
 */
export const RenameAssetType = {
  Upload: "upload",
  Private: "private",
  Authenticated: "authenticated",
} as const;
/**
 * The storage type of the asset. Defaults to 'upload'.
 */
export type RenameAssetType = ClosedEnum<typeof RenameAssetType>;

/**
 * The new storage type for the asset.
 */
export const ToType = {
  Upload: "upload",
  Private: "private",
  Authenticated: "authenticated",
} as const;
/**
 * The new storage type for the asset.
 */
export type ToType = ClosedEnum<typeof ToType>;

export type RenameAssetRequestBody = {
  /**
   * (Required for signed REST API calls) Used to authenticate the request and based on the parameters you use in the request. When using the Cloudinary SDKs for signed requests, the signature is automatically generated and added to the request. If you manually generate your own signed POST request, you need to manually generate the signature parameter and add it to the request together with the api_key and timestamp parameters.
   *
   * @remarks
   */
  signature?: string | undefined;
  /**
   * The timestamp to use for the request in unix time. This is automatically computed by the Cloudinary's SDKs.
   */
  timestamp?: number | undefined;
  /**
   * The API key to use for the request. This is automatically computed by the Cloudinary's SDKs.
   */
  apiKey?: string | undefined;
  /**
   * The public ID of the asset to rename.
   */
  fromPublicId: string;
  /**
   * The new public ID for the asset.
   */
  toPublicId: string;
  /**
   * The storage type of the asset. Defaults to 'upload'.
   */
  type?: RenameAssetType | undefined;
  /**
   * The new storage type for the asset.
   */
  toType?: ToType | undefined;
  /**
   * Whether to overwrite the target asset if it already exists.
   */
  overwrite?: boolean | undefined;
  /**
   * Whether to invalidate the CDN cache for the renamed asset.
   */
  invalidate?: boolean | undefined;
  /**
   * Context metadata to update during rename.
   */
  context?: string | undefined;
  /**
   * Structured metadata to update during rename.
   */
  metadata?: string | undefined;
  /**
   * URL to notify when the operation is complete.
   */
  notificationUrl?: string | undefined;
};

export type RenameAssetRequest = {
  /**
   * The type of resource to rename. "image", "video", or "raw".
   */
  resourceType: RenameAssetResourceType;
  requestBody: RenameAssetRequestBody;
};

/** @internal */
export const RenameAssetGlobals$inboundSchema: z.ZodType<
  RenameAssetGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  cloud_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "cloud_name": "cloudName",
  });
});

/** @internal */
export type RenameAssetGlobals$Outbound = {
  cloud_name?: string | undefined;
};

/** @internal */
export const RenameAssetGlobals$outboundSchema: z.ZodType<
  RenameAssetGlobals$Outbound,
  z.ZodTypeDef,
  RenameAssetGlobals
> = z.object({
  cloudName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    cloudName: "cloud_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RenameAssetGlobals$ {
  /** @deprecated use `RenameAssetGlobals$inboundSchema` instead. */
  export const inboundSchema = RenameAssetGlobals$inboundSchema;
  /** @deprecated use `RenameAssetGlobals$outboundSchema` instead. */
  export const outboundSchema = RenameAssetGlobals$outboundSchema;
  /** @deprecated use `RenameAssetGlobals$Outbound` instead. */
  export type Outbound = RenameAssetGlobals$Outbound;
}

export function renameAssetGlobalsToJSON(
  renameAssetGlobals: RenameAssetGlobals,
): string {
  return JSON.stringify(
    RenameAssetGlobals$outboundSchema.parse(renameAssetGlobals),
  );
}

export function renameAssetGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<RenameAssetGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RenameAssetGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RenameAssetGlobals' from JSON`,
  );
}

/** @internal */
export const RenameAssetResourceType$inboundSchema: z.ZodNativeEnum<
  typeof RenameAssetResourceType
> = z.nativeEnum(RenameAssetResourceType);

/** @internal */
export const RenameAssetResourceType$outboundSchema: z.ZodNativeEnum<
  typeof RenameAssetResourceType
> = RenameAssetResourceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RenameAssetResourceType$ {
  /** @deprecated use `RenameAssetResourceType$inboundSchema` instead. */
  export const inboundSchema = RenameAssetResourceType$inboundSchema;
  /** @deprecated use `RenameAssetResourceType$outboundSchema` instead. */
  export const outboundSchema = RenameAssetResourceType$outboundSchema;
}

/** @internal */
export const RenameAssetType$inboundSchema: z.ZodNativeEnum<
  typeof RenameAssetType
> = z.nativeEnum(RenameAssetType);

/** @internal */
export const RenameAssetType$outboundSchema: z.ZodNativeEnum<
  typeof RenameAssetType
> = RenameAssetType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RenameAssetType$ {
  /** @deprecated use `RenameAssetType$inboundSchema` instead. */
  export const inboundSchema = RenameAssetType$inboundSchema;
  /** @deprecated use `RenameAssetType$outboundSchema` instead. */
  export const outboundSchema = RenameAssetType$outboundSchema;
}

/** @internal */
export const ToType$inboundSchema: z.ZodNativeEnum<typeof ToType> = z
  .nativeEnum(ToType);

/** @internal */
export const ToType$outboundSchema: z.ZodNativeEnum<typeof ToType> =
  ToType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToType$ {
  /** @deprecated use `ToType$inboundSchema` instead. */
  export const inboundSchema = ToType$inboundSchema;
  /** @deprecated use `ToType$outboundSchema` instead. */
  export const outboundSchema = ToType$outboundSchema;
}

/** @internal */
export const RenameAssetRequestBody$inboundSchema: z.ZodType<
  RenameAssetRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  signature: z.string().optional(),
  timestamp: z.number().int().optional(),
  api_key: z.string().optional(),
  from_public_id: z.string(),
  to_public_id: z.string(),
  type: RenameAssetType$inboundSchema.optional(),
  to_type: ToType$inboundSchema.optional(),
  overwrite: z.boolean().optional(),
  invalidate: z.boolean().optional(),
  context: z.string().optional(),
  metadata: z.string().optional(),
  notification_url: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "api_key": "apiKey",
    "from_public_id": "fromPublicId",
    "to_public_id": "toPublicId",
    "to_type": "toType",
    "notification_url": "notificationUrl",
  });
});

/** @internal */
export type RenameAssetRequestBody$Outbound = {
  signature?: string | undefined;
  timestamp?: number | undefined;
  api_key?: string | undefined;
  from_public_id: string;
  to_public_id: string;
  type?: string | undefined;
  to_type?: string | undefined;
  overwrite?: boolean | undefined;
  invalidate?: boolean | undefined;
  context?: string | undefined;
  metadata?: string | undefined;
  notification_url?: string | undefined;
};

/** @internal */
export const RenameAssetRequestBody$outboundSchema: z.ZodType<
  RenameAssetRequestBody$Outbound,
  z.ZodTypeDef,
  RenameAssetRequestBody
> = z.object({
  signature: z.string().optional(),
  timestamp: z.number().int().optional(),
  apiKey: z.string().optional(),
  fromPublicId: z.string(),
  toPublicId: z.string(),
  type: RenameAssetType$outboundSchema.optional(),
  toType: ToType$outboundSchema.optional(),
  overwrite: z.boolean().optional(),
  invalidate: z.boolean().optional(),
  context: z.string().optional(),
  metadata: z.string().optional(),
  notificationUrl: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    apiKey: "api_key",
    fromPublicId: "from_public_id",
    toPublicId: "to_public_id",
    toType: "to_type",
    notificationUrl: "notification_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RenameAssetRequestBody$ {
  /** @deprecated use `RenameAssetRequestBody$inboundSchema` instead. */
  export const inboundSchema = RenameAssetRequestBody$inboundSchema;
  /** @deprecated use `RenameAssetRequestBody$outboundSchema` instead. */
  export const outboundSchema = RenameAssetRequestBody$outboundSchema;
  /** @deprecated use `RenameAssetRequestBody$Outbound` instead. */
  export type Outbound = RenameAssetRequestBody$Outbound;
}

export function renameAssetRequestBodyToJSON(
  renameAssetRequestBody: RenameAssetRequestBody,
): string {
  return JSON.stringify(
    RenameAssetRequestBody$outboundSchema.parse(renameAssetRequestBody),
  );
}

export function renameAssetRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<RenameAssetRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RenameAssetRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RenameAssetRequestBody' from JSON`,
  );
}

/** @internal */
export const RenameAssetRequest$inboundSchema: z.ZodType<
  RenameAssetRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource_type: RenameAssetResourceType$inboundSchema,
  RequestBody: z.lazy(() => RenameAssetRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "resource_type": "resourceType",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type RenameAssetRequest$Outbound = {
  resource_type: string;
  RequestBody: RenameAssetRequestBody$Outbound;
};

/** @internal */
export const RenameAssetRequest$outboundSchema: z.ZodType<
  RenameAssetRequest$Outbound,
  z.ZodTypeDef,
  RenameAssetRequest
> = z.object({
  resourceType: RenameAssetResourceType$outboundSchema,
  requestBody: z.lazy(() => RenameAssetRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    resourceType: "resource_type",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RenameAssetRequest$ {
  /** @deprecated use `RenameAssetRequest$inboundSchema` instead. */
  export const inboundSchema = RenameAssetRequest$inboundSchema;
  /** @deprecated use `RenameAssetRequest$outboundSchema` instead. */
  export const outboundSchema = RenameAssetRequest$outboundSchema;
  /** @deprecated use `RenameAssetRequest$Outbound` instead. */
  export type Outbound = RenameAssetRequest$Outbound;
}

export function renameAssetRequestToJSON(
  renameAssetRequest: RenameAssetRequest,
): string {
  return JSON.stringify(
    RenameAssetRequest$outboundSchema.parse(renameAssetRequest),
  );
}

export function renameAssetRequestFromJSON(
  jsonString: string,
): SafeParseResult<RenameAssetRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RenameAssetRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RenameAssetRequest' from JSON`,
  );
}
