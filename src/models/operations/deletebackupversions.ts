/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteBackupVersionsGlobals = {
  /**
   * The cloud name of your product environment.
   */
  cloudName?: string | undefined;
};

export type DeleteBackupVersionsRequestBody = {
  /**
   * The list of version IDs to delete from backup.
   */
  versionIds: Array<string>;
};

export type DeleteBackupVersionsRequest = {
  /**
   * The asset ID of the resource.
   */
  assetId: string;
  requestBody: DeleteBackupVersionsRequestBody;
};

export type Failure = {
  /**
   * The version ID that failed to delete.
   */
  versionId?: string | undefined;
  /**
   * The error message explaining the failure.
   */
  error?: string | undefined;
};

/**
 * Multi-status - some versions deleted successfully, others failed
 */
export type DeleteBackupVersionsResponseBody2 = {
  /**
   * The asset ID of the resource.
   */
  assetId: string;
  /**
   * The list of version IDs that were successfully deleted.
   */
  deletedVersionIds: Array<string>;
  /**
   * The list of version IDs that failed to delete with error messages.
   */
  failures?: Array<Failure> | undefined;
};

/**
 * Backup versions successfully deleted
 */
export type DeleteBackupVersionsResponseBody1 = {
  /**
   * The asset ID of the resource.
   */
  assetId: string;
  /**
   * The list of version IDs that were successfully deleted.
   */
  deletedVersionIds: Array<string>;
};

export type DeleteBackupVersionsResponse =
  | DeleteBackupVersionsResponseBody1
  | DeleteBackupVersionsResponseBody2;

/** @internal */
export const DeleteBackupVersionsGlobals$inboundSchema: z.ZodType<
  DeleteBackupVersionsGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  cloud_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "cloud_name": "cloudName",
  });
});

/** @internal */
export type DeleteBackupVersionsGlobals$Outbound = {
  cloud_name?: string | undefined;
};

/** @internal */
export const DeleteBackupVersionsGlobals$outboundSchema: z.ZodType<
  DeleteBackupVersionsGlobals$Outbound,
  z.ZodTypeDef,
  DeleteBackupVersionsGlobals
> = z.object({
  cloudName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    cloudName: "cloud_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteBackupVersionsGlobals$ {
  /** @deprecated use `DeleteBackupVersionsGlobals$inboundSchema` instead. */
  export const inboundSchema = DeleteBackupVersionsGlobals$inboundSchema;
  /** @deprecated use `DeleteBackupVersionsGlobals$outboundSchema` instead. */
  export const outboundSchema = DeleteBackupVersionsGlobals$outboundSchema;
  /** @deprecated use `DeleteBackupVersionsGlobals$Outbound` instead. */
  export type Outbound = DeleteBackupVersionsGlobals$Outbound;
}

export function deleteBackupVersionsGlobalsToJSON(
  deleteBackupVersionsGlobals: DeleteBackupVersionsGlobals,
): string {
  return JSON.stringify(
    DeleteBackupVersionsGlobals$outboundSchema.parse(
      deleteBackupVersionsGlobals,
    ),
  );
}

export function deleteBackupVersionsGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<DeleteBackupVersionsGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteBackupVersionsGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteBackupVersionsGlobals' from JSON`,
  );
}

/** @internal */
export const DeleteBackupVersionsRequestBody$inboundSchema: z.ZodType<
  DeleteBackupVersionsRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  version_ids: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    "version_ids": "versionIds",
  });
});

/** @internal */
export type DeleteBackupVersionsRequestBody$Outbound = {
  version_ids: Array<string>;
};

/** @internal */
export const DeleteBackupVersionsRequestBody$outboundSchema: z.ZodType<
  DeleteBackupVersionsRequestBody$Outbound,
  z.ZodTypeDef,
  DeleteBackupVersionsRequestBody
> = z.object({
  versionIds: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    versionIds: "version_ids",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteBackupVersionsRequestBody$ {
  /** @deprecated use `DeleteBackupVersionsRequestBody$inboundSchema` instead. */
  export const inboundSchema = DeleteBackupVersionsRequestBody$inboundSchema;
  /** @deprecated use `DeleteBackupVersionsRequestBody$outboundSchema` instead. */
  export const outboundSchema = DeleteBackupVersionsRequestBody$outboundSchema;
  /** @deprecated use `DeleteBackupVersionsRequestBody$Outbound` instead. */
  export type Outbound = DeleteBackupVersionsRequestBody$Outbound;
}

export function deleteBackupVersionsRequestBodyToJSON(
  deleteBackupVersionsRequestBody: DeleteBackupVersionsRequestBody,
): string {
  return JSON.stringify(
    DeleteBackupVersionsRequestBody$outboundSchema.parse(
      deleteBackupVersionsRequestBody,
    ),
  );
}

export function deleteBackupVersionsRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<DeleteBackupVersionsRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteBackupVersionsRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteBackupVersionsRequestBody' from JSON`,
  );
}

/** @internal */
export const DeleteBackupVersionsRequest$inboundSchema: z.ZodType<
  DeleteBackupVersionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  asset_id: z.string(),
  RequestBody: z.lazy(() => DeleteBackupVersionsRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "asset_id": "assetId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type DeleteBackupVersionsRequest$Outbound = {
  asset_id: string;
  RequestBody: DeleteBackupVersionsRequestBody$Outbound;
};

/** @internal */
export const DeleteBackupVersionsRequest$outboundSchema: z.ZodType<
  DeleteBackupVersionsRequest$Outbound,
  z.ZodTypeDef,
  DeleteBackupVersionsRequest
> = z.object({
  assetId: z.string(),
  requestBody: z.lazy(() => DeleteBackupVersionsRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    assetId: "asset_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteBackupVersionsRequest$ {
  /** @deprecated use `DeleteBackupVersionsRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteBackupVersionsRequest$inboundSchema;
  /** @deprecated use `DeleteBackupVersionsRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteBackupVersionsRequest$outboundSchema;
  /** @deprecated use `DeleteBackupVersionsRequest$Outbound` instead. */
  export type Outbound = DeleteBackupVersionsRequest$Outbound;
}

export function deleteBackupVersionsRequestToJSON(
  deleteBackupVersionsRequest: DeleteBackupVersionsRequest,
): string {
  return JSON.stringify(
    DeleteBackupVersionsRequest$outboundSchema.parse(
      deleteBackupVersionsRequest,
    ),
  );
}

export function deleteBackupVersionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteBackupVersionsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteBackupVersionsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteBackupVersionsRequest' from JSON`,
  );
}

/** @internal */
export const Failure$inboundSchema: z.ZodType<Failure, z.ZodTypeDef, unknown> =
  z.object({
    version_id: z.string().optional(),
    error: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "version_id": "versionId",
    });
  });

/** @internal */
export type Failure$Outbound = {
  version_id?: string | undefined;
  error?: string | undefined;
};

/** @internal */
export const Failure$outboundSchema: z.ZodType<
  Failure$Outbound,
  z.ZodTypeDef,
  Failure
> = z.object({
  versionId: z.string().optional(),
  error: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    versionId: "version_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Failure$ {
  /** @deprecated use `Failure$inboundSchema` instead. */
  export const inboundSchema = Failure$inboundSchema;
  /** @deprecated use `Failure$outboundSchema` instead. */
  export const outboundSchema = Failure$outboundSchema;
  /** @deprecated use `Failure$Outbound` instead. */
  export type Outbound = Failure$Outbound;
}

export function failureToJSON(failure: Failure): string {
  return JSON.stringify(Failure$outboundSchema.parse(failure));
}

export function failureFromJSON(
  jsonString: string,
): SafeParseResult<Failure, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Failure$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Failure' from JSON`,
  );
}

/** @internal */
export const DeleteBackupVersionsResponseBody2$inboundSchema: z.ZodType<
  DeleteBackupVersionsResponseBody2,
  z.ZodTypeDef,
  unknown
> = z.object({
  asset_id: z.string(),
  deleted_version_ids: z.array(z.string()),
  failures: z.array(z.lazy(() => Failure$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "asset_id": "assetId",
    "deleted_version_ids": "deletedVersionIds",
  });
});

/** @internal */
export type DeleteBackupVersionsResponseBody2$Outbound = {
  asset_id: string;
  deleted_version_ids: Array<string>;
  failures?: Array<Failure$Outbound> | undefined;
};

/** @internal */
export const DeleteBackupVersionsResponseBody2$outboundSchema: z.ZodType<
  DeleteBackupVersionsResponseBody2$Outbound,
  z.ZodTypeDef,
  DeleteBackupVersionsResponseBody2
> = z.object({
  assetId: z.string(),
  deletedVersionIds: z.array(z.string()),
  failures: z.array(z.lazy(() => Failure$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    assetId: "asset_id",
    deletedVersionIds: "deleted_version_ids",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteBackupVersionsResponseBody2$ {
  /** @deprecated use `DeleteBackupVersionsResponseBody2$inboundSchema` instead. */
  export const inboundSchema = DeleteBackupVersionsResponseBody2$inboundSchema;
  /** @deprecated use `DeleteBackupVersionsResponseBody2$outboundSchema` instead. */
  export const outboundSchema =
    DeleteBackupVersionsResponseBody2$outboundSchema;
  /** @deprecated use `DeleteBackupVersionsResponseBody2$Outbound` instead. */
  export type Outbound = DeleteBackupVersionsResponseBody2$Outbound;
}

export function deleteBackupVersionsResponseBody2ToJSON(
  deleteBackupVersionsResponseBody2: DeleteBackupVersionsResponseBody2,
): string {
  return JSON.stringify(
    DeleteBackupVersionsResponseBody2$outboundSchema.parse(
      deleteBackupVersionsResponseBody2,
    ),
  );
}

export function deleteBackupVersionsResponseBody2FromJSON(
  jsonString: string,
): SafeParseResult<DeleteBackupVersionsResponseBody2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteBackupVersionsResponseBody2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteBackupVersionsResponseBody2' from JSON`,
  );
}

/** @internal */
export const DeleteBackupVersionsResponseBody1$inboundSchema: z.ZodType<
  DeleteBackupVersionsResponseBody1,
  z.ZodTypeDef,
  unknown
> = z.object({
  asset_id: z.string(),
  deleted_version_ids: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    "asset_id": "assetId",
    "deleted_version_ids": "deletedVersionIds",
  });
});

/** @internal */
export type DeleteBackupVersionsResponseBody1$Outbound = {
  asset_id: string;
  deleted_version_ids: Array<string>;
};

/** @internal */
export const DeleteBackupVersionsResponseBody1$outboundSchema: z.ZodType<
  DeleteBackupVersionsResponseBody1$Outbound,
  z.ZodTypeDef,
  DeleteBackupVersionsResponseBody1
> = z.object({
  assetId: z.string(),
  deletedVersionIds: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    assetId: "asset_id",
    deletedVersionIds: "deleted_version_ids",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteBackupVersionsResponseBody1$ {
  /** @deprecated use `DeleteBackupVersionsResponseBody1$inboundSchema` instead. */
  export const inboundSchema = DeleteBackupVersionsResponseBody1$inboundSchema;
  /** @deprecated use `DeleteBackupVersionsResponseBody1$outboundSchema` instead. */
  export const outboundSchema =
    DeleteBackupVersionsResponseBody1$outboundSchema;
  /** @deprecated use `DeleteBackupVersionsResponseBody1$Outbound` instead. */
  export type Outbound = DeleteBackupVersionsResponseBody1$Outbound;
}

export function deleteBackupVersionsResponseBody1ToJSON(
  deleteBackupVersionsResponseBody1: DeleteBackupVersionsResponseBody1,
): string {
  return JSON.stringify(
    DeleteBackupVersionsResponseBody1$outboundSchema.parse(
      deleteBackupVersionsResponseBody1,
    ),
  );
}

export function deleteBackupVersionsResponseBody1FromJSON(
  jsonString: string,
): SafeParseResult<DeleteBackupVersionsResponseBody1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteBackupVersionsResponseBody1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteBackupVersionsResponseBody1' from JSON`,
  );
}

/** @internal */
export const DeleteBackupVersionsResponse$inboundSchema: z.ZodType<
  DeleteBackupVersionsResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => DeleteBackupVersionsResponseBody1$inboundSchema),
  z.lazy(() => DeleteBackupVersionsResponseBody2$inboundSchema),
]);

/** @internal */
export type DeleteBackupVersionsResponse$Outbound =
  | DeleteBackupVersionsResponseBody1$Outbound
  | DeleteBackupVersionsResponseBody2$Outbound;

/** @internal */
export const DeleteBackupVersionsResponse$outboundSchema: z.ZodType<
  DeleteBackupVersionsResponse$Outbound,
  z.ZodTypeDef,
  DeleteBackupVersionsResponse
> = z.union([
  z.lazy(() => DeleteBackupVersionsResponseBody1$outboundSchema),
  z.lazy(() => DeleteBackupVersionsResponseBody2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteBackupVersionsResponse$ {
  /** @deprecated use `DeleteBackupVersionsResponse$inboundSchema` instead. */
  export const inboundSchema = DeleteBackupVersionsResponse$inboundSchema;
  /** @deprecated use `DeleteBackupVersionsResponse$outboundSchema` instead. */
  export const outboundSchema = DeleteBackupVersionsResponse$outboundSchema;
  /** @deprecated use `DeleteBackupVersionsResponse$Outbound` instead. */
  export type Outbound = DeleteBackupVersionsResponse$Outbound;
}

export function deleteBackupVersionsResponseToJSON(
  deleteBackupVersionsResponse: DeleteBackupVersionsResponse,
): string {
  return JSON.stringify(
    DeleteBackupVersionsResponse$outboundSchema.parse(
      deleteBackupVersionsResponse,
    ),
  );
}

export function deleteBackupVersionsResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeleteBackupVersionsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteBackupVersionsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteBackupVersionsResponse' from JSON`,
  );
}
