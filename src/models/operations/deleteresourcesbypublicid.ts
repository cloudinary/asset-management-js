/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteResourcesByPublicIdGlobals = {
  /**
   * The cloud name of your product environment.
   */
  cloudName?: string | undefined;
};

export type DeleteResourcesByPublicIdRequest = {
  /**
   * The type of resource.
   */
  resourceType: components.ResourceType;
  /**
   * The extended storage type of the resource.
   */
  type: components.ExtendedStorageType;
  deleteResourceByPublicIdsRequest:
    components.DeleteResourceByPublicIdsRequestUnion;
};

/**
 * Resource successfully deleted
 */
export type DeleteResourcesByPublicIdResponse = {};

/** @internal */
export const DeleteResourcesByPublicIdGlobals$inboundSchema: z.ZodType<
  DeleteResourcesByPublicIdGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  cloud_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "cloud_name": "cloudName",
  });
});

/** @internal */
export type DeleteResourcesByPublicIdGlobals$Outbound = {
  cloud_name?: string | undefined;
};

/** @internal */
export const DeleteResourcesByPublicIdGlobals$outboundSchema: z.ZodType<
  DeleteResourcesByPublicIdGlobals$Outbound,
  z.ZodTypeDef,
  DeleteResourcesByPublicIdGlobals
> = z.object({
  cloudName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    cloudName: "cloud_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteResourcesByPublicIdGlobals$ {
  /** @deprecated use `DeleteResourcesByPublicIdGlobals$inboundSchema` instead. */
  export const inboundSchema = DeleteResourcesByPublicIdGlobals$inboundSchema;
  /** @deprecated use `DeleteResourcesByPublicIdGlobals$outboundSchema` instead. */
  export const outboundSchema = DeleteResourcesByPublicIdGlobals$outboundSchema;
  /** @deprecated use `DeleteResourcesByPublicIdGlobals$Outbound` instead. */
  export type Outbound = DeleteResourcesByPublicIdGlobals$Outbound;
}

export function deleteResourcesByPublicIdGlobalsToJSON(
  deleteResourcesByPublicIdGlobals: DeleteResourcesByPublicIdGlobals,
): string {
  return JSON.stringify(
    DeleteResourcesByPublicIdGlobals$outboundSchema.parse(
      deleteResourcesByPublicIdGlobals,
    ),
  );
}

export function deleteResourcesByPublicIdGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<DeleteResourcesByPublicIdGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteResourcesByPublicIdGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteResourcesByPublicIdGlobals' from JSON`,
  );
}

/** @internal */
export const DeleteResourcesByPublicIdRequest$inboundSchema: z.ZodType<
  DeleteResourcesByPublicIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource_type: components.ResourceType$inboundSchema,
  type: components.ExtendedStorageType$inboundSchema,
  DeleteResourceByPublicIdsRequest:
    components.DeleteResourceByPublicIdsRequestUnion$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "resource_type": "resourceType",
    "DeleteResourceByPublicIdsRequest": "deleteResourceByPublicIdsRequest",
  });
});

/** @internal */
export type DeleteResourcesByPublicIdRequest$Outbound = {
  resource_type: string;
  type: string;
  DeleteResourceByPublicIdsRequest:
    components.DeleteResourceByPublicIdsRequestUnion$Outbound;
};

/** @internal */
export const DeleteResourcesByPublicIdRequest$outboundSchema: z.ZodType<
  DeleteResourcesByPublicIdRequest$Outbound,
  z.ZodTypeDef,
  DeleteResourcesByPublicIdRequest
> = z.object({
  resourceType: components.ResourceType$outboundSchema,
  type: components.ExtendedStorageType$outboundSchema,
  deleteResourceByPublicIdsRequest:
    components.DeleteResourceByPublicIdsRequestUnion$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    resourceType: "resource_type",
    deleteResourceByPublicIdsRequest: "DeleteResourceByPublicIdsRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteResourcesByPublicIdRequest$ {
  /** @deprecated use `DeleteResourcesByPublicIdRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteResourcesByPublicIdRequest$inboundSchema;
  /** @deprecated use `DeleteResourcesByPublicIdRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteResourcesByPublicIdRequest$outboundSchema;
  /** @deprecated use `DeleteResourcesByPublicIdRequest$Outbound` instead. */
  export type Outbound = DeleteResourcesByPublicIdRequest$Outbound;
}

export function deleteResourcesByPublicIdRequestToJSON(
  deleteResourcesByPublicIdRequest: DeleteResourcesByPublicIdRequest,
): string {
  return JSON.stringify(
    DeleteResourcesByPublicIdRequest$outboundSchema.parse(
      deleteResourcesByPublicIdRequest,
    ),
  );
}

export function deleteResourcesByPublicIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteResourcesByPublicIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteResourcesByPublicIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteResourcesByPublicIdRequest' from JSON`,
  );
}

/** @internal */
export const DeleteResourcesByPublicIdResponse$inboundSchema: z.ZodType<
  DeleteResourcesByPublicIdResponse,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type DeleteResourcesByPublicIdResponse$Outbound = {};

/** @internal */
export const DeleteResourcesByPublicIdResponse$outboundSchema: z.ZodType<
  DeleteResourcesByPublicIdResponse$Outbound,
  z.ZodTypeDef,
  DeleteResourcesByPublicIdResponse
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteResourcesByPublicIdResponse$ {
  /** @deprecated use `DeleteResourcesByPublicIdResponse$inboundSchema` instead. */
  export const inboundSchema = DeleteResourcesByPublicIdResponse$inboundSchema;
  /** @deprecated use `DeleteResourcesByPublicIdResponse$outboundSchema` instead. */
  export const outboundSchema =
    DeleteResourcesByPublicIdResponse$outboundSchema;
  /** @deprecated use `DeleteResourcesByPublicIdResponse$Outbound` instead. */
  export type Outbound = DeleteResourcesByPublicIdResponse$Outbound;
}

export function deleteResourcesByPublicIdResponseToJSON(
  deleteResourcesByPublicIdResponse: DeleteResourcesByPublicIdResponse,
): string {
  return JSON.stringify(
    DeleteResourcesByPublicIdResponse$outboundSchema.parse(
      deleteResourcesByPublicIdResponse,
    ),
  );
}

export function deleteResourcesByPublicIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeleteResourcesByPublicIdResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteResourcesByPublicIdResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteResourcesByPublicIdResponse' from JSON`,
  );
}
