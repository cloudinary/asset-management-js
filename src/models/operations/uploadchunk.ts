/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UploadChunkGlobals = {
  /**
   * The cloud name of your product environment.
   */
  cloudName?: string | undefined;
};

export type UploadChunkRequest = {
  /**
   * The type of resource to upload:
   *
   * @remarks
   * - "image" for uploading strictly images
   * - "video" for uploading strictly videos
   * - "raw" for uploading non-media files
   * - "auto" for allowing Cloudinary to automatically detect the type of the uploaded file
   */
  resourceType?: components.UploadResourceType | undefined;
  /**
   * The range of bytes being uploaded in the current chunk, in the format "bytes start-end/total". For example, "bytes 0-999999/3000000" indicates the first 1MB chunk of a 3MB file.
   */
  contentRange: string;
  /**
   * A unique identifier for the upload. Must be the same for all chunks of the same file.
   */
  xUniqueUploadId: string;
  uploadRequest: components.UploadRequest;
};

/**
 * Chunk upload successful. For all but the final chunk, this returns upload status. For the final chunk, it returns the complete upload response.
 */
export type UploadChunkResponseBody =
  | components.NonFinalChunkUploadResponse
  | components.AsyncUploadResponse
  | components.UploadResponse;

export type UploadChunkResponse =
  | components.NonFinalChunkUploadResponse
  | components.AsyncUploadResponse
  | components.UploadResponse
  | string;

/** @internal */
export const UploadChunkGlobals$inboundSchema: z.ZodType<
  UploadChunkGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  cloud_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "cloud_name": "cloudName",
  });
});

/** @internal */
export type UploadChunkGlobals$Outbound = {
  cloud_name?: string | undefined;
};

/** @internal */
export const UploadChunkGlobals$outboundSchema: z.ZodType<
  UploadChunkGlobals$Outbound,
  z.ZodTypeDef,
  UploadChunkGlobals
> = z.object({
  cloudName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    cloudName: "cloud_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadChunkGlobals$ {
  /** @deprecated use `UploadChunkGlobals$inboundSchema` instead. */
  export const inboundSchema = UploadChunkGlobals$inboundSchema;
  /** @deprecated use `UploadChunkGlobals$outboundSchema` instead. */
  export const outboundSchema = UploadChunkGlobals$outboundSchema;
  /** @deprecated use `UploadChunkGlobals$Outbound` instead. */
  export type Outbound = UploadChunkGlobals$Outbound;
}

export function uploadChunkGlobalsToJSON(
  uploadChunkGlobals: UploadChunkGlobals,
): string {
  return JSON.stringify(
    UploadChunkGlobals$outboundSchema.parse(uploadChunkGlobals),
  );
}

export function uploadChunkGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<UploadChunkGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadChunkGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadChunkGlobals' from JSON`,
  );
}

/** @internal */
export const UploadChunkRequest$inboundSchema: z.ZodType<
  UploadChunkRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource_type: components.UploadResourceType$inboundSchema.default("auto"),
  "Content-Range": z.string(),
  "X-Unique-Upload-Id": z.string(),
  upload_request: components.UploadRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "resource_type": "resourceType",
    "Content-Range": "contentRange",
    "X-Unique-Upload-Id": "xUniqueUploadId",
    "upload_request": "uploadRequest",
  });
});

/** @internal */
export type UploadChunkRequest$Outbound = {
  resource_type: string;
  "Content-Range": string;
  "X-Unique-Upload-Id": string;
  upload_request: components.UploadRequest$Outbound;
};

/** @internal */
export const UploadChunkRequest$outboundSchema: z.ZodType<
  UploadChunkRequest$Outbound,
  z.ZodTypeDef,
  UploadChunkRequest
> = z.object({
  resourceType: components.UploadResourceType$outboundSchema.default("auto"),
  contentRange: z.string(),
  xUniqueUploadId: z.string(),
  uploadRequest: components.UploadRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    resourceType: "resource_type",
    contentRange: "Content-Range",
    xUniqueUploadId: "X-Unique-Upload-Id",
    uploadRequest: "upload_request",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadChunkRequest$ {
  /** @deprecated use `UploadChunkRequest$inboundSchema` instead. */
  export const inboundSchema = UploadChunkRequest$inboundSchema;
  /** @deprecated use `UploadChunkRequest$outboundSchema` instead. */
  export const outboundSchema = UploadChunkRequest$outboundSchema;
  /** @deprecated use `UploadChunkRequest$Outbound` instead. */
  export type Outbound = UploadChunkRequest$Outbound;
}

export function uploadChunkRequestToJSON(
  uploadChunkRequest: UploadChunkRequest,
): string {
  return JSON.stringify(
    UploadChunkRequest$outboundSchema.parse(uploadChunkRequest),
  );
}

export function uploadChunkRequestFromJSON(
  jsonString: string,
): SafeParseResult<UploadChunkRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadChunkRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadChunkRequest' from JSON`,
  );
}

/** @internal */
export const UploadChunkResponseBody$inboundSchema: z.ZodType<
  UploadChunkResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.NonFinalChunkUploadResponse$inboundSchema,
  components.AsyncUploadResponse$inboundSchema,
  components.UploadResponse$inboundSchema,
]);

/** @internal */
export type UploadChunkResponseBody$Outbound =
  | components.NonFinalChunkUploadResponse$Outbound
  | components.AsyncUploadResponse$Outbound
  | components.UploadResponse$Outbound;

/** @internal */
export const UploadChunkResponseBody$outboundSchema: z.ZodType<
  UploadChunkResponseBody$Outbound,
  z.ZodTypeDef,
  UploadChunkResponseBody
> = z.union([
  components.NonFinalChunkUploadResponse$outboundSchema,
  components.AsyncUploadResponse$outboundSchema,
  components.UploadResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadChunkResponseBody$ {
  /** @deprecated use `UploadChunkResponseBody$inboundSchema` instead. */
  export const inboundSchema = UploadChunkResponseBody$inboundSchema;
  /** @deprecated use `UploadChunkResponseBody$outboundSchema` instead. */
  export const outboundSchema = UploadChunkResponseBody$outboundSchema;
  /** @deprecated use `UploadChunkResponseBody$Outbound` instead. */
  export type Outbound = UploadChunkResponseBody$Outbound;
}

export function uploadChunkResponseBodyToJSON(
  uploadChunkResponseBody: UploadChunkResponseBody,
): string {
  return JSON.stringify(
    UploadChunkResponseBody$outboundSchema.parse(uploadChunkResponseBody),
  );
}

export function uploadChunkResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<UploadChunkResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadChunkResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadChunkResponseBody' from JSON`,
  );
}

/** @internal */
export const UploadChunkResponse$inboundSchema: z.ZodType<
  UploadChunkResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.union([
    components.NonFinalChunkUploadResponse$inboundSchema,
    components.AsyncUploadResponse$inboundSchema,
    components.UploadResponse$inboundSchema,
  ]),
  z.string(),
]);

/** @internal */
export type UploadChunkResponse$Outbound =
  | components.NonFinalChunkUploadResponse$Outbound
  | components.AsyncUploadResponse$Outbound
  | components.UploadResponse$Outbound
  | string;

/** @internal */
export const UploadChunkResponse$outboundSchema: z.ZodType<
  UploadChunkResponse$Outbound,
  z.ZodTypeDef,
  UploadChunkResponse
> = z.union([
  z.union([
    components.NonFinalChunkUploadResponse$outboundSchema,
    components.AsyncUploadResponse$outboundSchema,
    components.UploadResponse$outboundSchema,
  ]),
  z.string(),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadChunkResponse$ {
  /** @deprecated use `UploadChunkResponse$inboundSchema` instead. */
  export const inboundSchema = UploadChunkResponse$inboundSchema;
  /** @deprecated use `UploadChunkResponse$outboundSchema` instead. */
  export const outboundSchema = UploadChunkResponse$outboundSchema;
  /** @deprecated use `UploadChunkResponse$Outbound` instead. */
  export type Outbound = UploadChunkResponse$Outbound;
}

export function uploadChunkResponseToJSON(
  uploadChunkResponse: UploadChunkResponse,
): string {
  return JSON.stringify(
    UploadChunkResponse$outboundSchema.parse(uploadChunkResponse),
  );
}

export function uploadChunkResponseFromJSON(
  jsonString: string,
): SafeParseResult<UploadChunkResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadChunkResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadChunkResponse' from JSON`,
  );
}
