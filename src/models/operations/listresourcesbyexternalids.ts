/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListResourcesByExternalIDsGlobals = {
  /**
   * The cloud name of your product environment.
   */
  cloudName?: string | undefined;
};

/**
 * Resource type (optional)
 */
export const ListResourcesByExternalIDsResourceType = {
  Image: "image",
  Video: "video",
  Raw: "raw",
} as const;
/**
 * Resource type (optional)
 */
export type ListResourcesByExternalIDsResourceType = ClosedEnum<
  typeof ListResourcesByExternalIDsResourceType
>;

/**
 * A comma-separated list of fields to include in the response.
 *
 * @remarks
 * Notes:
 * This parameter takes precedence over other parameters requesting details in the response (e.g., tags or context), so include them in this list if you also want their details returned.
 * The following fields are always included in the response: public_id, and asset_id.
 */
export const Fields = {
  AssetFolderFolderFilenameFormatVersionVersionIdSignatureResourceTypeCreatedAtUploadedAtBytesBackupBytesWidthHeightAspectRatioAccessControlMetadataContextTagsPixelsCustomModerationUrlSecureUrlStatusEtag:
    "asset_folder folder filename format version version_id signature resource_type created_at uploaded_at bytes backup_bytes width height aspect_ratio access_control metadata context tags pixels custom moderation url secure_url status etag",
} as const;
/**
 * A comma-separated list of fields to include in the response.
 *
 * @remarks
 * Notes:
 * This parameter takes precedence over other parameters requesting details in the response (e.g., tags or context), so include them in this list if you also want their details returned.
 * The following fields are always included in the response: public_id, and asset_id.
 */
export type Fields = ClosedEnum<typeof Fields>;

export type ListResourcesByExternalIDsRequest = {
  /**
   * List of external IDs for identifying the assets to retrieve. Either external_ids or asset_ids must be provided.
   */
  externalIds: Array<string>;
  /**
   * Resource type (optional)
   */
  resourceType?: ListResourcesByExternalIDsResourceType | undefined;
  /**
   * A comma-separated list of fields to include in the response.
   *
   * @remarks
   * Notes:
   * This parameter takes precedence over other parameters requesting details in the response (e.g., tags or context), so include them in this list if you also want their details returned.
   * The following fields are always included in the response: public_id, and asset_id.
   */
  fields?: Fields | undefined;
  tags?: boolean | undefined;
  context?: boolean | undefined;
  metadata?: boolean | undefined;
  moderations?: boolean | undefined;
};

/** @internal */
export const ListResourcesByExternalIDsGlobals$inboundSchema: z.ZodType<
  ListResourcesByExternalIDsGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  cloud_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "cloud_name": "cloudName",
  });
});

/** @internal */
export type ListResourcesByExternalIDsGlobals$Outbound = {
  cloud_name?: string | undefined;
};

/** @internal */
export const ListResourcesByExternalIDsGlobals$outboundSchema: z.ZodType<
  ListResourcesByExternalIDsGlobals$Outbound,
  z.ZodTypeDef,
  ListResourcesByExternalIDsGlobals
> = z.object({
  cloudName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    cloudName: "cloud_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListResourcesByExternalIDsGlobals$ {
  /** @deprecated use `ListResourcesByExternalIDsGlobals$inboundSchema` instead. */
  export const inboundSchema = ListResourcesByExternalIDsGlobals$inboundSchema;
  /** @deprecated use `ListResourcesByExternalIDsGlobals$outboundSchema` instead. */
  export const outboundSchema =
    ListResourcesByExternalIDsGlobals$outboundSchema;
  /** @deprecated use `ListResourcesByExternalIDsGlobals$Outbound` instead. */
  export type Outbound = ListResourcesByExternalIDsGlobals$Outbound;
}

export function listResourcesByExternalIDsGlobalsToJSON(
  listResourcesByExternalIDsGlobals: ListResourcesByExternalIDsGlobals,
): string {
  return JSON.stringify(
    ListResourcesByExternalIDsGlobals$outboundSchema.parse(
      listResourcesByExternalIDsGlobals,
    ),
  );
}

export function listResourcesByExternalIDsGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ListResourcesByExternalIDsGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListResourcesByExternalIDsGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListResourcesByExternalIDsGlobals' from JSON`,
  );
}

/** @internal */
export const ListResourcesByExternalIDsResourceType$inboundSchema:
  z.ZodNativeEnum<typeof ListResourcesByExternalIDsResourceType> = z.nativeEnum(
    ListResourcesByExternalIDsResourceType,
  );

/** @internal */
export const ListResourcesByExternalIDsResourceType$outboundSchema:
  z.ZodNativeEnum<typeof ListResourcesByExternalIDsResourceType> =
    ListResourcesByExternalIDsResourceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListResourcesByExternalIDsResourceType$ {
  /** @deprecated use `ListResourcesByExternalIDsResourceType$inboundSchema` instead. */
  export const inboundSchema =
    ListResourcesByExternalIDsResourceType$inboundSchema;
  /** @deprecated use `ListResourcesByExternalIDsResourceType$outboundSchema` instead. */
  export const outboundSchema =
    ListResourcesByExternalIDsResourceType$outboundSchema;
}

/** @internal */
export const Fields$inboundSchema: z.ZodNativeEnum<typeof Fields> = z
  .nativeEnum(Fields);

/** @internal */
export const Fields$outboundSchema: z.ZodNativeEnum<typeof Fields> =
  Fields$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Fields$ {
  /** @deprecated use `Fields$inboundSchema` instead. */
  export const inboundSchema = Fields$inboundSchema;
  /** @deprecated use `Fields$outboundSchema` instead. */
  export const outboundSchema = Fields$outboundSchema;
}

/** @internal */
export const ListResourcesByExternalIDsRequest$inboundSchema: z.ZodType<
  ListResourcesByExternalIDsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  external_ids: z.array(z.string()),
  resource_type: ListResourcesByExternalIDsResourceType$inboundSchema
    .optional(),
  fields: Fields$inboundSchema.optional(),
  tags: z.boolean().default(false),
  context: z.boolean().default(false),
  metadata: z.boolean().default(false),
  moderations: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "external_ids": "externalIds",
    "resource_type": "resourceType",
  });
});

/** @internal */
export type ListResourcesByExternalIDsRequest$Outbound = {
  external_ids: Array<string>;
  resource_type?: string | undefined;
  fields?: string | undefined;
  tags: boolean;
  context: boolean;
  metadata: boolean;
  moderations: boolean;
};

/** @internal */
export const ListResourcesByExternalIDsRequest$outboundSchema: z.ZodType<
  ListResourcesByExternalIDsRequest$Outbound,
  z.ZodTypeDef,
  ListResourcesByExternalIDsRequest
> = z.object({
  externalIds: z.array(z.string()),
  resourceType: ListResourcesByExternalIDsResourceType$outboundSchema
    .optional(),
  fields: Fields$outboundSchema.optional(),
  tags: z.boolean().default(false),
  context: z.boolean().default(false),
  metadata: z.boolean().default(false),
  moderations: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    externalIds: "external_ids",
    resourceType: "resource_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListResourcesByExternalIDsRequest$ {
  /** @deprecated use `ListResourcesByExternalIDsRequest$inboundSchema` instead. */
  export const inboundSchema = ListResourcesByExternalIDsRequest$inboundSchema;
  /** @deprecated use `ListResourcesByExternalIDsRequest$outboundSchema` instead. */
  export const outboundSchema =
    ListResourcesByExternalIDsRequest$outboundSchema;
  /** @deprecated use `ListResourcesByExternalIDsRequest$Outbound` instead. */
  export type Outbound = ListResourcesByExternalIDsRequest$Outbound;
}

export function listResourcesByExternalIDsRequestToJSON(
  listResourcesByExternalIDsRequest: ListResourcesByExternalIDsRequest,
): string {
  return JSON.stringify(
    ListResourcesByExternalIDsRequest$outboundSchema.parse(
      listResourcesByExternalIDsRequest,
    ),
  );
}

export function listResourcesByExternalIDsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListResourcesByExternalIDsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListResourcesByExternalIDsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListResourcesByExternalIDsRequest' from JSON`,
  );
}
