/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateFolderGlobals = {
  /**
   * The cloud name of your product environment.
   */
  cloudName?: string | undefined;
};

export type UpdateFolderRequestBody = {
  /**
   * The new path for the folder.
   */
  toFolder: string;
};

export type UpdateFolderRequest = {
  folder: string;
  requestBody: UpdateFolderRequestBody;
};

export type From = {
  /**
   * The name of the source folder.
   */
  name: string;
  /**
   * The full path of the source folder.
   */
  path: string;
};

export type To = {
  /**
   * The name of the target folder.
   */
  name: string;
  /**
   * The full path of the target folder.
   */
  path: string;
};

/**
 * Folder renamed successfully
 */
export type UpdateFolderResponse = {
  from: From;
  to: To;
};

/** @internal */
export const UpdateFolderGlobals$inboundSchema: z.ZodType<
  UpdateFolderGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  cloud_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "cloud_name": "cloudName",
  });
});

/** @internal */
export type UpdateFolderGlobals$Outbound = {
  cloud_name?: string | undefined;
};

/** @internal */
export const UpdateFolderGlobals$outboundSchema: z.ZodType<
  UpdateFolderGlobals$Outbound,
  z.ZodTypeDef,
  UpdateFolderGlobals
> = z.object({
  cloudName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    cloudName: "cloud_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateFolderGlobals$ {
  /** @deprecated use `UpdateFolderGlobals$inboundSchema` instead. */
  export const inboundSchema = UpdateFolderGlobals$inboundSchema;
  /** @deprecated use `UpdateFolderGlobals$outboundSchema` instead. */
  export const outboundSchema = UpdateFolderGlobals$outboundSchema;
  /** @deprecated use `UpdateFolderGlobals$Outbound` instead. */
  export type Outbound = UpdateFolderGlobals$Outbound;
}

export function updateFolderGlobalsToJSON(
  updateFolderGlobals: UpdateFolderGlobals,
): string {
  return JSON.stringify(
    UpdateFolderGlobals$outboundSchema.parse(updateFolderGlobals),
  );
}

export function updateFolderGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateFolderGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateFolderGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateFolderGlobals' from JSON`,
  );
}

/** @internal */
export const UpdateFolderRequestBody$inboundSchema: z.ZodType<
  UpdateFolderRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  to_folder: z.string(),
}).transform((v) => {
  return remap$(v, {
    "to_folder": "toFolder",
  });
});

/** @internal */
export type UpdateFolderRequestBody$Outbound = {
  to_folder: string;
};

/** @internal */
export const UpdateFolderRequestBody$outboundSchema: z.ZodType<
  UpdateFolderRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateFolderRequestBody
> = z.object({
  toFolder: z.string(),
}).transform((v) => {
  return remap$(v, {
    toFolder: "to_folder",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateFolderRequestBody$ {
  /** @deprecated use `UpdateFolderRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateFolderRequestBody$inboundSchema;
  /** @deprecated use `UpdateFolderRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateFolderRequestBody$outboundSchema;
  /** @deprecated use `UpdateFolderRequestBody$Outbound` instead. */
  export type Outbound = UpdateFolderRequestBody$Outbound;
}

export function updateFolderRequestBodyToJSON(
  updateFolderRequestBody: UpdateFolderRequestBody,
): string {
  return JSON.stringify(
    UpdateFolderRequestBody$outboundSchema.parse(updateFolderRequestBody),
  );
}

export function updateFolderRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateFolderRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateFolderRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateFolderRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateFolderRequest$inboundSchema: z.ZodType<
  UpdateFolderRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  folder: z.string(),
  RequestBody: z.lazy(() => UpdateFolderRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateFolderRequest$Outbound = {
  folder: string;
  RequestBody: UpdateFolderRequestBody$Outbound;
};

/** @internal */
export const UpdateFolderRequest$outboundSchema: z.ZodType<
  UpdateFolderRequest$Outbound,
  z.ZodTypeDef,
  UpdateFolderRequest
> = z.object({
  folder: z.string(),
  requestBody: z.lazy(() => UpdateFolderRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateFolderRequest$ {
  /** @deprecated use `UpdateFolderRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateFolderRequest$inboundSchema;
  /** @deprecated use `UpdateFolderRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateFolderRequest$outboundSchema;
  /** @deprecated use `UpdateFolderRequest$Outbound` instead. */
  export type Outbound = UpdateFolderRequest$Outbound;
}

export function updateFolderRequestToJSON(
  updateFolderRequest: UpdateFolderRequest,
): string {
  return JSON.stringify(
    UpdateFolderRequest$outboundSchema.parse(updateFolderRequest),
  );
}

export function updateFolderRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateFolderRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateFolderRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateFolderRequest' from JSON`,
  );
}

/** @internal */
export const From$inboundSchema: z.ZodType<From, z.ZodTypeDef, unknown> = z
  .object({
    name: z.string(),
    path: z.string(),
  });

/** @internal */
export type From$Outbound = {
  name: string;
  path: string;
};

/** @internal */
export const From$outboundSchema: z.ZodType<From$Outbound, z.ZodTypeDef, From> =
  z.object({
    name: z.string(),
    path: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace From$ {
  /** @deprecated use `From$inboundSchema` instead. */
  export const inboundSchema = From$inboundSchema;
  /** @deprecated use `From$outboundSchema` instead. */
  export const outboundSchema = From$outboundSchema;
  /** @deprecated use `From$Outbound` instead. */
  export type Outbound = From$Outbound;
}

export function fromToJSON(from: From): string {
  return JSON.stringify(From$outboundSchema.parse(from));
}

export function fromFromJSON(
  jsonString: string,
): SafeParseResult<From, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => From$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'From' from JSON`,
  );
}

/** @internal */
export const To$inboundSchema: z.ZodType<To, z.ZodTypeDef, unknown> = z.object({
  name: z.string(),
  path: z.string(),
});

/** @internal */
export type To$Outbound = {
  name: string;
  path: string;
};

/** @internal */
export const To$outboundSchema: z.ZodType<To$Outbound, z.ZodTypeDef, To> = z
  .object({
    name: z.string(),
    path: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace To$ {
  /** @deprecated use `To$inboundSchema` instead. */
  export const inboundSchema = To$inboundSchema;
  /** @deprecated use `To$outboundSchema` instead. */
  export const outboundSchema = To$outboundSchema;
  /** @deprecated use `To$Outbound` instead. */
  export type Outbound = To$Outbound;
}

export function toToJSON(to: To): string {
  return JSON.stringify(To$outboundSchema.parse(to));
}

export function toFromJSON(
  jsonString: string,
): SafeParseResult<To, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => To$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'To' from JSON`,
  );
}

/** @internal */
export const UpdateFolderResponse$inboundSchema: z.ZodType<
  UpdateFolderResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  from: z.lazy(() => From$inboundSchema),
  to: z.lazy(() => To$inboundSchema),
});

/** @internal */
export type UpdateFolderResponse$Outbound = {
  from: From$Outbound;
  to: To$Outbound;
};

/** @internal */
export const UpdateFolderResponse$outboundSchema: z.ZodType<
  UpdateFolderResponse$Outbound,
  z.ZodTypeDef,
  UpdateFolderResponse
> = z.object({
  from: z.lazy(() => From$outboundSchema),
  to: z.lazy(() => To$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateFolderResponse$ {
  /** @deprecated use `UpdateFolderResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateFolderResponse$inboundSchema;
  /** @deprecated use `UpdateFolderResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateFolderResponse$outboundSchema;
  /** @deprecated use `UpdateFolderResponse$Outbound` instead. */
  export type Outbound = UpdateFolderResponse$Outbound;
}

export function updateFolderResponseToJSON(
  updateFolderResponse: UpdateFolderResponse,
): string {
  return JSON.stringify(
    UpdateFolderResponse$outboundSchema.parse(updateFolderResponse),
  );
}

export function updateFolderResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateFolderResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateFolderResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateFolderResponse' from JSON`,
  );
}
