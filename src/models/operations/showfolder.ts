/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ShowFolderGlobals = {
  /**
   * The cloud name of your product environment.
   */
  cloudName?: string | undefined;
};

export type ShowFolderRequest = {
  folder: string;
};

/** @internal */
export const ShowFolderGlobals$inboundSchema: z.ZodType<
  ShowFolderGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  cloud_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "cloud_name": "cloudName",
  });
});

/** @internal */
export type ShowFolderGlobals$Outbound = {
  cloud_name?: string | undefined;
};

/** @internal */
export const ShowFolderGlobals$outboundSchema: z.ZodType<
  ShowFolderGlobals$Outbound,
  z.ZodTypeDef,
  ShowFolderGlobals
> = z.object({
  cloudName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    cloudName: "cloud_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ShowFolderGlobals$ {
  /** @deprecated use `ShowFolderGlobals$inboundSchema` instead. */
  export const inboundSchema = ShowFolderGlobals$inboundSchema;
  /** @deprecated use `ShowFolderGlobals$outboundSchema` instead. */
  export const outboundSchema = ShowFolderGlobals$outboundSchema;
  /** @deprecated use `ShowFolderGlobals$Outbound` instead. */
  export type Outbound = ShowFolderGlobals$Outbound;
}

export function showFolderGlobalsToJSON(
  showFolderGlobals: ShowFolderGlobals,
): string {
  return JSON.stringify(
    ShowFolderGlobals$outboundSchema.parse(showFolderGlobals),
  );
}

export function showFolderGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ShowFolderGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ShowFolderGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ShowFolderGlobals' from JSON`,
  );
}

/** @internal */
export const ShowFolderRequest$inboundSchema: z.ZodType<
  ShowFolderRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  folder: z.string(),
});

/** @internal */
export type ShowFolderRequest$Outbound = {
  folder: string;
};

/** @internal */
export const ShowFolderRequest$outboundSchema: z.ZodType<
  ShowFolderRequest$Outbound,
  z.ZodTypeDef,
  ShowFolderRequest
> = z.object({
  folder: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ShowFolderRequest$ {
  /** @deprecated use `ShowFolderRequest$inboundSchema` instead. */
  export const inboundSchema = ShowFolderRequest$inboundSchema;
  /** @deprecated use `ShowFolderRequest$outboundSchema` instead. */
  export const outboundSchema = ShowFolderRequest$outboundSchema;
  /** @deprecated use `ShowFolderRequest$Outbound` instead. */
  export type Outbound = ShowFolderRequest$Outbound;
}

export function showFolderRequestToJSON(
  showFolderRequest: ShowFolderRequest,
): string {
  return JSON.stringify(
    ShowFolderRequest$outboundSchema.parse(showFolderRequest),
  );
}

export function showFolderRequestFromJSON(
  jsonString: string,
): SafeParseResult<ShowFolderRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ShowFolderRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ShowFolderRequest' from JSON`,
  );
}
