/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListVideosGlobals = {
  /**
   * The cloud name of your product environment.
   */
  cloudName?: string | undefined;
};

/**
 * The delivery type. Necessary for prefix filtering.
 */
export const ListVideosType = {
  Upload: "upload",
  Private: "private",
  Authenticated: "authenticated",
  Fetch: "fetch",
  List: "list",
} as const;
/**
 * The delivery type. Necessary for prefix filtering.
 */
export type ListVideosType = ClosedEnum<typeof ListVideosType>;

export type ListVideosRequest = {
  /**
   * The delivery type. Necessary for prefix filtering.
   */
  type?: ListVideosType | undefined;
  /**
   * A public_id prefix. When specified, all assets with that prefix are returned. When using this, the `type` parameter must also be specified.
   */
  prefix?: string | undefined;
  /**
   * An array of public IDs to return.
   */
  publicIds?: Array<string> | undefined;
  /**
   * Whether to include the list of tag names assigned to each asset. Default: false
   */
  tags?: boolean | undefined;
  /**
   * Cursor for pagination.
   */
  nextCursor?: string | undefined;
  /**
   * Maximum number of results to return (1-500).
   */
  maxResults?: number | undefined;
  /**
   * Sort direction.
   */
  direction?: components.Direction | undefined;
  /**
   * An ISO-8601 formatted timestamp. When specified, assets created since that timestamp are returned.  Supported only if neither `prefix` nor `public_ids` were passed.
   */
  startAt?: Date | undefined;
  fields?: Array<components.FieldsSpec> | undefined;
};

/** @internal */
export const ListVideosGlobals$inboundSchema: z.ZodType<
  ListVideosGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  cloud_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "cloud_name": "cloudName",
  });
});

/** @internal */
export type ListVideosGlobals$Outbound = {
  cloud_name?: string | undefined;
};

/** @internal */
export const ListVideosGlobals$outboundSchema: z.ZodType<
  ListVideosGlobals$Outbound,
  z.ZodTypeDef,
  ListVideosGlobals
> = z.object({
  cloudName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    cloudName: "cloud_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListVideosGlobals$ {
  /** @deprecated use `ListVideosGlobals$inboundSchema` instead. */
  export const inboundSchema = ListVideosGlobals$inboundSchema;
  /** @deprecated use `ListVideosGlobals$outboundSchema` instead. */
  export const outboundSchema = ListVideosGlobals$outboundSchema;
  /** @deprecated use `ListVideosGlobals$Outbound` instead. */
  export type Outbound = ListVideosGlobals$Outbound;
}

export function listVideosGlobalsToJSON(
  listVideosGlobals: ListVideosGlobals,
): string {
  return JSON.stringify(
    ListVideosGlobals$outboundSchema.parse(listVideosGlobals),
  );
}

export function listVideosGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ListVideosGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListVideosGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListVideosGlobals' from JSON`,
  );
}

/** @internal */
export const ListVideosType$inboundSchema: z.ZodNativeEnum<
  typeof ListVideosType
> = z.nativeEnum(ListVideosType);

/** @internal */
export const ListVideosType$outboundSchema: z.ZodNativeEnum<
  typeof ListVideosType
> = ListVideosType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListVideosType$ {
  /** @deprecated use `ListVideosType$inboundSchema` instead. */
  export const inboundSchema = ListVideosType$inboundSchema;
  /** @deprecated use `ListVideosType$outboundSchema` instead. */
  export const outboundSchema = ListVideosType$outboundSchema;
}

/** @internal */
export const ListVideosRequest$inboundSchema: z.ZodType<
  ListVideosRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ListVideosType$inboundSchema.optional(),
  prefix: z.string().optional(),
  public_ids: z.array(z.string()).optional(),
  tags: z.boolean().optional(),
  next_cursor: z.string().optional(),
  max_results: z.number().int().optional(),
  direction: components.Direction$inboundSchema.optional(),
  start_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  fields: z.array(components.FieldsSpec$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "public_ids": "publicIds",
    "next_cursor": "nextCursor",
    "max_results": "maxResults",
    "start_at": "startAt",
  });
});

/** @internal */
export type ListVideosRequest$Outbound = {
  type?: string | undefined;
  prefix?: string | undefined;
  public_ids?: Array<string> | undefined;
  tags?: boolean | undefined;
  next_cursor?: string | undefined;
  max_results?: number | undefined;
  direction?: string | undefined;
  start_at?: string | undefined;
  fields?: Array<string> | undefined;
};

/** @internal */
export const ListVideosRequest$outboundSchema: z.ZodType<
  ListVideosRequest$Outbound,
  z.ZodTypeDef,
  ListVideosRequest
> = z.object({
  type: ListVideosType$outboundSchema.optional(),
  prefix: z.string().optional(),
  publicIds: z.array(z.string()).optional(),
  tags: z.boolean().optional(),
  nextCursor: z.string().optional(),
  maxResults: z.number().int().optional(),
  direction: components.Direction$outboundSchema.optional(),
  startAt: z.date().transform(v => v.toISOString()).optional(),
  fields: z.array(components.FieldsSpec$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    publicIds: "public_ids",
    nextCursor: "next_cursor",
    maxResults: "max_results",
    startAt: "start_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListVideosRequest$ {
  /** @deprecated use `ListVideosRequest$inboundSchema` instead. */
  export const inboundSchema = ListVideosRequest$inboundSchema;
  /** @deprecated use `ListVideosRequest$outboundSchema` instead. */
  export const outboundSchema = ListVideosRequest$outboundSchema;
  /** @deprecated use `ListVideosRequest$Outbound` instead. */
  export type Outbound = ListVideosRequest$Outbound;
}

export function listVideosRequestToJSON(
  listVideosRequest: ListVideosRequest,
): string {
  return JSON.stringify(
    ListVideosRequest$outboundSchema.parse(listVideosRequest),
  );
}

export function listVideosRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListVideosRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListVideosRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListVideosRequest' from JSON`,
  );
}
