/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UploadNoResourceTypeGlobals = {
  /**
   * The cloud name of your product environment.
   */
  cloudName?: string | undefined;
};

/**
 * Successful upload
 */
export type UploadNoResourceTypeResponseBody =
  | components.AsyncUploadResponse
  | components.UploadResponse;

export type UploadNoResourceTypeResponse =
  | components.AsyncUploadResponse
  | components.UploadResponse
  | string;

/** @internal */
export const UploadNoResourceTypeGlobals$inboundSchema: z.ZodType<
  UploadNoResourceTypeGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  cloud_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "cloud_name": "cloudName",
  });
});

/** @internal */
export type UploadNoResourceTypeGlobals$Outbound = {
  cloud_name?: string | undefined;
};

/** @internal */
export const UploadNoResourceTypeGlobals$outboundSchema: z.ZodType<
  UploadNoResourceTypeGlobals$Outbound,
  z.ZodTypeDef,
  UploadNoResourceTypeGlobals
> = z.object({
  cloudName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    cloudName: "cloud_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadNoResourceTypeGlobals$ {
  /** @deprecated use `UploadNoResourceTypeGlobals$inboundSchema` instead. */
  export const inboundSchema = UploadNoResourceTypeGlobals$inboundSchema;
  /** @deprecated use `UploadNoResourceTypeGlobals$outboundSchema` instead. */
  export const outboundSchema = UploadNoResourceTypeGlobals$outboundSchema;
  /** @deprecated use `UploadNoResourceTypeGlobals$Outbound` instead. */
  export type Outbound = UploadNoResourceTypeGlobals$Outbound;
}

export function uploadNoResourceTypeGlobalsToJSON(
  uploadNoResourceTypeGlobals: UploadNoResourceTypeGlobals,
): string {
  return JSON.stringify(
    UploadNoResourceTypeGlobals$outboundSchema.parse(
      uploadNoResourceTypeGlobals,
    ),
  );
}

export function uploadNoResourceTypeGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<UploadNoResourceTypeGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadNoResourceTypeGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadNoResourceTypeGlobals' from JSON`,
  );
}

/** @internal */
export const UploadNoResourceTypeResponseBody$inboundSchema: z.ZodType<
  UploadNoResourceTypeResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.AsyncUploadResponse$inboundSchema,
  components.UploadResponse$inboundSchema,
]);

/** @internal */
export type UploadNoResourceTypeResponseBody$Outbound =
  | components.AsyncUploadResponse$Outbound
  | components.UploadResponse$Outbound;

/** @internal */
export const UploadNoResourceTypeResponseBody$outboundSchema: z.ZodType<
  UploadNoResourceTypeResponseBody$Outbound,
  z.ZodTypeDef,
  UploadNoResourceTypeResponseBody
> = z.union([
  components.AsyncUploadResponse$outboundSchema,
  components.UploadResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadNoResourceTypeResponseBody$ {
  /** @deprecated use `UploadNoResourceTypeResponseBody$inboundSchema` instead. */
  export const inboundSchema = UploadNoResourceTypeResponseBody$inboundSchema;
  /** @deprecated use `UploadNoResourceTypeResponseBody$outboundSchema` instead. */
  export const outboundSchema = UploadNoResourceTypeResponseBody$outboundSchema;
  /** @deprecated use `UploadNoResourceTypeResponseBody$Outbound` instead. */
  export type Outbound = UploadNoResourceTypeResponseBody$Outbound;
}

export function uploadNoResourceTypeResponseBodyToJSON(
  uploadNoResourceTypeResponseBody: UploadNoResourceTypeResponseBody,
): string {
  return JSON.stringify(
    UploadNoResourceTypeResponseBody$outboundSchema.parse(
      uploadNoResourceTypeResponseBody,
    ),
  );
}

export function uploadNoResourceTypeResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<UploadNoResourceTypeResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadNoResourceTypeResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadNoResourceTypeResponseBody' from JSON`,
  );
}

/** @internal */
export const UploadNoResourceTypeResponse$inboundSchema: z.ZodType<
  UploadNoResourceTypeResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.union([
    components.AsyncUploadResponse$inboundSchema,
    components.UploadResponse$inboundSchema,
  ]),
  z.string(),
]);

/** @internal */
export type UploadNoResourceTypeResponse$Outbound =
  | components.AsyncUploadResponse$Outbound
  | components.UploadResponse$Outbound
  | string;

/** @internal */
export const UploadNoResourceTypeResponse$outboundSchema: z.ZodType<
  UploadNoResourceTypeResponse$Outbound,
  z.ZodTypeDef,
  UploadNoResourceTypeResponse
> = z.union([
  z.union([
    components.AsyncUploadResponse$outboundSchema,
    components.UploadResponse$outboundSchema,
  ]),
  z.string(),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadNoResourceTypeResponse$ {
  /** @deprecated use `UploadNoResourceTypeResponse$inboundSchema` instead. */
  export const inboundSchema = UploadNoResourceTypeResponse$inboundSchema;
  /** @deprecated use `UploadNoResourceTypeResponse$outboundSchema` instead. */
  export const outboundSchema = UploadNoResourceTypeResponse$outboundSchema;
  /** @deprecated use `UploadNoResourceTypeResponse$Outbound` instead. */
  export type Outbound = UploadNoResourceTypeResponse$Outbound;
}

export function uploadNoResourceTypeResponseToJSON(
  uploadNoResourceTypeResponse: UploadNoResourceTypeResponse,
): string {
  return JSON.stringify(
    UploadNoResourceTypeResponse$outboundSchema.parse(
      uploadNoResourceTypeResponse,
    ),
  );
}

export function uploadNoResourceTypeResponseFromJSON(
  jsonString: string,
): SafeParseResult<UploadNoResourceTypeResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadNoResourceTypeResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadNoResourceTypeResponse' from JSON`,
  );
}
