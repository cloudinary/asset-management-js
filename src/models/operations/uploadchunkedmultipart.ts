/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UploadChunkedMultipartGlobals = {
  /**
   * The cloud name of your product environment.
   */
  cloudName?: string | undefined;
};

/**
 * The type of resource to upload. "image" for uploading strictly images, "video" for uploading strictly videos, "raw" for uploading non-media files, or "auto" for allowing Cloudinary to automatically detect the type of the uploaded file.
 */
export const UploadChunkedMultipartResourceType = {
  Image: "image",
  Video: "video",
  Raw: "raw",
  Auto: "auto",
} as const;
/**
 * The type of resource to upload. "image" for uploading strictly images, "video" for uploading strictly videos, "raw" for uploading non-media files, or "auto" for allowing Cloudinary to automatically detect the type of the uploaded file.
 */
export type UploadChunkedMultipartResourceType = ClosedEnum<
  typeof UploadChunkedMultipartResourceType
>;

export type UploadChunkedMultipartRequest = {
  /**
   * The type of resource to upload. "image" for uploading strictly images, "video" for uploading strictly videos, "raw" for uploading non-media files, or "auto" for allowing Cloudinary to automatically detect the type of the uploaded file.
   */
  resourceType: UploadChunkedMultipartResourceType;
  /**
   * The range of bytes being uploaded in the current chunk, in the format "bytes start-end/total". For example, "bytes 0-999999/3000000" indicates the first 1MB chunk of a 3MB file.
   */
  contentRange: string;
  /**
   * A unique identifier for the upload. Must be the same for all chunks of the same file.
   */
  xUniqueUploadId: string;
  binaryUploadRequest: components.BinaryUploadRequest;
};

/**
 * Chunk upload successful. For all but the final chunk, this returns upload status. For the final chunk, it returns the complete upload response.
 */
export type UploadChunkedMultipartResponseBody =
  | components.NonFinalChunkUploadResponse
  | components.AsyncUploadResponse
  | components.UploadResponse;

export type UploadChunkedMultipartResponse =
  | components.NonFinalChunkUploadResponse
  | components.AsyncUploadResponse
  | components.UploadResponse
  | string;

/** @internal */
export const UploadChunkedMultipartGlobals$inboundSchema: z.ZodType<
  UploadChunkedMultipartGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  cloud_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "cloud_name": "cloudName",
  });
});

/** @internal */
export type UploadChunkedMultipartGlobals$Outbound = {
  cloud_name?: string | undefined;
};

/** @internal */
export const UploadChunkedMultipartGlobals$outboundSchema: z.ZodType<
  UploadChunkedMultipartGlobals$Outbound,
  z.ZodTypeDef,
  UploadChunkedMultipartGlobals
> = z.object({
  cloudName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    cloudName: "cloud_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadChunkedMultipartGlobals$ {
  /** @deprecated use `UploadChunkedMultipartGlobals$inboundSchema` instead. */
  export const inboundSchema = UploadChunkedMultipartGlobals$inboundSchema;
  /** @deprecated use `UploadChunkedMultipartGlobals$outboundSchema` instead. */
  export const outboundSchema = UploadChunkedMultipartGlobals$outboundSchema;
  /** @deprecated use `UploadChunkedMultipartGlobals$Outbound` instead. */
  export type Outbound = UploadChunkedMultipartGlobals$Outbound;
}

export function uploadChunkedMultipartGlobalsToJSON(
  uploadChunkedMultipartGlobals: UploadChunkedMultipartGlobals,
): string {
  return JSON.stringify(
    UploadChunkedMultipartGlobals$outboundSchema.parse(
      uploadChunkedMultipartGlobals,
    ),
  );
}

export function uploadChunkedMultipartGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<UploadChunkedMultipartGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadChunkedMultipartGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadChunkedMultipartGlobals' from JSON`,
  );
}

/** @internal */
export const UploadChunkedMultipartResourceType$inboundSchema: z.ZodNativeEnum<
  typeof UploadChunkedMultipartResourceType
> = z.nativeEnum(UploadChunkedMultipartResourceType);

/** @internal */
export const UploadChunkedMultipartResourceType$outboundSchema: z.ZodNativeEnum<
  typeof UploadChunkedMultipartResourceType
> = UploadChunkedMultipartResourceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadChunkedMultipartResourceType$ {
  /** @deprecated use `UploadChunkedMultipartResourceType$inboundSchema` instead. */
  export const inboundSchema = UploadChunkedMultipartResourceType$inboundSchema;
  /** @deprecated use `UploadChunkedMultipartResourceType$outboundSchema` instead. */
  export const outboundSchema =
    UploadChunkedMultipartResourceType$outboundSchema;
}

/** @internal */
export const UploadChunkedMultipartRequest$inboundSchema: z.ZodType<
  UploadChunkedMultipartRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource_type: UploadChunkedMultipartResourceType$inboundSchema,
  "Content-Range": z.string(),
  "X-Unique-Upload-Id": z.string(),
  binary_upload_request: components.BinaryUploadRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "resource_type": "resourceType",
    "Content-Range": "contentRange",
    "X-Unique-Upload-Id": "xUniqueUploadId",
    "binary_upload_request": "binaryUploadRequest",
  });
});

/** @internal */
export type UploadChunkedMultipartRequest$Outbound = {
  resource_type: string;
  "Content-Range": string;
  "X-Unique-Upload-Id": string;
  binary_upload_request: components.BinaryUploadRequest$Outbound;
};

/** @internal */
export const UploadChunkedMultipartRequest$outboundSchema: z.ZodType<
  UploadChunkedMultipartRequest$Outbound,
  z.ZodTypeDef,
  UploadChunkedMultipartRequest
> = z.object({
  resourceType: UploadChunkedMultipartResourceType$outboundSchema,
  contentRange: z.string(),
  xUniqueUploadId: z.string(),
  binaryUploadRequest: components.BinaryUploadRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    resourceType: "resource_type",
    contentRange: "Content-Range",
    xUniqueUploadId: "X-Unique-Upload-Id",
    binaryUploadRequest: "binary_upload_request",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadChunkedMultipartRequest$ {
  /** @deprecated use `UploadChunkedMultipartRequest$inboundSchema` instead. */
  export const inboundSchema = UploadChunkedMultipartRequest$inboundSchema;
  /** @deprecated use `UploadChunkedMultipartRequest$outboundSchema` instead. */
  export const outboundSchema = UploadChunkedMultipartRequest$outboundSchema;
  /** @deprecated use `UploadChunkedMultipartRequest$Outbound` instead. */
  export type Outbound = UploadChunkedMultipartRequest$Outbound;
}

export function uploadChunkedMultipartRequestToJSON(
  uploadChunkedMultipartRequest: UploadChunkedMultipartRequest,
): string {
  return JSON.stringify(
    UploadChunkedMultipartRequest$outboundSchema.parse(
      uploadChunkedMultipartRequest,
    ),
  );
}

export function uploadChunkedMultipartRequestFromJSON(
  jsonString: string,
): SafeParseResult<UploadChunkedMultipartRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadChunkedMultipartRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadChunkedMultipartRequest' from JSON`,
  );
}

/** @internal */
export const UploadChunkedMultipartResponseBody$inboundSchema: z.ZodType<
  UploadChunkedMultipartResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.NonFinalChunkUploadResponse$inboundSchema,
  components.AsyncUploadResponse$inboundSchema,
  components.UploadResponse$inboundSchema,
]);

/** @internal */
export type UploadChunkedMultipartResponseBody$Outbound =
  | components.NonFinalChunkUploadResponse$Outbound
  | components.AsyncUploadResponse$Outbound
  | components.UploadResponse$Outbound;

/** @internal */
export const UploadChunkedMultipartResponseBody$outboundSchema: z.ZodType<
  UploadChunkedMultipartResponseBody$Outbound,
  z.ZodTypeDef,
  UploadChunkedMultipartResponseBody
> = z.union([
  components.NonFinalChunkUploadResponse$outboundSchema,
  components.AsyncUploadResponse$outboundSchema,
  components.UploadResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadChunkedMultipartResponseBody$ {
  /** @deprecated use `UploadChunkedMultipartResponseBody$inboundSchema` instead. */
  export const inboundSchema = UploadChunkedMultipartResponseBody$inboundSchema;
  /** @deprecated use `UploadChunkedMultipartResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    UploadChunkedMultipartResponseBody$outboundSchema;
  /** @deprecated use `UploadChunkedMultipartResponseBody$Outbound` instead. */
  export type Outbound = UploadChunkedMultipartResponseBody$Outbound;
}

export function uploadChunkedMultipartResponseBodyToJSON(
  uploadChunkedMultipartResponseBody: UploadChunkedMultipartResponseBody,
): string {
  return JSON.stringify(
    UploadChunkedMultipartResponseBody$outboundSchema.parse(
      uploadChunkedMultipartResponseBody,
    ),
  );
}

export function uploadChunkedMultipartResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<UploadChunkedMultipartResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UploadChunkedMultipartResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadChunkedMultipartResponseBody' from JSON`,
  );
}

/** @internal */
export const UploadChunkedMultipartResponse$inboundSchema: z.ZodType<
  UploadChunkedMultipartResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.union([
    components.NonFinalChunkUploadResponse$inboundSchema,
    components.AsyncUploadResponse$inboundSchema,
    components.UploadResponse$inboundSchema,
  ]),
  z.string(),
]);

/** @internal */
export type UploadChunkedMultipartResponse$Outbound =
  | components.NonFinalChunkUploadResponse$Outbound
  | components.AsyncUploadResponse$Outbound
  | components.UploadResponse$Outbound
  | string;

/** @internal */
export const UploadChunkedMultipartResponse$outboundSchema: z.ZodType<
  UploadChunkedMultipartResponse$Outbound,
  z.ZodTypeDef,
  UploadChunkedMultipartResponse
> = z.union([
  z.union([
    components.NonFinalChunkUploadResponse$outboundSchema,
    components.AsyncUploadResponse$outboundSchema,
    components.UploadResponse$outboundSchema,
  ]),
  z.string(),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadChunkedMultipartResponse$ {
  /** @deprecated use `UploadChunkedMultipartResponse$inboundSchema` instead. */
  export const inboundSchema = UploadChunkedMultipartResponse$inboundSchema;
  /** @deprecated use `UploadChunkedMultipartResponse$outboundSchema` instead. */
  export const outboundSchema = UploadChunkedMultipartResponse$outboundSchema;
  /** @deprecated use `UploadChunkedMultipartResponse$Outbound` instead. */
  export type Outbound = UploadChunkedMultipartResponse$Outbound;
}

export function uploadChunkedMultipartResponseToJSON(
  uploadChunkedMultipartResponse: UploadChunkedMultipartResponse,
): string {
  return JSON.stringify(
    UploadChunkedMultipartResponse$outboundSchema.parse(
      uploadChunkedMultipartResponse,
    ),
  );
}

export function uploadChunkedMultipartResponseFromJSON(
  jsonString: string,
): SafeParseResult<UploadChunkedMultipartResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadChunkedMultipartResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadChunkedMultipartResponse' from JSON`,
  );
}
