/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListResourcesByAssetIDsGlobals = {
  /**
   * The cloud name of your product environment.
   */
  cloudName?: string | undefined;
};

/**
 * Resource type (optional, can sometimes disambiguate).
 */
export const ListResourcesByAssetIDsResourceType = {
  Image: "image",
  Video: "video",
  Raw: "raw",
} as const;
/**
 * Resource type (optional, can sometimes disambiguate).
 */
export type ListResourcesByAssetIDsResourceType = ClosedEnum<
  typeof ListResourcesByAssetIDsResourceType
>;

export type ListResourcesByAssetIDsRequest = {
  /**
   * List of asset IDs to retrieve (max 100).
   */
  assetIds: Array<string>;
  /**
   * Resource type (optional, can sometimes disambiguate).
   */
  resourceType?: ListResourcesByAssetIDsResourceType | undefined;
  fields?: Array<components.FieldsSpec> | undefined;
};

/** @internal */
export const ListResourcesByAssetIDsGlobals$inboundSchema: z.ZodType<
  ListResourcesByAssetIDsGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  cloud_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "cloud_name": "cloudName",
  });
});

/** @internal */
export type ListResourcesByAssetIDsGlobals$Outbound = {
  cloud_name?: string | undefined;
};

/** @internal */
export const ListResourcesByAssetIDsGlobals$outboundSchema: z.ZodType<
  ListResourcesByAssetIDsGlobals$Outbound,
  z.ZodTypeDef,
  ListResourcesByAssetIDsGlobals
> = z.object({
  cloudName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    cloudName: "cloud_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListResourcesByAssetIDsGlobals$ {
  /** @deprecated use `ListResourcesByAssetIDsGlobals$inboundSchema` instead. */
  export const inboundSchema = ListResourcesByAssetIDsGlobals$inboundSchema;
  /** @deprecated use `ListResourcesByAssetIDsGlobals$outboundSchema` instead. */
  export const outboundSchema = ListResourcesByAssetIDsGlobals$outboundSchema;
  /** @deprecated use `ListResourcesByAssetIDsGlobals$Outbound` instead. */
  export type Outbound = ListResourcesByAssetIDsGlobals$Outbound;
}

export function listResourcesByAssetIDsGlobalsToJSON(
  listResourcesByAssetIDsGlobals: ListResourcesByAssetIDsGlobals,
): string {
  return JSON.stringify(
    ListResourcesByAssetIDsGlobals$outboundSchema.parse(
      listResourcesByAssetIDsGlobals,
    ),
  );
}

export function listResourcesByAssetIDsGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ListResourcesByAssetIDsGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListResourcesByAssetIDsGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListResourcesByAssetIDsGlobals' from JSON`,
  );
}

/** @internal */
export const ListResourcesByAssetIDsResourceType$inboundSchema: z.ZodNativeEnum<
  typeof ListResourcesByAssetIDsResourceType
> = z.nativeEnum(ListResourcesByAssetIDsResourceType);

/** @internal */
export const ListResourcesByAssetIDsResourceType$outboundSchema:
  z.ZodNativeEnum<typeof ListResourcesByAssetIDsResourceType> =
    ListResourcesByAssetIDsResourceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListResourcesByAssetIDsResourceType$ {
  /** @deprecated use `ListResourcesByAssetIDsResourceType$inboundSchema` instead. */
  export const inboundSchema =
    ListResourcesByAssetIDsResourceType$inboundSchema;
  /** @deprecated use `ListResourcesByAssetIDsResourceType$outboundSchema` instead. */
  export const outboundSchema =
    ListResourcesByAssetIDsResourceType$outboundSchema;
}

/** @internal */
export const ListResourcesByAssetIDsRequest$inboundSchema: z.ZodType<
  ListResourcesByAssetIDsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  asset_ids: z.array(z.string()),
  resource_type: ListResourcesByAssetIDsResourceType$inboundSchema.optional(),
  fields: z.array(components.FieldsSpec$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "asset_ids": "assetIds",
    "resource_type": "resourceType",
  });
});

/** @internal */
export type ListResourcesByAssetIDsRequest$Outbound = {
  asset_ids: Array<string>;
  resource_type?: string | undefined;
  fields?: Array<string> | undefined;
};

/** @internal */
export const ListResourcesByAssetIDsRequest$outboundSchema: z.ZodType<
  ListResourcesByAssetIDsRequest$Outbound,
  z.ZodTypeDef,
  ListResourcesByAssetIDsRequest
> = z.object({
  assetIds: z.array(z.string()),
  resourceType: ListResourcesByAssetIDsResourceType$outboundSchema.optional(),
  fields: z.array(components.FieldsSpec$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    assetIds: "asset_ids",
    resourceType: "resource_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListResourcesByAssetIDsRequest$ {
  /** @deprecated use `ListResourcesByAssetIDsRequest$inboundSchema` instead. */
  export const inboundSchema = ListResourcesByAssetIDsRequest$inboundSchema;
  /** @deprecated use `ListResourcesByAssetIDsRequest$outboundSchema` instead. */
  export const outboundSchema = ListResourcesByAssetIDsRequest$outboundSchema;
  /** @deprecated use `ListResourcesByAssetIDsRequest$Outbound` instead. */
  export type Outbound = ListResourcesByAssetIDsRequest$Outbound;
}

export function listResourcesByAssetIDsRequestToJSON(
  listResourcesByAssetIDsRequest: ListResourcesByAssetIDsRequest,
): string {
  return JSON.stringify(
    ListResourcesByAssetIDsRequest$outboundSchema.parse(
      listResourcesByAssetIDsRequest,
    ),
  );
}

export function listResourcesByAssetIDsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListResourcesByAssetIDsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListResourcesByAssetIDsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListResourcesByAssetIDsRequest' from JSON`,
  );
}
