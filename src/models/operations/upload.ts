/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UploadGlobals = {
  /**
   * The cloud name of your product environment.
   */
  cloudName?: string | undefined;
};

export type UploadRequest = {
  /**
   * The type of resource to upload:
   *
   * @remarks
   * - "image" for uploading strictly images
   * - "video" for uploading strictly videos
   * - "raw" for uploading non-media files
   * - "auto" for allowing Cloudinary to automatically detect the type of the uploaded file
   */
  resourceType?: components.UploadResourceType | undefined;
  uploadRequest: components.UploadRequest;
};

/**
 * Successful upload
 */
export type UploadResponseBody =
  | components.AsyncUploadResponse
  | components.UploadResponse;

export type UploadResponse =
  | components.AsyncUploadResponse
  | components.UploadResponse
  | string;

/** @internal */
export const UploadGlobals$inboundSchema: z.ZodType<
  UploadGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  cloud_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "cloud_name": "cloudName",
  });
});

/** @internal */
export type UploadGlobals$Outbound = {
  cloud_name?: string | undefined;
};

/** @internal */
export const UploadGlobals$outboundSchema: z.ZodType<
  UploadGlobals$Outbound,
  z.ZodTypeDef,
  UploadGlobals
> = z.object({
  cloudName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    cloudName: "cloud_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadGlobals$ {
  /** @deprecated use `UploadGlobals$inboundSchema` instead. */
  export const inboundSchema = UploadGlobals$inboundSchema;
  /** @deprecated use `UploadGlobals$outboundSchema` instead. */
  export const outboundSchema = UploadGlobals$outboundSchema;
  /** @deprecated use `UploadGlobals$Outbound` instead. */
  export type Outbound = UploadGlobals$Outbound;
}

export function uploadGlobalsToJSON(uploadGlobals: UploadGlobals): string {
  return JSON.stringify(UploadGlobals$outboundSchema.parse(uploadGlobals));
}

export function uploadGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<UploadGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadGlobals' from JSON`,
  );
}

/** @internal */
export const UploadRequest$inboundSchema: z.ZodType<
  UploadRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource_type: components.UploadResourceType$inboundSchema.default("auto"),
  upload_request: components.UploadRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "resource_type": "resourceType",
    "upload_request": "uploadRequest",
  });
});

/** @internal */
export type UploadRequest$Outbound = {
  resource_type: string;
  upload_request: components.UploadRequest$Outbound;
};

/** @internal */
export const UploadRequest$outboundSchema: z.ZodType<
  UploadRequest$Outbound,
  z.ZodTypeDef,
  UploadRequest
> = z.object({
  resourceType: components.UploadResourceType$outboundSchema.default("auto"),
  uploadRequest: components.UploadRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    resourceType: "resource_type",
    uploadRequest: "upload_request",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadRequest$ {
  /** @deprecated use `UploadRequest$inboundSchema` instead. */
  export const inboundSchema = UploadRequest$inboundSchema;
  /** @deprecated use `UploadRequest$outboundSchema` instead. */
  export const outboundSchema = UploadRequest$outboundSchema;
  /** @deprecated use `UploadRequest$Outbound` instead. */
  export type Outbound = UploadRequest$Outbound;
}

export function uploadRequestToJSON(uploadRequest: UploadRequest): string {
  return JSON.stringify(UploadRequest$outboundSchema.parse(uploadRequest));
}

export function uploadRequestFromJSON(
  jsonString: string,
): SafeParseResult<UploadRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadRequest' from JSON`,
  );
}

/** @internal */
export const UploadResponseBody$inboundSchema: z.ZodType<
  UploadResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.AsyncUploadResponse$inboundSchema,
  components.UploadResponse$inboundSchema,
]);

/** @internal */
export type UploadResponseBody$Outbound =
  | components.AsyncUploadResponse$Outbound
  | components.UploadResponse$Outbound;

/** @internal */
export const UploadResponseBody$outboundSchema: z.ZodType<
  UploadResponseBody$Outbound,
  z.ZodTypeDef,
  UploadResponseBody
> = z.union([
  components.AsyncUploadResponse$outboundSchema,
  components.UploadResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadResponseBody$ {
  /** @deprecated use `UploadResponseBody$inboundSchema` instead. */
  export const inboundSchema = UploadResponseBody$inboundSchema;
  /** @deprecated use `UploadResponseBody$outboundSchema` instead. */
  export const outboundSchema = UploadResponseBody$outboundSchema;
  /** @deprecated use `UploadResponseBody$Outbound` instead. */
  export type Outbound = UploadResponseBody$Outbound;
}

export function uploadResponseBodyToJSON(
  uploadResponseBody: UploadResponseBody,
): string {
  return JSON.stringify(
    UploadResponseBody$outboundSchema.parse(uploadResponseBody),
  );
}

export function uploadResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<UploadResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadResponseBody' from JSON`,
  );
}

/** @internal */
export const UploadResponse$inboundSchema: z.ZodType<
  UploadResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.union([
    components.AsyncUploadResponse$inboundSchema,
    components.UploadResponse$inboundSchema,
  ]),
  z.string(),
]);

/** @internal */
export type UploadResponse$Outbound =
  | components.AsyncUploadResponse$Outbound
  | components.UploadResponse$Outbound
  | string;

/** @internal */
export const UploadResponse$outboundSchema: z.ZodType<
  UploadResponse$Outbound,
  z.ZodTypeDef,
  UploadResponse
> = z.union([
  z.union([
    components.AsyncUploadResponse$outboundSchema,
    components.UploadResponse$outboundSchema,
  ]),
  z.string(),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadResponse$ {
  /** @deprecated use `UploadResponse$inboundSchema` instead. */
  export const inboundSchema = UploadResponse$inboundSchema;
  /** @deprecated use `UploadResponse$outboundSchema` instead. */
  export const outboundSchema = UploadResponse$outboundSchema;
  /** @deprecated use `UploadResponse$Outbound` instead. */
  export type Outbound = UploadResponse$Outbound;
}

export function uploadResponseToJSON(uploadResponse: UploadResponse): string {
  return JSON.stringify(UploadResponse$outboundSchema.parse(uploadResponse));
}

export function uploadResponseFromJSON(
  jsonString: string,
): SafeParseResult<UploadResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadResponse' from JSON`,
  );
}
