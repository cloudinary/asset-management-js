/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UploadNoResourceTypeMultipartGlobals = {
  /**
   * The cloud name of your product environment.
   */
  cloudName?: string | undefined;
};

/**
 * Successful upload
 */
export type UploadNoResourceTypeMultipartResponseBody =
  | components.AsyncUploadResponse
  | components.UploadResponse;

export type UploadNoResourceTypeMultipartResponse =
  | components.AsyncUploadResponse
  | components.UploadResponse
  | string;

/** @internal */
export const UploadNoResourceTypeMultipartGlobals$inboundSchema: z.ZodType<
  UploadNoResourceTypeMultipartGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  cloud_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "cloud_name": "cloudName",
  });
});

/** @internal */
export type UploadNoResourceTypeMultipartGlobals$Outbound = {
  cloud_name?: string | undefined;
};

/** @internal */
export const UploadNoResourceTypeMultipartGlobals$outboundSchema: z.ZodType<
  UploadNoResourceTypeMultipartGlobals$Outbound,
  z.ZodTypeDef,
  UploadNoResourceTypeMultipartGlobals
> = z.object({
  cloudName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    cloudName: "cloud_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadNoResourceTypeMultipartGlobals$ {
  /** @deprecated use `UploadNoResourceTypeMultipartGlobals$inboundSchema` instead. */
  export const inboundSchema =
    UploadNoResourceTypeMultipartGlobals$inboundSchema;
  /** @deprecated use `UploadNoResourceTypeMultipartGlobals$outboundSchema` instead. */
  export const outboundSchema =
    UploadNoResourceTypeMultipartGlobals$outboundSchema;
  /** @deprecated use `UploadNoResourceTypeMultipartGlobals$Outbound` instead. */
  export type Outbound = UploadNoResourceTypeMultipartGlobals$Outbound;
}

export function uploadNoResourceTypeMultipartGlobalsToJSON(
  uploadNoResourceTypeMultipartGlobals: UploadNoResourceTypeMultipartGlobals,
): string {
  return JSON.stringify(
    UploadNoResourceTypeMultipartGlobals$outboundSchema.parse(
      uploadNoResourceTypeMultipartGlobals,
    ),
  );
}

export function uploadNoResourceTypeMultipartGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<UploadNoResourceTypeMultipartGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UploadNoResourceTypeMultipartGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadNoResourceTypeMultipartGlobals' from JSON`,
  );
}

/** @internal */
export const UploadNoResourceTypeMultipartResponseBody$inboundSchema: z.ZodType<
  UploadNoResourceTypeMultipartResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.AsyncUploadResponse$inboundSchema,
  components.UploadResponse$inboundSchema,
]);

/** @internal */
export type UploadNoResourceTypeMultipartResponseBody$Outbound =
  | components.AsyncUploadResponse$Outbound
  | components.UploadResponse$Outbound;

/** @internal */
export const UploadNoResourceTypeMultipartResponseBody$outboundSchema:
  z.ZodType<
    UploadNoResourceTypeMultipartResponseBody$Outbound,
    z.ZodTypeDef,
    UploadNoResourceTypeMultipartResponseBody
  > = z.union([
    components.AsyncUploadResponse$outboundSchema,
    components.UploadResponse$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadNoResourceTypeMultipartResponseBody$ {
  /** @deprecated use `UploadNoResourceTypeMultipartResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    UploadNoResourceTypeMultipartResponseBody$inboundSchema;
  /** @deprecated use `UploadNoResourceTypeMultipartResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    UploadNoResourceTypeMultipartResponseBody$outboundSchema;
  /** @deprecated use `UploadNoResourceTypeMultipartResponseBody$Outbound` instead. */
  export type Outbound = UploadNoResourceTypeMultipartResponseBody$Outbound;
}

export function uploadNoResourceTypeMultipartResponseBodyToJSON(
  uploadNoResourceTypeMultipartResponseBody:
    UploadNoResourceTypeMultipartResponseBody,
): string {
  return JSON.stringify(
    UploadNoResourceTypeMultipartResponseBody$outboundSchema.parse(
      uploadNoResourceTypeMultipartResponseBody,
    ),
  );
}

export function uploadNoResourceTypeMultipartResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  UploadNoResourceTypeMultipartResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UploadNoResourceTypeMultipartResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UploadNoResourceTypeMultipartResponseBody' from JSON`,
  );
}

/** @internal */
export const UploadNoResourceTypeMultipartResponse$inboundSchema: z.ZodType<
  UploadNoResourceTypeMultipartResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.union([
    components.AsyncUploadResponse$inboundSchema,
    components.UploadResponse$inboundSchema,
  ]),
  z.string(),
]);

/** @internal */
export type UploadNoResourceTypeMultipartResponse$Outbound =
  | components.AsyncUploadResponse$Outbound
  | components.UploadResponse$Outbound
  | string;

/** @internal */
export const UploadNoResourceTypeMultipartResponse$outboundSchema: z.ZodType<
  UploadNoResourceTypeMultipartResponse$Outbound,
  z.ZodTypeDef,
  UploadNoResourceTypeMultipartResponse
> = z.union([
  z.union([
    components.AsyncUploadResponse$outboundSchema,
    components.UploadResponse$outboundSchema,
  ]),
  z.string(),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadNoResourceTypeMultipartResponse$ {
  /** @deprecated use `UploadNoResourceTypeMultipartResponse$inboundSchema` instead. */
  export const inboundSchema =
    UploadNoResourceTypeMultipartResponse$inboundSchema;
  /** @deprecated use `UploadNoResourceTypeMultipartResponse$outboundSchema` instead. */
  export const outboundSchema =
    UploadNoResourceTypeMultipartResponse$outboundSchema;
  /** @deprecated use `UploadNoResourceTypeMultipartResponse$Outbound` instead. */
  export type Outbound = UploadNoResourceTypeMultipartResponse$Outbound;
}

export function uploadNoResourceTypeMultipartResponseToJSON(
  uploadNoResourceTypeMultipartResponse: UploadNoResourceTypeMultipartResponse,
): string {
  return JSON.stringify(
    UploadNoResourceTypeMultipartResponse$outboundSchema.parse(
      uploadNoResourceTypeMultipartResponse,
    ),
  );
}

export function uploadNoResourceTypeMultipartResponseFromJSON(
  jsonString: string,
): SafeParseResult<UploadNoResourceTypeMultipartResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UploadNoResourceTypeMultipartResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadNoResourceTypeMultipartResponse' from JSON`,
  );
}
