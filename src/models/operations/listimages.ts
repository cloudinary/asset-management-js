/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListImagesGlobals = {
  /**
   * The cloud name of your product environment.
   */
  cloudName?: string | undefined;
};

/**
 * The storage type of the assets. Necessary for prefix filtering.
 */
export const ListImagesType = {
  Upload: "upload",
  Private: "private",
  Authenticated: "authenticated",
  Fetch: "fetch",
  List: "list",
} as const;
/**
 * The storage type of the assets. Necessary for prefix filtering.
 */
export type ListImagesType = ClosedEnum<typeof ListImagesType>;

export type ListImagesRequest = {
  /**
   * The storage type of the assets. Necessary for prefix filtering.
   */
  type?: ListImagesType | undefined;
  /**
   * Find resources with a public ID prefix. Requires the `type` parameter.
   */
  prefix?: string | undefined;
  /**
   * An array of public IDs to return.
   */
  publicIds?: Array<string> | undefined;
  /**
   * Whether to include the list of tag names assigned to each asset. Default: false
   */
  tags?: boolean | undefined;
  /**
   * Cursor for pagination.
   */
  nextCursor?: string | undefined;
  /**
   * Maximum number of results to return (1-500).
   */
  maxResults?: number | undefined;
  /**
   * Sort direction.
   */
  direction?: components.Direction | undefined;
  /**
   * Retrieve resources uploaded after this timestamp.
   */
  startAt?: Date | undefined;
  fields?: Array<components.FieldsSpec> | undefined;
};

/** @internal */
export const ListImagesGlobals$inboundSchema: z.ZodType<
  ListImagesGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  cloud_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "cloud_name": "cloudName",
  });
});

/** @internal */
export type ListImagesGlobals$Outbound = {
  cloud_name?: string | undefined;
};

/** @internal */
export const ListImagesGlobals$outboundSchema: z.ZodType<
  ListImagesGlobals$Outbound,
  z.ZodTypeDef,
  ListImagesGlobals
> = z.object({
  cloudName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    cloudName: "cloud_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListImagesGlobals$ {
  /** @deprecated use `ListImagesGlobals$inboundSchema` instead. */
  export const inboundSchema = ListImagesGlobals$inboundSchema;
  /** @deprecated use `ListImagesGlobals$outboundSchema` instead. */
  export const outboundSchema = ListImagesGlobals$outboundSchema;
  /** @deprecated use `ListImagesGlobals$Outbound` instead. */
  export type Outbound = ListImagesGlobals$Outbound;
}

export function listImagesGlobalsToJSON(
  listImagesGlobals: ListImagesGlobals,
): string {
  return JSON.stringify(
    ListImagesGlobals$outboundSchema.parse(listImagesGlobals),
  );
}

export function listImagesGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ListImagesGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListImagesGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListImagesGlobals' from JSON`,
  );
}

/** @internal */
export const ListImagesType$inboundSchema: z.ZodNativeEnum<
  typeof ListImagesType
> = z.nativeEnum(ListImagesType);

/** @internal */
export const ListImagesType$outboundSchema: z.ZodNativeEnum<
  typeof ListImagesType
> = ListImagesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListImagesType$ {
  /** @deprecated use `ListImagesType$inboundSchema` instead. */
  export const inboundSchema = ListImagesType$inboundSchema;
  /** @deprecated use `ListImagesType$outboundSchema` instead. */
  export const outboundSchema = ListImagesType$outboundSchema;
}

/** @internal */
export const ListImagesRequest$inboundSchema: z.ZodType<
  ListImagesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ListImagesType$inboundSchema.optional(),
  prefix: z.string().optional(),
  public_ids: z.array(z.string()).optional(),
  tags: z.boolean().optional(),
  next_cursor: z.string().optional(),
  max_results: z.number().int().optional(),
  direction: components.Direction$inboundSchema.optional(),
  start_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  fields: z.array(components.FieldsSpec$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "public_ids": "publicIds",
    "next_cursor": "nextCursor",
    "max_results": "maxResults",
    "start_at": "startAt",
  });
});

/** @internal */
export type ListImagesRequest$Outbound = {
  type?: string | undefined;
  prefix?: string | undefined;
  public_ids?: Array<string> | undefined;
  tags?: boolean | undefined;
  next_cursor?: string | undefined;
  max_results?: number | undefined;
  direction?: string | undefined;
  start_at?: string | undefined;
  fields?: Array<string> | undefined;
};

/** @internal */
export const ListImagesRequest$outboundSchema: z.ZodType<
  ListImagesRequest$Outbound,
  z.ZodTypeDef,
  ListImagesRequest
> = z.object({
  type: ListImagesType$outboundSchema.optional(),
  prefix: z.string().optional(),
  publicIds: z.array(z.string()).optional(),
  tags: z.boolean().optional(),
  nextCursor: z.string().optional(),
  maxResults: z.number().int().optional(),
  direction: components.Direction$outboundSchema.optional(),
  startAt: z.date().transform(v => v.toISOString()).optional(),
  fields: z.array(components.FieldsSpec$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    publicIds: "public_ids",
    nextCursor: "next_cursor",
    maxResults: "max_results",
    startAt: "start_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListImagesRequest$ {
  /** @deprecated use `ListImagesRequest$inboundSchema` instead. */
  export const inboundSchema = ListImagesRequest$inboundSchema;
  /** @deprecated use `ListImagesRequest$outboundSchema` instead. */
  export const outboundSchema = ListImagesRequest$outboundSchema;
  /** @deprecated use `ListImagesRequest$Outbound` instead. */
  export type Outbound = ListImagesRequest$Outbound;
}

export function listImagesRequestToJSON(
  listImagesRequest: ListImagesRequest,
): string {
  return JSON.stringify(
    ListImagesRequest$outboundSchema.parse(listImagesRequest),
  );
}

export function listImagesRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListImagesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListImagesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListImagesRequest' from JSON`,
  );
}
