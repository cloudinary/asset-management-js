/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListResourcesByContextGlobals = {
  /**
   * The cloud name of your product environment.
   */
  cloudName?: string | undefined;
};

export type ListResourcesByContextRequest = {
  /**
   * The type the of asset.
   */
  resourceType: components.ResourceTypeParameter;
  /**
   * Context key to filter by.
   */
  key: string;
  /**
   * Context value to filter by.
   */
  value?: string | undefined;
  /**
   * Cursor for pagination.
   */
  nextCursor?: string | undefined;
  /**
   * Maximum number of results to return (1-500).
   */
  maxResults?: number | undefined;
  /**
   * Sort direction.
   */
  direction?: components.Direction | undefined;
  fields?: Array<components.FieldsSpec> | undefined;
};

/** @internal */
export const ListResourcesByContextGlobals$inboundSchema: z.ZodType<
  ListResourcesByContextGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  cloud_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "cloud_name": "cloudName",
  });
});

/** @internal */
export type ListResourcesByContextGlobals$Outbound = {
  cloud_name?: string | undefined;
};

/** @internal */
export const ListResourcesByContextGlobals$outboundSchema: z.ZodType<
  ListResourcesByContextGlobals$Outbound,
  z.ZodTypeDef,
  ListResourcesByContextGlobals
> = z.object({
  cloudName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    cloudName: "cloud_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListResourcesByContextGlobals$ {
  /** @deprecated use `ListResourcesByContextGlobals$inboundSchema` instead. */
  export const inboundSchema = ListResourcesByContextGlobals$inboundSchema;
  /** @deprecated use `ListResourcesByContextGlobals$outboundSchema` instead. */
  export const outboundSchema = ListResourcesByContextGlobals$outboundSchema;
  /** @deprecated use `ListResourcesByContextGlobals$Outbound` instead. */
  export type Outbound = ListResourcesByContextGlobals$Outbound;
}

export function listResourcesByContextGlobalsToJSON(
  listResourcesByContextGlobals: ListResourcesByContextGlobals,
): string {
  return JSON.stringify(
    ListResourcesByContextGlobals$outboundSchema.parse(
      listResourcesByContextGlobals,
    ),
  );
}

export function listResourcesByContextGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ListResourcesByContextGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListResourcesByContextGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListResourcesByContextGlobals' from JSON`,
  );
}

/** @internal */
export const ListResourcesByContextRequest$inboundSchema: z.ZodType<
  ListResourcesByContextRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource_type: components.ResourceTypeParameter$inboundSchema,
  key: z.string(),
  value: z.string().optional(),
  next_cursor: z.string().optional(),
  max_results: z.number().int().optional(),
  direction: components.Direction$inboundSchema.optional(),
  fields: z.array(components.FieldsSpec$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "resource_type": "resourceType",
    "next_cursor": "nextCursor",
    "max_results": "maxResults",
  });
});

/** @internal */
export type ListResourcesByContextRequest$Outbound = {
  resource_type: string;
  key: string;
  value?: string | undefined;
  next_cursor?: string | undefined;
  max_results?: number | undefined;
  direction?: string | undefined;
  fields?: Array<string> | undefined;
};

/** @internal */
export const ListResourcesByContextRequest$outboundSchema: z.ZodType<
  ListResourcesByContextRequest$Outbound,
  z.ZodTypeDef,
  ListResourcesByContextRequest
> = z.object({
  resourceType: components.ResourceTypeParameter$outboundSchema,
  key: z.string(),
  value: z.string().optional(),
  nextCursor: z.string().optional(),
  maxResults: z.number().int().optional(),
  direction: components.Direction$outboundSchema.optional(),
  fields: z.array(components.FieldsSpec$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    resourceType: "resource_type",
    nextCursor: "next_cursor",
    maxResults: "max_results",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListResourcesByContextRequest$ {
  /** @deprecated use `ListResourcesByContextRequest$inboundSchema` instead. */
  export const inboundSchema = ListResourcesByContextRequest$inboundSchema;
  /** @deprecated use `ListResourcesByContextRequest$outboundSchema` instead. */
  export const outboundSchema = ListResourcesByContextRequest$outboundSchema;
  /** @deprecated use `ListResourcesByContextRequest$Outbound` instead. */
  export type Outbound = ListResourcesByContextRequest$Outbound;
}

export function listResourcesByContextRequestToJSON(
  listResourcesByContextRequest: ListResourcesByContextRequest,
): string {
  return JSON.stringify(
    ListResourcesByContextRequest$outboundSchema.parse(
      listResourcesByContextRequest,
    ),
  );
}

export function listResourcesByContextRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListResourcesByContextRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListResourcesByContextRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListResourcesByContextRequest' from JSON`,
  );
}
