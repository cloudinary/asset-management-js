/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { uploadUploadChunked } from "../../funcs/uploadUploadChunked.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: operations.UploadChunkedRequest$inboundSchema,
};

export const tool$uploadUploadChunked: ToolDefinition<typeof args> = {
  name: "upload-upload-chunked",
  description: `Upload a large file in chunks

Uploads a large file in chunks, enabling efficient upload of large files with the ability to resume interrupted uploads.
It is required for any files that are larger than 100 MB. This is often relevant for video files, as they tend to have larger files sizes.
Minimum chunk size is 5 MB.
`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await uploadUploadChunked(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
