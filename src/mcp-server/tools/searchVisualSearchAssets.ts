/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { searchVisualSearchAssets } from "../../funcs/searchVisualSearchAssets.js";
import * as components from "../../models/components/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: components.VisualSearchParametersUnion$inboundSchema,
};

export const tool$searchVisualSearchAssets: ToolDefinition<typeof args> = {
  name: "visual-search-assets",
  description:
    `Purpose: Finds images in your asset library based on visual similarity or content, rather than metadata or filename. This operation analyzes an input (which can be an image or a textual description) and returns assets that are visually similar or relevant. It allows you to search by what's actually in the image (colors, shapes, objects, etc.) instead of by tags or keywords. For example, you can provide a reference image and find other images in your cloud with similar content.
Usage: Use visual search when you need to locate images that "look like" a given image or match a described visual concept. Common use cases include finding duplicate or near-duplicate images, grouping product photos by appearance, or enabling end-users to search a media library by uploading an example image. To execute a visual search, you must supply either an image URL, an asset ID of an existing image, or a text query describing the desired image content. (This feature is available to Enterprise accounts, and images need to be indexed for visual search – for example, by setting the \`visual_search\` indexing flag on upload.)
When Not to Use: If a simple metadata or tag search can achieve the result (for example, searching by explicit tags like "red shirt"), visual search may be unnecessary overhead. Also avoid using it for non-image asset types (it's intended for images). If your account does not have the visual search feature enabled (or you haven't indexed your images for it), this operation will not be applicable. In such cases, rely on standard search by tags, filenames, or other attributes.
Output: Returns a list of image assets sorted by visual similarity to the query image or concept. The response includes an array of resource records (just like a typical asset listing) for the images deemed most similar. They are ordered from most visually similar to less similar. Each returned resource will include standard asset details (public ID, URLs, etc.), allowing you to identify or use those images. (No special fields beyond the normal asset info are added – the key difference is how the results are ranked by relevance.)
`,
  scopes: ["librarian"],
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await searchVisualSearchAssets(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
