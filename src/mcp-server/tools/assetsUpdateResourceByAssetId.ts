/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { assetsUpdateResourceByAssetId } from "../../funcs/assetsUpdateResourceByAssetId.js";
import * as components from "../../models/components/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  assetId: z.string(),
  resourceUpdateRequest: components.ResourceUpdateRequest$inboundSchema,
};

export const tool$assetsUpdateResourceByAssetId: ToolDefinition<typeof args> = {
  name: "asset-update",
  description:
    `Purpose: Updates an existing asset's metadata, tags, context, and other attributes using its immutable asset ID, allowing you to modify asset properties without needing to know the current public ID or folder structure.
Usage: Use this to update asset metadata, add/remove tags, modify context data, or change other asset attributes when you have the asset ID. Essential for asset management workflows, content tagging systems, and metadata synchronization processes.
Example request: {"tags": "product,electronics,featured", "context": "category=electronics|status=active", "metadata": {"product_id": "12345", "category": "smartphones"}}
Parameters: asset_id(immutable asset identifier from URL path), tags(comma-separated tag list), context(pipe-separated key=value pairs), metadata(structured metadata object), access_control(access permissions), auto_tagging(confidence threshold 0-1), notification_url(callback URL), face_coordinates(facial detection coordinates), custom_coordinates(manual crop coordinates), background_removal(AI background removal), moderation(content moderation)
When Not to Use: Don't use for renaming assets or changing public IDs (use rename instead). Avoid for high-frequency updates on the same asset. Don't use if you need to update transformation settings (those are separate from asset metadata).
Output: Returns updated asset information: public_id(asset identifier), asset_id(unique asset ID), version(version number), resource_type(asset type), type(storage type), format(file format), created_at(creation timestamp), bytes(file size), width/height(dimensions for images/videos), tags(current tags array), context(current context object), metadata(current structured metadata), url(public delivery URL), secure_url(HTTPS delivery URL)
Example output: {"public_id":"sample","asset_id":"abc123def456","version":1234567890,"resource_type":"image","type":"upload","format":"jpg","created_at":"2023-01-15T10:00:00Z","bytes":45231,"width":800,"height":600,"tags":["product","electronics","featured"],"context":{"category":"electronics","status":"active"},"metadata":{"product_id":"12345","category":"smartphones"},"url":"http://res.cloudinary.com/demo/image/upload/v1234567890/sample.jpg","secure_url":"https://res.cloudinary.com/demo/image/upload/v1234567890/sample.jpg"}
`,
  scopes: ["librarian"],
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await assetsUpdateResourceByAssetId(
      client,
      args.assetId,
      args.resourceUpdateRequest,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
