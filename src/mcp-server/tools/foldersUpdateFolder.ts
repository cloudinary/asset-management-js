/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { foldersUpdateFolder } from "../../funcs/foldersUpdateFolder.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  folder: z.string(),
  requestBody: operations.UpdateFolderRequestBody$inboundSchema,
};

export const tool$foldersUpdateFolder: ToolDefinition<typeof args> = {
  name: "move-folder",
  description:
    `Purpose: Renames or moves an entire folder (along with all assets it contains) to a new location within your Cloudinary media library, updating all asset paths accordingly.
Usage: Use this to reorganize folder structures, rename folders for better organization, or move content between different organizational hierarchies. Essential for maintaining organized media libraries and adapting to changing content structures.
Example request: PUT /folders/old/path with body {"to_folder": "new/path"}
Parameters: folder(current folder path), to_folder(new folder path - can include renaming and/or moving to different location)
When Not to Use: Don't use for deleting folders (use delete-folder instead). Avoid moving folders that are actively being used in production workflows during the operation. Don't use for individual asset moves (assets maintain their public IDs within the new folder path).
Output: Returns details of the move operation showing both source and destination paths.
Example output: {"from":{"name":"path","path":"old/path"},"to":{"name":"path","path":"new/path"}}
`,
  scopes: ["librarian"],
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await foldersUpdateFolder(
      client,
      args.folder,
      args.requestBody,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
