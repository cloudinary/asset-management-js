/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { assetRelationsCreateAssetRelationsByPublicId } from "../../funcs/assetRelationsCreateAssetRelationsByPublicId.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: operations.CreateAssetRelationsByPublicIdRequest$inboundSchema,
};

export const tool$assetRelationsCreateAssetRelationsByPublicId: ToolDefinition<
  typeof args
> = {
  name: "asset-relations-create-asset-relations-by-public-id",
  description: `Create asset relations by public ID

Relates an asset to other assets by public IDs. This allows you to indicate that the asset is logically related to other assets in some way (e.g., similar content, or a peripheral asset like video/transcript, etc). This is a bidirectional process, meaning that the asset is also added as a related_asset to all the other assets specified. The relation is also a one to many relationship, where the asset is related to all the assets specified, but those assets aren't also related to each other.`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] =
      await assetRelationsCreateAssetRelationsByPublicId(
        client,
        args.request,
        { fetchOptions: { signal: ctx.signal } },
      ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
