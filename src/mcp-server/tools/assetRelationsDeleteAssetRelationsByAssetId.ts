/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { assetRelationsDeleteAssetRelationsByAssetId } from "../../funcs/assetRelationsDeleteAssetRelationsByAssetId.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  assetId: z.string(),
  requestBody:
    operations.DeleteAssetRelationsByAssetIdRequestBody$inboundSchema,
};

export const tool$assetRelationsDeleteAssetRelationsByAssetId: ToolDefinition<
  typeof args
> = {
  name: "delete-asset-relations",
  description:
    `Purpose: Removes bidirectional relationships between assets using their unique asset IDs, breaking previously established content associations and logical groupings.
Usage: Use this to clean up outdated asset relationships, remove incorrect associations, or reorganize content structures when relationships are no longer relevant. Essential for maintaining clean content organization and relationship accuracy.
Example request: {"assets_to_unrelate": ["f12345a5c789c", "bbb0efc00c0f12"]}
Parameters: asset_id(primary asset identifier from URL path), assets_to_unrelate(array of asset IDs to remove relationships with)
Note: This is bidirectional - the primary asset will be removed from the related assets list of each specified asset, and the specified assets will be removed from the primary asset's related list.
When Not to Use: Don't use for temporary relationship management or when you might need to restore relationships later. Be careful not to remove relationships that are still needed for content organization.
Output: Returns relation deletion results: deleted(array of successfully removed relations), errors(array of failed deletions with error details), partially_successful(boolean indicating if some deletions failed)
Example output: {"deleted":[{"asset_id":"f12345a5c789c","status":"unrelated"},{"asset_id":"bbb0efc00c0f12","status":"unrelated"}],"errors":[],"partially_successful":false}
`,
  scopes: ["librarian"],
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await assetRelationsDeleteAssetRelationsByAssetId(
      client,
      args.assetId,
      args.requestBody,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
