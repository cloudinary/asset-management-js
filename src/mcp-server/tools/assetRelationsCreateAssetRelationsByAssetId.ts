/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { assetRelationsCreateAssetRelationsByAssetId } from "../../funcs/assetRelationsCreateAssetRelationsByAssetId.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  assetId: z.string(),
  requestBody:
    operations.CreateAssetRelationsByAssetIdRequestBody$inboundSchema,
};

export const tool$assetRelationsCreateAssetRelationsByAssetId: ToolDefinition<
  typeof args
> = {
  name: "create-asset-relations",
  description:
    `Purpose: Creates bidirectional relationships between assets using their unique asset IDs, enabling logical grouping and association of related content. This allows you to establish connections between assets for content organization, related item discovery, and workflow management.
Usage: Use this to link related assets such as product images with their videos, documents with their thumbnails, or content pieces that belong to the same campaign. Essential for building content relationships, recommendation systems, and asset organization workflows.
Example request: {"assets_to_relate": ["f12345a5c789c", "bbb0efc00c0f12"]}
Parameters: asset_id(primary asset identifier from URL path), assets_to_relate(array of up to 10 asset IDs to relate to the primary asset)
Note: This is bidirectional - each related asset will also list the primary asset as related. Relations are one-to-many (primary asset relates to all specified assets, but specified assets don't automatically relate to each other).
When Not to Use: Don't use for temporary associations or data that changes frequently. Avoid creating excessive relations as this can impact performance.
Output: Returns relation creation results: created(array of successfully created relations), errors(array of failed relations with error details), partially_successful(boolean indicating if some relations failed)
Example output: {"created":[{"asset_id":"f12345a5c789c","status":"related"},{"asset_id":"bbb0efc00c0f12","status":"related"}],"errors":[],"partially_successful":false}
`,
  scopes: ["librarian"],
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await assetRelationsCreateAssetRelationsByAssetId(
      client,
      args.assetId,
      args.requestBody,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
