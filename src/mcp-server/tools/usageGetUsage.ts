/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { usageGetUsage } from "../../funcs/usageGetUsage.js";
import { RFCDate } from "../../types/rfcdate.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  date: z.string().transform(v => new RFCDate(v)).optional(),
};

export const tool$usageGetUsage: ToolDefinition<typeof args> = {
  name: "get-usage-details",
  description:
    `Purpose: Provides a report on your product environment's usage, including storage, credits, bandwidth, requests, and asset counts. 
Usage: Use this operation to monitor account usage or retrieve usage metrics for a specific date (up to 3 months in the past). 
When Not to Use: Don't use this for per-asset statistics or real-time updates â€“ the data is aggregated and updated periodically, meant for overall account monitoring. 
Output: Returns a comprehensive JSON object containing: plan(account plan type), last_updated(last usage calculation date), date_requested(usage report date), credits(total credits used/limit), transformations(image/video transformation usage), storage(storage usage in bytes), bandwidth(bandwidth usage in bytes), resources(total number of assets), derived_resources(transformed assets count), requests(total API requests), objects(object detection usage), impressions(image impression count), seconds_delivered(video seconds delivered), aws_rek_tagging(AWS recognition usage/limits), google_speech(Google speech API usage/limits), google_video_tagging(Google video tagging usage/limits), google_tagging(Google image tagging usage/limits), cloudinary_ai(Cloudinary AI services usage/limits), object_detection(object detection usage/limits), clip(CLIP model usage/limits), ai_vision(AI vision services usage/limits), media_limits(file size/pixel limits)
`,
  scopes: ["admin"],
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await usageGetUsage(
      client,
      args.date,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
